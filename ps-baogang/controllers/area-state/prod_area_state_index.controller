<config injector="$scope, api, userLoginUIService"
        deps="statusOverview,countProgress"></config>
<template>
  <div class="area-state-index-wrapper">
    <div class="map-wrapper"></div>
    <div class="aside-wrapper">
      <div class="aside-item">
        <p style="margin: 5px;padding: 0px;font-size: 12px;font-weight: bold;color: rgb(255, 255, 255);">状态总览</p>
        <div class="status-overview">
          <div class="status-overview-item" ng-repeat="item in list">
            <status-overview config="item"></status-overview>
          </div>
        </div>
      </div>
      <div class="aside-item">
        <p style="margin: 5px;padding: 0px;font-size: 12px;font-weight: bold;color: rgb(255, 255, 255);">诊断绩效统计(当月内)</p>
        <count-progress config="countProgressConfig"></count-progress>
      </div>
      <div class="aside-item"></div>
    </div>
  </div>
</template>
<script>
export default function ($scope, api, userLoginUIService) {
  api.post('userDomainService.queryDomainTree', userLoginUIService.user.userID).then(ret => {
    let domainTree = ret.data[0];
    let domains = domainTree.domainInfos;
    let domainIds = domains.map(domain => {
      return domain.id;
    });

    let stateOverviewParam = ['kpi', {
      isRealTimeData: true,
      includeInstance: true,
      nodeIds: domainIds,
      kpiCodes: [6100]
    }];

    let diagnosisParam = ['kpi', {
      isRealTimeData: true,
      includeInstance: true,
      nodeIds: domainIds,
      kpiCodes: [6106]
    }];

    api.post('kpiDataFlexService.getKpiValueList', stateOverviewParam).then(ret => {

      let data = ret.data;
      let displayData = {};

      domains.forEach(domain => {
        data.filter(dataItem => {
          return dataItem.nodeId == domain.id;
        }).forEach(filterDataItem => {
          displayData[filterDataItem.nodeId] = displayData[filterDataItem.nodeId] || [];
          switch (filterDataItem.instance) {
            case 'severity,0':
              displayData[filterDataItem.nodeId].push({
                name: '监测台数',
                value: filterDataItem.value,
                index: 0
              });
              break;
            case 'severity,-1':
              displayData[filterDataItem.nodeId].push({
                name: '正常',
                value: filterDataItem.value,
                color: 'normal',
                index: 3
              });
              break;
            case 'severity,2':
              displayData[filterDataItem.nodeId].push({
                name: '注意',
                value: filterDataItem.value,
                color: 'notice',
                index: 2
              });
              break;
            case 'severity,3':
              displayData[filterDataItem.nodeId].push({
                name: '警告',
                value: filterDataItem.value,
                color: 'warning',
                index: 1
              });
              break;
          }
        });
      });

      let list = domains.map(function (domain, index) {
        let rs = {
          province: domain.label,
          id: domain.id,
          description: domain.description || '0',
          data: displayData[domain.id],
          index: domain.values.number || 0
        };
        return rs;
      });

      list = list.sort(function (a, b) {
        return a.index - b.index;
      });

      $scope.list = list.map(listItem => {
        let sortedListItemData = listItem.data.sort((a, b) => {
          return a.index - b.index;
        });
        return {
          title: listItem.province,
          titleKpiValue: [{
            name: '重要台数',
            value: listItem.description
          }],
          leftKpiValue: sortedListItemData.map(dataItem => {
            return {
              name: dataItem.name,
              value: dataItem.value,
              status: {
                show: dataItem.name !== '监测台数',
                color: dataItem.color
              }
            }
          }),
          rightOption: sortedListItemData.filter(item => {
            return item.name !== '监测台数';
          }).map(dataItem => {
            return {
              value: dataItem.value,
              color: dataItem.color
            }
          })
        };
      });

    });

    api.post('kpiDataFlexService.getKpiValueList', diagnosisParam).then(ret => {
      console.log(ret);
      let data = ret.data;
      let displayData = {};

      domains.forEach(domain => {
        data.filter(dataItem => {
          return dataItem.nodeId == domain.id;
        }).forEach(filterDataItem => {
          displayData[filterDataItem.nodeId] = displayData[filterDataItem.nodeId] || {};
          switch (filterDataItem.instance) {
            case '1,all,values':
              displayData[filterDataItem.nodeId]['comprehensive'] = filterDataItem.value;
              break;
            case '2,all,values':
              displayData[filterDataItem.nodeId]['intelligent'] = filterDataItem.value;
              break;
          }
        });
      });

      let list = domains.map(function (domain, index) {
        let rs = {
          label: domain.label,
          id: domain.id,
          data: displayData[domain.id],
          index: domain.values.number || 0
        };
        return rs;
      });

      list = list.sort(function (a, b) {
        return a.index - b.index;
      });

      $scope.countProgressConfig = {
        title: ['区域', '综合诊断准确率', '智能诊断准确率'],
        data: list.map(item => {
          return [item.label, item.comprehensive || 0, item.intelligent || 0];
        })
      };

    });
  });
}
</script>
<style lang="less" scoped>
.area-state-index-wrapper {
  display: flex;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;

  .map-wrapper {
    width: 58.333333%;
  }

  .aside-wrapper {
    width: 41.666667%;
    display: flex;
    flex-direction: column;

    .aside-item {
      height: 33.333333%;
      flex: 1 0;
      padding: 10px;
      margin: 10px;
      border: 1px solid #25729d;
      overflow-y: auto;
      overflow-x: hidden;

      .status-overview {
        display: flex;
        flex-wrap: wrap;

        .status-overview-item {
          width: 16.666666666%;
          padding: 0 5px;
        }
      }
    }


  }
}
</style>
