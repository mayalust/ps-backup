<config injector="api, $rootScope, growl, commonMethodService, $timeout, $q"></config>
<template>
  <div class="wrap">
    <div class="title">
      <p class="title-item">设备名称:</p>
      <p class="title-item">{{ params.resource.label }}</p>
      <p class="title-item">设备编号:</p>
      <p class="title-item">{{ params.resource.externalDevId }}</p>
    </div>
    <div class="form-rule">
      <div class="margin-bottom-10 label-value full-width">
        <div class="label">
          <span class="text-red">*</span>
          <span>规则名称</span>
        </div>
        <div class="value">
          <ps-input1 ng-model="rule.ruleName"></ps-input1>
        </div>
      </div>
      <div class="margin-bottom-10 label-value fully-width">
        <p style="margin: 0;font-size: 16px;font-weight: bold;">状态规则</p>
      </div>
      <div class="margin-bottom-10 label-value fully-width">
        <ps-grid1 ng-model="gridModel" config="gridModelConfig"></ps-grid1>
      </div>
      <div class="margin-bottom-10 label-value half-width">
        <div class="label">
          <span class="text-red">*</span>
          <span>作用设备名称</span>
        </div>
        <div class="value">
          <ps-input1 ng-model="rule.selectedDevName"></ps-input1>
        </div>
      </div>
      <div class="margin-bottom-10 label-value half-width">
        <div class="label">
          <span>作用设备编码</span>
        </div>
        <div class="value">
          <ps-input1 ng-model="rule.selectedDevCode"></ps-input1>
        </div>
      </div>
      <div class="margin-bottom-10 label-value half-width">
        <div class="label">
          <span class="text-red">*</span>
          <span>故障类型</span>
        </div>
        <div class="value">
          <ps-input1 ng-model="rule.faultType"></ps-input1>
        </div>
      </div>
      <div class="margin-bottom-10 label-value half-width">
        <div class="label">
          <span></span>
        </div>
        <div class="value"></div>
      </div>

      <div class="margin-bottom-10 label-value half-width">
        <div class="label">
          <span>维护标准名称</span>
        </div>
        <div class="value">
          <ps-input1 ng-model="rule.stateStandardName"></ps-input1>
        </div>
      </div>
      <div class="margin-bottom-10 label-value half-width">
        <div class="label">
          <span>维护标准编号</span>
        </div>
        <div class="value">
          <p style="margin: 0;font-size: 14px;">{{ rule.stateStandardNo }}</p>
        </div>
      </div>

      <div class="margin-bottom-10 label-value half-width">
        <div class="label">
          <span>维护周期单位</span>
        </div>
        <div class="value">
          <ps-input1 ng-model="rule.executionCycle"></ps-input1>
        </div>
      </div>
      <div class="margin-bottom-10 label-value half-width">
        <div class="label">
          <span>维护周期间隔</span>
        </div>
        <div class="value">
          <ps-input1
              ng-show="rule.executionCycle != 'none'"
              ng-model="rule.cycleNum"
          ></ps-input1>
          <p
              style="margin: 0;font-size: 14px;"
              ng-show="rule.executionCycle == 'none'"
          >
            0
          </p>
        </div>
      </div>

      <div class="margin-bottom-10 label-value half-width">
        <div class="label">
          <span>检修标准名称</span>
        </div>
        <div class="value">
          <ps-input1 ng-model="rule.maintainStandardName"></ps-input1>
        </div>
      </div>
      <div class="margin-bottom-10 label-value half-width">
        <div class="label">
          <span>检修标准编号</span>
        </div>
        <div class="value">
          <p style="margin: 0;font-size: 14px;">{{ rule.maintainStandardNo }}</p>
        </div>
      </div>

      <div class="margin-bottom-10 label-value half-width">
        <div class="label">
          <span>检修完成期限(天)</span>
        </div>
        <div class="value">
          <ps-input1 ng-model="rule.maintainLimitDay"></ps-input1>
        </div>
      </div>
      <div class="margin-bottom-10 label-value half-width">
        <div class="label">
          <span></span>
        </div>
        <div class="value"></div>
      </div>
      <div class="margin-bottom-10 label-value half-width">
        <div class="label">
          <span>是否启用</span>
        </div>
        <div class="value">
          <input type="checkbox" ng-model="rule.checkboxState" value="1"/>
        </div>
      </div>
    </div>
    <div class="form-rule-footer">
      <button
          class="btn btn-default"
          ng-click="close()"
      >
        关闭
      </button>
    </div>
  </div>
</template>
<script type="text/javascript">
export default function (api, rootScope, growl, cms, timeout, $q) {
  return {
    link: function (scope, element, attr) {
      const target = cms();
      let ruleLists = [];
      let severityLists = target.getRootScope("myDicts")["alertSeverity"];
      let requireLists = [
        {
          id: 1,
          label: "必须"
        },
        {
          id: 0,
          label: "非必须"
        }
      ];
      const init = () => {
        let columns = [
          {
            key: "ruleId",
            label: "告警规则",
            type: "text",
            add: {
              type: "select",
              options: ruleLists,
              config: {
                format: {
                  label: "title"
                }
              }
            },
            edit: {
              type: "select",
              options: ruleLists,
              config: {
                format: {
                  label: "title"
                }
              }
            },
            bind (row, value) {
              return ruleLists.find(rule => {
                return rule.id == value;
              }).title;
            }
          },
          {
            key: "severity",
            label: "状态等级",
            type: "text",
            bind (row, value) {
              if (value) {
                if (isNaN(Number(value))) {
                  return value;
                }
                return severityLists.find(severity => {
                  return severity.valueCode == value;
                }).label;
              }
              return severityLists.find(severity => {
                return severity.valueCode == row.kpiThreshold.severity;
              }).label;
            },
            edit: {
              type: "text",
              watch: {
                key: "ruleId",
                handler (d) {
                  if (d) {
                    let findRule = ruleLists.find(rule => {
                      return rule.id == d;
                    });
                    let findSeverity = severityLists.find(severity => {
                      return severity.valueCode == findRule.severity;
                    });
                    return findSeverity.label;
                  }
                }
              }
            },
            add: {
              type: "text",
              watch: {
                key: "ruleId",
                handler (d) {
                  if (d) {
                    let findRule = ruleLists.find(rule => {
                      return rule.id == d;
                    });
                    let findSeverity = severityLists.find(severity => {
                      return severity.valueCode == findRule.severity;
                    });
                    return findSeverity.label;
                  }
                }
              }
            }
          },
          {
            key: "desc",
            label: "规则描述",
            type: "text",
            bind (row, value) {
              if (value) {
                return value;
              }
              return row.kpiThreshold.desc;
            },
            add: {
              type: "text",
              watch: {
                key: "ruleId",
                handler (d) {
                  if (d) {
                    let findRule = ruleLists.find(rule => {
                      return rule.id == d;
                    });
                    return findRule.desc;
                  }
                }
              }
            },
            edit: {
              type: "text",
              watch: {
                key: "ruleId",
                handler (d) {
                  if (d) {
                    let findRule = ruleLists.find(rule => {
                      return rule.id == d;
                    });
                    return findRule.desc;
                  }
                }
              }
            }
          },
          {
            key: "needState",
            label: "是否必须",
            type: "text",
            add: {
              type: "select",
              options: requireLists
            },
            edit: {
              type: "select",
              options: requireLists
            },
            bind (row, value) {
              return requireLists.find(r => {
                return r.id == value;
              }).label;
            }
          }
        ];
        scope.gridModel = scope.gridModel || [];
        scope.gridModelConfig = {
          columns: columns
        };

        scope.$apply();
      };

      api.post("resourceUIService.getKpiThresholdListByConditionWithPage", [{
        modelId: scope.params.resource.modelId,
        nodeIds: scope.params.resource.id + "",
        enabled: true
      }, {
        start: 0,
        length: 10000
      }]).then(ret => {
        ruleLists = ret.data.data;
        scope.rule = scope.params.rule;
        scope.gridModel = scope.rule.itemList || [];
        scope.rule.checkboxState = scope.rule.state == 1 ? true : false;
        // scope.state = rule.state == 1 ? true : false;
        init();
      });
    }
  };
}
</script>
<style type="less" scoped="true">
.wrap {
}

.form-rule {
  display: flex;
  flex-wrap: wrap;
}

.form-rule-footer {
  display: flex;
  justify-content: center;
}

.label-value {
  display: flex;
  align-items: center;
  padding: 0 10px;

  &.half-width {
    width: 50%;
  }

  &.fully-width {
    width: 100%;
  }

  .label {
    flex-basis: 120px;
    display: flex;
    justify-content: flex-end;
  }

  .value {
    flex: 1;
  }
}

.title {
  display: flex;
  justify-content: center;

  .title-item {
    padding: 5px;
    min-width: 10px;
    margin: 0;
  }
}
</style>
