<config injector="$rootScope,$q,$state,psTreeData,ajax,resourceUIService,kpiDataService,psWebsocket,SwSocket,unitService,commonMethodService2"></config>
<script>
/** mainCtrlRm" **/
export default function(
  rootScope,
  q,
  $state,
  psTreeData,
  ajax,
  resourceUIService,
  kpiDataService,
  psWebsocket,
  SwSocket,
  unitService,
  cms2
) {
  return function(data) {
    var elemData = data,
      uuid,
      timer,
      timerCallback,
      ws = psWebsocket("ps_topo"),
      /** keep consequence with old version **/
      persentage = 0,
      /** keep consequence with old version **/
      events = {},
      kpisMap = {},
      units = {},
      resourceMap = {},
      scope = elemData.scope,
      timeout = elemData.timeout,
      topo = $("<div></div>"),
      wrap = $("<div></div>"),
      svgId,
      isArray = isType("Array"),
      previewMode = elemData.previewMode,
      element = elemData.element,
      self = elemData.element,
      viewId = self.viewId,
      global = elemData.global,
      style = element.style || {},
      linkAnHandler = function(cell) {
        var dr = cell.get("attrs")[".connection"]["stroke-dasharray"],
          linkAn = cell.get("linkAn"),
          cellDom = jQuery("[model-id=" + cell.id + "]").find(".connection")[0],
          oldClass = cellDom.getAttribute("class");
        oldClass = oldClass.replace(" runslow", "");
        oldClass = oldClass.replace(" runnormal", "");
        oldClass = oldClass.replace(" runfast", "");
        if (dr && dr != "0") {
          if (linkAn == "慢速") {
            oldClass = oldClass + " runslow";
          } else if (linkAn == "普通") {
            oldClass = oldClass + " runnormal";
          } else if (linkAn == "快速") {
            oldClass = oldClass + " runfast";
          }
        }
        cellDom.setAttribute("class", oldClass);
      };
    function isType(type) {
      return function(target) {
        return {}.toString.call(target) === "[object " + type + "]";
      };
    }
    function collapse(a, b) {
      var item,
        queue = isArray(b) ? b.slice() : [b];
      while ((item = queue.shift())) {
        if (isArray(item)) {
          [].push.apply(queue, item);
        } else {
          a.push(item);
        }
      }
      return a;
    }
    function extend() {
      var args = [].slice.call(arguments),
        first = args.shift();
      args.forEach(function(d) {
        for (var i in d) {
          first[i] = d[i];
        }
      });
      return first;
    }
    function random(length) {
      length = length || 16;
      var chars =
          "abcdedfghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
        rs = "",
        rnd,
        len = chars.length;
      for (var i = 0; i < length; i++) {
        rnd = parseInt(Math.random() * len);
        rs += chars[rnd];
      }
      return rs;
    }
    function directive(cell) {
      var context = {};
      var position = cell.position,
        div;
      var directiveIds = cell.directiveIds.map(function(e) {
        return (typeof e == "number" && e) || parseInt(e.split("number:")[1]);
      });
      var modelId = cell.modelId && cell.modelId.split("number:")[1];
      var nodeId = cell.modelId && cell.nodeId.split("number:")[1];
      if (modelId) {
        var getDirectivesByModelId = function() {
          return new Promise(function(resolve) {
            resourceUIService.getDirectivesByModelId(modelId, function(d) {
              resolve(d.data);
            });
          });
        };
        var getKpisByModelId = function() {
          return new Promise(function(resolve) {
            resourceUIService.getKpisByModelId(modelId, function(d) {
              resolve(d.data);
            });
          });
        };
        Promise.all([getDirectivesByModelId(), getKpisByModelId()]).then(
          function(ret) {
            var directives = ret[0];
            var kpis = ret[1];
            directives = directives.filter(function(d) {
              return directiveIds.indexOf(d.id) != -1;
            });
            directives.forEach(function(directive) {
              kpis.forEach(function(kpi) {
                if (kpi.id == directive.kpiDefinitionIds[0]) {
                  directive.kpiLabel = kpi.name;
                }
              });
              var wrap = $("<div></div>");
              var label = $("<label></label>");
              var input = $("<input />");
              var btn = $("<button></button>");
              var timesInput = $("<input />");
              var timesLabel = $("<label></label>");
              label.css("margin", "5px");
              input.css("margin", "5px");
              timesInput.css("margin", "5px");
              timesInput.css("width", "30px");
              timesInput.val(1);
              btn.text("发送");
              timesLabel.text("次");
              label.text(directive.name);
              wrap.append(label);
              wrap.append(input);
              wrap.append(btn);
              wrap.append(timesInput);
              wrap.append(timesLabel);
              div.append(wrap);
              btn.on("click", function(e) {
                var times = timesInput.val();
                times = Number(times);
                var params = {};
                params[directive.kpiLabel] = input.val();
                close();
                for (var j = 0; j < times; j++) {
                  element.sendDirective(
                    parseInt(nodeId),
                    directive.id,
                    params,
                    function(e) {}
                  );
                }
              });
            });
          }
        );
      }
      var p = persentage || 1;
      div = $("<div></div>");
      div.css("position", "absolute");
      div.css("top", cell.position.y / p + "px");
      div.css(
        "left",
        (cell.position.x < 300
          ? 100 + cell.position.x
          : cell.position.x - 280) /
          p +
          "px"
      );
      div.css("border", "1px solid #ddd");
      div.css("z-index", 199);
      div.css("padding", "10px");
      div.css("background-color", "#eee");
      setTimeout(function() {
        div.on("click", function(e) {
          e.stopPropagation();
        });
        $("body").on("click.directive", close);
      });
      topo.append(div);

      function close(e) {
        div.children().remove();
        div.remove();
        $("body").off("click.directive");
      }
      return context;
    }
    function tip(cell) {
      var context = {};
      var position = cell.position,
        div;
      var kpiId = cell.kpiId && cell.kpiId.split("number:")[1];
      var nodeId = cell.nodeId && cell.nodeId.split("number:")[1];
      var modelId = cell.modelId && cell.modelId.split("number:")[1];
      if (kpiId && nodeId) {
        kpiDataService.getRealTimeKpiData([nodeId * 1], [kpiId * 1], function(
          ret
        ) {
          if (ret.code == 0 && ret.data.length) {
            var wrap = $("<div></div>");
            var label = $("<label></label>");
            label.css("margin", "5px");
            label.css("color", "#fff");
            label.css("font-size", "18px");
            var unitLabel =
              scope.$root.rootModelsDic[modelId][kpiId].unitLabel || "";
            label.text(ret.data[0].value + unitLabel);
            wrap.append(label);
            div.append(wrap);
            var p = persentage || 1;
            div = $("<div></div>");
            div.css("position", "absolute");
            div.css("left", cell.position.x / p + "px");
            div.css("top", (cell.size.height + cell.position.y) / p + "px");
            div.css("border", "1px solid #fff");
            div.css("z-index", 199);
            div.css("padding", "5px");
            div.css("border-radius", "5px");
            div.css("background-color", "rgba(0,0,0,0.5");
            setTimeout(function() {
              div.on("click", function(e) {
                e.stopPropagation();
              });
              $("body").on("click.tip", close);
            });
            topo.append(div);
          }
        });
      }

      function close(e) {
        div.children().remove();
        div.remove();
        $("body").off("click.tip");
      }
      return context;
    }
    function promise(fn) {
      var defer = q.defer();
      fn(defer.resolve, defer.reject);
      return defer.promise;
    }
    function success(d) {
      var defer = q.defer();
      defer.resolve(d);
      return defer.promise;
    }
    function getExpression() {
      return promise(function(res, rej) {
        var exp = element.$attr("advance/expression");
        if (typeof exp == "object") {
          res(exp);
          return;
        }
        $$.runExpression(exp, function(funRes) {
          if (funRes.code == "0") {
            var fnResult = funRes.data;
            res(fnResult);
          } else {
            rej(funRes.message);
          }
        });
      });
    }
    function renderJSON(json) {
      return promise(function(res, rej) {
        self.hooks.call("viewloaded", json.cells, function(d) {
          res(json);
        });
      });
    }
    function parse(str) {
      var a;
      try {
        a = JSON.parse(str);
      } catch (e) {
        return;
      }
      return a;
    }
    function getViewById(viewId) {
      return promise(function(res, rej) {
        self.getViewById(viewId, function(view) {
          if (view == null) {
            return res();
          }
          res(parse(view.content));
        });
      });
    }
    function getRapppid() {
      return promise(function(res, rej) {
        $$.loadExternalJs(["rappid-joint", "lodash", "backbone"], function(
          joint
        ) {
          res(joint);
        });
      });
    }
    function noEmpty(d) {
      return d;
    }
    function getKpiValueList(ci, kpi, instancs, mock) {
      var params = [
        "kpi",
        {
          category: "ci",
          isRealTimeData: true,
          timePeriod: 0,
          nodeIds: ci,
          kpiCodes: kpi,
          startTime: null,
          endTime: null,
          timeRange: "",
          statisticType: "psiot",
          condList: [],
          includeInstance: true
          //queryInstances: instancs.join(",")
        }
      ];
      return mock === true
        ? ajax.$mock().post("kpiDataFlexService.getKpiValueList", params)
        : ajax.post("kpiDataFlexService.getKpiValueList", params);
    }
    function getNumber(str) {
      var match = /(?:.*\:)*([^\:]*)/.exec(str);
      if (typeof str == "string" || typeof str == "number") {
        return match ? match[1] - 0 : str;
      }
    }
    function getString(str) {
      var match = /(?:.*\:)*([^\:]*)/.exec(str);
      if (typeof str == "string" || typeof str == "number") {
        return match ? match[1] : str;
      }
    }
    function getFill(obj) {
      var rs = {};
      for (var i in obj) {
        rs = obj[i];
        break;
      }
      return rs.fill;
    }
    function getType(type) {
      if (type == "basic.Rect") {
        return "rect";
      } else if (type == "basic.Circle") {
        return "circle";
      }
    }
    function removeSpace(str) {
      var match = /^\s*([^\s]+)\s*$/g.exec(str);
      return match ? match[1] : "";
    }
    function equalStr(target, st) {
      return new RegExp("^\\s*" + st + "\\s*$").test(target);
    }
    function getUnit(unit) {
      if (equalStr(unit, "NA") || equalStr(unit, "wave")) {
        return "";
      }
      if (typeof unit !== "string") {
        return "";
      }
      return " " + removeSpace(unit);
    }
    function getTextFill(obj) {
      return obj["text"] && obj["text"]["fill"];
    }
    self.$on = function(eventName, callback) {
      events[eventName] = callback;
    };
    self.setResources = function(resources) {
      self.hooks.tap("viewloaded", function(cells, next) {
        cells.forEach(function(cell) {
          var modelId = cell.modelId;
          modelId =
            typeof modelId === "string"
              ? /^number\:(\d+)$/g.exec(modelId)
              : null;
          modelId = modelId ? modelId[1] : null;
          if (modelId) {
            cell.nodeId = "number:" + resources.id;
          }
        });
        next();
      });
    };
    self.hooks = self.Synchook();
    self.createDeviceDropList = function(data, pos, config) {
      var p = persentage || 1;
      var hitArea = $("<div></div>");
      var titleArea = $("<div></div>");
      var popup = $("<div></div>");
      var config = config || {};
      var clickFn = config.$attr("click");
      var titleClickFn = config.$attr("titleClick");
      $("#devicelistscroll").remove();
      hitArea.attr("id", "devicelistscroll");
      titleArea.css("width", "100%");
      titleArea.css("height", "50px");
      hitArea.css("position", "absolute");
      hitArea.css("z-index", 199);
      popup.css("padding", "2px");
      popup.css("background-color", "#1e415d");
      popup.css("border", "1px solid #000");
      popup.css("box-shadow", "1px 1px 10px 1px rgba(0,0,0,.5)");
      popup.css("max-height", "150px");
      popup.css("overflow-x", "hidden");
      popup.css("overflow-y", "auto");
      hitArea.css("cursor", "pointer");
      hitArea.css("top", pos.y / p - (config.y || 30) + "px");
      hitArea.css("left", pos.x / p - (config.x || 50) + "px");
      hitArea.css("background-color", "rgba(0,0,0,0)");
      hitArea.on("mouseleave", function(event) {
        $("#devicelistscroll").remove();
      });
      titleArea.on("click", function(event) {
        titleClickFn();
      });
      var createDom = function(item) {
        var wrap = $("<div></div>"),
          label = $("<span></span>"),
          status = $("<div></div>");
        wrap.attr("id", "wrap");
        status.css("margin-right", "5px");
        status.css("width", "10px");
        status.css("height", "10px");
        status.css("border-radius", "50%");
        status.css("background-color", self.getAlertColor(item.status));
        status.css("display", "inline-block");
        wrap.css("padding", "5px 15px");
        label.text(item.label);
        label.css("padding-right", "10px");
        wrap.append(status);
        wrap.append(label);
        wrap.on("mouseenter", function(event) {
          hitArea.find("#wrap").css("background-color", "rgba(0,0,0,0)");
          wrap.css("background-color", "rgba(0,0,0,.3)");
        });
        wrap.on("mouseleave", function(event) {
          wrap.css("background-color", "rgba(0,0,0,0)");
        });
        wrap.on("click", function(event) {
          clickFn(item);
        });
        /**
           item.$on("statusChanged", function (node) {
          status.css("background-color", self.getAlertColor(item.status));
        });**/
        return wrap;
      };
      for (var i in data) {
        popup.append(createDom(data[i]));
      }
      hitArea.append(titleArea);
      hitArea.append(popup);
      topo.prepend(hitArea);
    };
    //150 - 235
    self.createAttrDisp = function(t, data, pos, callback, planeMode, height) {
      var popup, body, title, wrap;
      var orderKey = [
        "速度有效值",
        "冲击平均值",
        "震动",
        "冲击",
        "速度",
        "温度",
        "电压",
        "电流"
      ];
      height = height || 50;
      function findIndex(arr, callback) {
        var i, find;
        for (i = 0; i < arr.length; i++) {
          find = callback(arr[i], i);
          if (find) {
            return i;
          }
        }
      }
      function AttrDisp() {
        popup = $("<div></div>");
        body = $("<div></div>");
        title = $("<div></div>");
        wrap = $("<table></table>");
        popup.css("position", "absolute");
        popup.css("padding", "2px");
        popup.css("background-color", "rgba(30,65,93,.9)");
        popup.css("border", "1px solid #000");
        popup.css("box-shadow", "1px 1px 10px 1px rgba(0,0,0,.5)");
        popup.css("z-index", 99);
        if (planeMode) {
          body.css("max-height", "300px");
          body.css("min-width", "380px");
        } else {
          data.sort(function(a, b) {
            var ka =
              findIndex(orderKey, function(d) {
                return (a.kpiName || a.label).indexOf(d) != -1;
              }) || a.label;
            var kb =
              findIndex(orderKey, function(d) {
                return (b.kpiName || b.label).indexOf(d) != -1;
              }) || b.label;
            return ka < kb ? -1 : 1;
          });
          body.css("max-height", height + "px");
        }
        body.css("overflow-y", "auto");
        body.css("overflow", "auto");
        title.css("text-align", "center");
        title.css("font-weight", "bold");
        title.css("padding", "3px");
        title.css("color", "#fff");
        title.css("background-color", "#295375");
        title.text(t);
        popup.css("top", pos.y + "px");
        popup.css("left", pos.x + "px");
        popup.append(title);
        var createDom = function(item) {
          var tr = $("<tr></tr>");
          var td1 = $("<td></td>");
          var td2 = $("<td></td>");
          var td3 = $("<td></td>");
          var td4 = $("<td></td>");
          var time = item.arisingTime
            ? useMomentFormat(item.arisingTime, "yyyy-MM-dd hh:mm:ss")
            : "-";
          td1.css("padding", "5px 6px 1px 6px");
          td2.css("padding", "5px 6px 1px 6px");
          td3.css("padding", "5px 6px 1px 6px");
          td4.css("padding", "5px 6px 1px 6px");
          td1.css("vertical-align", "middle");
          td2.css("vertical-align", "middle");
          td3.css("vertical-align", "middle");
          td4.css("vertical-align", "middle");
          var label = $("<span></span>");
          var button = $('<button id="button" rel="popover" ></button>');
          if (!planeMode) {
            button
              .popover({
                placement: "right",
                trigger: "manual",
                title: "上报时间",
                container: "body",
                content: function() {
                  return time;
                }
              })
              .on("mouseenter", mouseenter)
              .on("mouseleave", mouseleave);
            label.text(item.label);
            td1.append(label);
          } else {
            var span1 = $("<span>" + item.devName + "</span>");
            var span2 = $("<span>" + item.message + "</span>");
            var span3 = $(
              "<span>" +
                useMomentFormat(item.arisingTime, "yyyy-MM-dd hh:mm:ss") +
                "</span>"
            );
            span1.css("white-space", "normal");
            span2.css("white-space", "normal");
            span3.css("white-space", "normal");
            span1.css("display", "inline-block");
            span2.css("display", "inline-block");
            span3.css("display", "inline-block");
            span1.css("max-width", "100px");
            span2.css("max-width", "220px");
            td1.append(span1);
            td3.append(span2);
            td4.append(span3);
          }
          if (item.valueStr) {
            button.text(item.valueStr);
          } else if (item.value != "-") {
            button.text(self.toFix(item.value, 2));
          } else {
            button.text("-");
          }
          function mouseenter() {
            if (t) {
              $(this).popover("show");
            }
          }
          function mouseleave() {
            $(this).popover("hide");
          }
          label.css("color", "#aaa");
          label.css("padding-right", "10px");
          item.updateValue = function(value, unit) {
            var val =
              typeof value !== "undefined" && value !== null ? value : "-";
            val = typeof val == "number" ? self.toFix(val, 2) : val;
            if (unit != "NA" && unit) {
              val += unit;
            }
            button.text(val);
            this.value = value;
          };
          item.updateStatus = function(value) {
            this.status = value;
            button.css("background-color", self.getAlertColor(value));
          };
          item.updateTime = function(t) {
            if (t) {
              time = useMomentFormat(t, "yyyy-MM-dd hh:mm:ss");
            } else {
              time = "-";
            }
          };
          button.css("min-width", "50px");
          button.css("text-align", "center");
          button.css("line-height", "12px");
          button.css("border", 0);
          button.css("color", "#fff");
          button.css("border-radius", "10px");
          button.css("background-color", self.getAlertColor(item.status));
          button.on("click", function(event) {
            $(this).popover("destroy");
            var param = {
              id: item.nodeId,
              sensor: item.instance,
              dataItems: item.id || item.kpiCode
            };
            if (item.arisingTime) {
              param.enddate = new Date(item.arisingTime).getTime();
              param.startdate = param.enddate - 2 * 60 * 60 * 1000;
            }
            self.navigateTo("index", "专业分析", param);
          });
          if (item.label) {
            tr.append(td1);
          }
          if (planeMode) {
            tr.append(td3);
            tr.append(td4);
          }
          tr.append(td2);
          td2.append(button);
          return tr;
        };
        for (var i in data) {
          wrap.append(createDom(data[i]));
        }
        body.append(wrap);
        popup.append(body);
        topo.append(popup);
      }
      AttrDisp.prototype.destroy = function() {
        popup.remove();
      };
      AttrDisp.prototype.getData = function() {
        return data;
      };
      return new AttrDisp();
    };
    var itemins;

    const CamraDic = {
      A101: 1021,
      A201: 1022,
      A301: 1023,
      A401: 1024,
      A102: 1025,
      A202: 1026,
      A302: 1027,
      A402: 1028,
      A103: 1029,
      A203: 1030,
      A303: 1031,
      A403: 1032,
      A731: 1033,
      A831: 1034,
      A732: 1035,
      A832: 1036,
      A833: 1037,
      A835: 1038
    };
    function bind(target, fn) {
      return function() {
        return fn.apply(target, arguments);
      };
    }
    class Camera {
      constructor(ip, path, protocol) {
        this.ip = ip;
        this.path = path;
        this.protocol = protocol;
      }
      isValid() {
        return this.valid;
      }
      getURLs() {
        return this.ports.map(port => {
          return this.protocol + this.ip + ":" + port + this.path;
        });
      }
    }
    class CoalSiloCamera extends Camera {
      constructor(ip, path, protocol, label) {
        super(ip, path, protocol);
        this.valid = new RegExp("^煤筒仓$").test(label);
        this.ports = [1039, 1040];
      }
    }
    class RobotCamera extends Camera {
      constructor(ip, path, protocol, label) {
        super(ip, path, protocol);
        let match = new RegExp("^(A\\d+)\\D.*$").exec(label);
        this.index = match ? match[1] : null;
        this.valid = !!match;
        if (!this.valid) {
          return;
        }
        this.ports = [CamraDic[this.index]];
      }
    }
    class SetCamera {
      constructor(wrap, ip, path) {
        this.ip = ip;
        this.path = path;
        this.wrap = wrap;
        this.protocol = "http://";
        this.init();
      }
      init() {
        this.getResource().then(resource => {
          this.cam = new CoalSiloCamera(
            this.ip,
            this.path,
            this.protocol,
            resource.label
          );
          if (this.cam.isValid()) {
            this.createDom();
            return;
          }
          this.cam = new RobotCamera(
            this.ip,
            this.path,
            this.protocol,
            resource.label
          );
          if (this.cam.isValid()) {
            this.createDom();
            return;
          }
          this.cam = null;
        });
      }
      getResource() {
        return psTreeData($state.params.id).getState();
      }
      createDom() {
        let div = document.createElement("button");
        div.innerText = "视频";
        div.style.position = "absolute";
        div.style.top = "20px";
        div.style.right = "20px";
        div.style.zIndex = 999;
        div.setAttribute("class", "btn btn-primary");
        div.onclick = bind(this, this.onclick);
        this.wrap.prepend(div);
      }
      onclick() {
        cms2.modal({
          title: "视频监控",
          directive: "dialog-video-cam",
          width: "60%",
          scope: scope,
          params: {
            mode: "videoCam",
            url: this.cam.getURLs()
          }
        });
      }
    }

    self.addCam = function() {
      let ip = "10.3.150.39",
        path = "/test",
        camera = new SetCamera(topo, ip, path);
    };
    self.createCurrentStatus = function(txt, pos, status, abs) {
      var wrap = topo.find("div#cStatus");
      var title = $("<div></div>");
      var addOn = $("<div></div>");
      var circle = $("<div></div>");
      var ins;
      wrap = wrap.size() ? wrap : $('<div id="cStatus"></div>');
      wrap.children().remove();
      function wholeClick() {
        $("body").off("click");
        ins.destroy();
        if (itemins) {
          itemins.destroy();
        }
      }

      function clickFn(event) {
        var p = persentage || 1;
        var data = self.getValue("device/alerts");
        if (ins) {
          ins.destroy();
        }
        $("body").off("click");
        if (data) {
          if (data.length > 0) {
            ins = self.createAttrDisp(
              "告警信息",
              data,
              {
                x: pos.x / p - 200,
                y: pos.y / p + 15
              },
              function(item) {
                var nodeId = item.nodeId;
                var resource;
                var ROLE = self.getValue("global/ROLE");
                self.getDomainAreaLineTree_alertStatus(function(domaintree) {
                  domaintree.traverse(function(node) {
                    if (node.id == nodeId) {
                      getResourceById(node.id).then(function(resource) {
                        return ajax
                          .post(getAttrsByModelId, resource.modelId)
                          .then(function(attrs) {
                            extend(node, resource);
                            var sub,
                              accessConfigs =
                                node.physicalConfig.accessConfigs || {},
                              sensor =
                                accessConfigs.find(function(n) {
                                  return n.instance === item.instance;
                                }) || null;
                            self.setParameter("id", node.id);
                            self.setValue("global/alertTime", item.arisingTime);
                            self.setValue("global/resource", node);
                            self.setValue("global/sensor", sensor);
                            self.setValue("global/instance", item.instance);
                            self.setParameter("sensorId", sensor.dataItemId);
                            if (item.specialty == "Z") {
                              sub = 0;
                            } else if (item.specialty == "D") {
                              sub = 1;
                            } else {
                              sub = 7;
                            }
                            self.navigateToTab("analysis", sub, 1);
                          });
                      });
                    }
                  });
                });
              },
              true
            );
            setTimeout(function() {
              $("body").on("click", wholeClick);
            });
          } else {
            self.growl("暂无未处理的告警信息！");
          }
        }
      }
      function currentStatus() {
        wrap.css("position", "absolute");
        var p = abs ? 1 : persentage || 1;
        wrap.css("cursor", "pointer");
        wrap.css("top", pos.y + "px");
        wrap.css("left", pos.x + "px");
        title.text(txt);
        title.css("padding-right", "6px");
        title.css("font-weight", "bold");
        title.css("line-height", "14px");
        title.css("display", "inline-block");
        title.css("color", "#fff");
        addOn.css("display", "inline-block");
        circle.css("display", "block");
        circle.css("position", "absolute");
        circle.css("top", "1px");
        circle.css("width", "14px");
        circle.css("height", "14px");
        circle.css("border-radius", "50%");
        circle.css("background-color", self.getAlertColor(status));
        circle.css("box-shadow", "1px 1px 10px 1px rgba(0,0,0,1)");
        if (status > 0) {
          title.css("text-decoration", "underline");
          wrap.off("click");
          wrap.on("click", clickFn);
        }
        addOn.append(circle);
        wrap.append(title);
        wrap.append(addOn);
        topo.append(wrap);
        wrap.css("marginLeft", -(14 + wrap.width()) / 2);
      }
      currentStatus.prototype.setAlarmStatus = function(status) {
        circle.css("background-color", self.getAlertColor(status));
        if (status > 0) {
          title.css("text-decoration", "underline");
          wrap.off("click");
          wrap.on("click", clickFn);
        }
      };
      return new currentStatus();
    };

    self.createCurrentStatusByItem = function(id, pos) {
      function wholeClick() {
        $("body").off("click");
        if (itemins) itemins.destroy();
      }

      function clickFn(event) {
        var p = persentage || 1;
        var data = self.getValue("device/alerts");
        if (itemins) {
          itemins.destroy();
        }
        data = data.filter(function(elm) {
          return elm.nodeId == id;
        });
        $("body").off("click");
        if (data.length > 0) {
          itemins = self.createAttrDisp(
            "告警信息",
            data,
            {
              x: pos.x / p,
              y: pos.y / p
            },
            function(item) {
              var nodeId = item.nodeId;
              var resource;
              var ROLE = self.getValue("global/ROLE");
              self.getDomainAreaLineTree_alertStatus(function(domaintree) {
                domaintree.traverse(function(node) {
                  var sub;
                  if (node.id == nodeId) {
                    self.setValue("global/resource", node);
                    self.setValue("global/instance", item.instance);
                    self.setValue("global/sensor", item);
                    self.setValue("global/alertTime", item.arisingTime);
                    self.setParameter("sensorId", item.id);
                    if (node.specialty == "Z") {
                      sub = 0;
                    } else if (node.specialty == "D") {
                      sub = 1;
                    } else {
                      sub = 7;
                    }
                    if (ROLE == 1) {
                      self.navigateTo(
                        "index",
                        {
                          main: 2,
                          sub: sub,
                          backHistory: 1
                        },
                        "self"
                      );
                    } else if (ROLE == 2) {
                      self.navigateTo(
                        "index",
                        {
                          main: 2,
                          sub: sub,
                          backHistory: 1
                        },
                        "self"
                      );
                    } else if (ROLE == 3) {
                      self.navigateTo(
                        "index",
                        {
                          main: 2,
                          sub: sub,
                          backHistory: 1
                        },
                        "self"
                      );
                    } else {
                      self.growl("此角色无法显示特征曲线");
                    }
                  }
                });
              });
            },
            true
          );
          setTimeout(function() {
            $("body").on("click", wholeClick);
          });
        } else {
          self.growl("此设备暂无未处理的告警信息！");
        }
      }
      clickFn();
    };
    self.createMarker = function(title, callback) {
      $$.loadExternalJs(["toolkit/configure/marker"], function(threeDbar) {
        var ins = threeDbar.init(svgId, {
          title: title
        });
        callback(ins);
      });
    };
    self.createAlarm = function(title, callback) {
      $$.loadExternalJs(["toolkit/configure/alarm"], function(threeDbar) {
        var ins = threeDbar.init(svgId, {
          title: title
        });
        callback(ins);
      });
    };
    self.createAlarmSmall = function(title, callback) {
      $$.loadExternalJs(["toolkit/configure/alarm"], function(threeDbar) {
        var ins = threeDbar.init(svgId, {
          title: title,
          smallMode: true
        });
        callback(ins);
      });
    };
    self.create3Dbar = function(title, callback) {
      $$.loadExternalJs(["toolkit/configure/3dbarchart"], function(threeDbar) {
        var ins = threeDbar.init(svgId, {
          title: title
        });
        //ins.setPos(cell.position());
        //ins.setValue(0);
        callback(ins);
      });
    };

    //获得缩放的点位
    self.getPersentageSite = function(position) {
      var p = persentage || 1;
      var tempPosition = { x: 0, y: 0 };
      tempPosition.x = position.x / p;
      tempPosition.y = position.y / p;
      return tempPosition;
    };
    getExpression().then(function(expression) {
      var clickEvent = expression.$attr("on/click"),
        initEvent = expression.$attr("on/init"),
        emptyEvent = expression.$attr("on/empty"),
        completeEvent = expression.$attr("on/complete");
      function openCellTools(cellView) {
        if (previewMode) {
          var cell = cellView.model || cellView,
            modelId = getNumber(cell.get("modelId")),
            nodeId = getNumber(cell.get("nodeId")),
            kpiId = getNumber(cell.get("kpiId")),
            subViewId = getNumber(cell.get("subViewId")),
            text = cell.attr("text");
          if (cell.get("valueConfig")) {
            var isSend = false; //是否发送过
            var dirModel = resourceUIService.rootModelsDic[modelId];
            if (cell.get("valueConfig") && dirModel) {
              cell.get("valueConfig").forEach(function(valueLvevel) {
                if (
                  valueLvevel.stateDisplay &&
                  valueLvevel.valueDirective &&
                  valueLvevel.valueDirectiveAttr
                ) {
                  isSend = true;
                  dirModel.directives.forEach(function(dirObj) {
                    if (valueLvevel.valueDirective == dirObj.id) {
                      dirObj.value = valueLvevel.valueDirectiveAttr;
                      self.sendItemDir(dirObj, nodeId);
                    }
                  });
                }
              });
              if (
                !isSend &&
                cell.get("valueConfig")[0].valueDirective &&
                cell.get("valueConfig")[0].valueDirectiveAttr
              ) {
                dirModel.directives.forEach(function(dirObj) {
                  if (cell.get("valueConfig")[0].valueDirective == dirObj.id) {
                    dirObj.value = cell.get(
                      "valueConfig"
                    )[0].valueDirectiveAttr;
                    self.sendItemDir(dirObj, nodeId);
                  }
                });
              }
            }
            return;
          }
          if (typeof clickEvent == "function") {
            clickEvent({
              cellView: cell,
              ui: {
                modelId: modelId,
                resourceId: nodeId,
                kpiId: kpiId,
                subViewId: subViewId
              },
              target: self,
              self: self,
              global: global,
              tools: elemData
            });
          }
        }
      }
      function getCellsMap(cells) {
        var rs = {};
        cells.forEach(function(cell) {
          var nodeId = getNumber(getAttributes(cell, "nodeId")) || 0,
            kpiId = getNumber(getAttributes(cell, "kpiId")) || 0;
          rs[nodeId + "_" + kpiId] = rs[nodeId + "_" + kpiId] || [];
          rs[nodeId + "_" + kpiId].push(cell);
          rs[nodeId + "_" + 999999] = rs[nodeId + "_" + 999999] || [];
          rs[nodeId + "_" + 999999].push(cell);
          rs[nodeId + "_" + 999998] = rs[nodeId + "_" + 999998] || [];
          rs[nodeId + "_" + 999998].push(cell);
        });
        return rs;
      }
      function getAttributes(obj, attr) {
        return obj ? obj.attributes[attr] : null;
      }
      function getKpi(cell) {
        return scope.$root.allDataItemsLoaded.then(function() {
          var cellModelId = getNumber(getAttributes(cell, "modelId")),
            cellKpiId = getNumber(getAttributes(cell, "kpiId"));
          return success(
            resourceUIService.rootModelsDic[cellModelId].kpiDic[cellKpiId]
          );
        });
      }
      function makeFunction(str) {
        return function(value) {
          if (typeof str !== "string") {
            return;
          }
          try {
            var fn = new Function("color", "(" + str + ")( color )"),
              rs = fn(value);
          } catch (e) {
            console.error(e);
            return;
          }
          return rs;
        };
      }

      function sortBySeries(kpisMap) {
        kpisMap = kpisMap || {};
        return function(a, b) {
          var item1 = kpisMap[a.dataItemId] || {},
            item2 = kpisMap[b.dataItemId] || {},
            s1 = item1.serial || 0,
            s2 = item2.serial || 0;
          return s1 - s2;
        };
      }

      function getMeasurePointData(queue) {
        var item,
          rs = [];
        queue = isArray(queue) ? queue : [queue];
        function allObj(obj) {
          var arr = [],
            i;
          for (i in obj) {
            if (typeof obj[i] !== "object") {
              return false;
            }
            arr.push(obj[i]);
          }
          return arr;
        }
        while ((item = queue.shift())) {
          if (isArray(item)) {
            [].push.apply(queue, item);
          } else {
            var arr = allObj(item);
            if (arr) {
              [].push.apply(queue, arr);
            } else {
              rs.push(item);
            }
          }
        }
        return rs;
      }

      function mapKpi(kpi) {
        return {
          id: kpi.dataItemId,
          instance: kpi.instance,
          label: kpi.kpiName,
          value: "-",
          status: 0,
          arisingTime: kpi.arisingTime
        };
      }
      function mapDataItem(nodeId) {
        return function(kpi) {
          return {
            nodeId: nodeId,
            id: kpi.dataItemId,
            instance: kpi.instance,
            value: "-",
            status: 0,
            arisingTime: kpi.arisingTime
          };
        };
      }
      function getAllUnits() {
        return resourceUIService.unitLoader();
      }
      function getResourceById(id) {
        resourceMap[id] =
          resourceMap[id] ||
          (function(defer) {
            self.getResourceById(id, function(res) {
              defer.resolve(res);
            });
            return defer.promise;
          })(q.defer());
        return resourceMap[id];
      }
      function getResourceByIds(ids) {
        var proms,
          rs = [];
        function recursive(ids) {
          var id = ids.shift();
          if (id) {
            return getResourceById(id).then(function(n) {
              rs.push(n);
              return recursive(ids);
            });
          } else {
            return success(rs);
          }
        }
        return recursive(ids.slice());
      }
      function getKpisByModelIds(ids) {
        return resourceUIService.modelLoader().then(function(rootModelsDic) {
          ids.forEach(function(d) {
            kpisMap[d] = rootModelsDic[d] && rootModelsDic[d]["kpiDic"];
          });
          return success(kpisMap);
        });
      }
      function getKpisByModelId(id) {
        return resourceUIService.modelLoader().then(function(rootModelsDic) {
          kpisMap[id] = rootModelsDic[id] && rootModelsDic[id]["kpiDic"];
          return success(kpisMap);
        });
      }

      self.render = function(inputJson) {
        if (!inputJson && !viewId) {
          return emptyEvent();
        }
        (inputJson
          ? renderJSON(inputJson)
          : getViewById(viewId).then(function(json) {
              return renderJSON(json);
            })
        ).then(function(json) {
          return getRapppid().then(function(joint) {
            var graph = new joint.dia.Graph(),
              config = makeConfig(json),
              paper = new joint.dia.Paper(config),
              paperScroller = new joint.ui.PaperScroller({
                el: wrap,
                paper: paper,
                autoResizePaper: false,
                padding: 0
              }),
              PatternLinkView = {
                //渲染的模板
                patternMarkup: [
                  '<pattern id="pattern-<%= id %>" patternUnits="userSpaceOnUse">',
                  '<image xlink:href=""/>',
                  "</pattern>"
                ].join(""),
                initialize: function() {
                  joint.dia.LinkView.prototype.initialize.apply(
                    this,
                    arguments
                  );
                  _.bindAll(this, "fillWithPattern");
                },
                render: function() {
                  // 调用父节点的render方法
                  joint.dia.LinkView.prototype.render.apply(this, arguments);
                  // 建立监听
                  this.listenTo(
                    this.model,
                    "change:pattern change:patternColor",
                    this.update
                  );
                  return this;
                },
                remove: function() {
                  // 确保我们停止了正在进行的模式更新。
                  joint.util.cancelFrame(this.frameId);
                  joint.dia.LinkView.prototype.remove.apply(this, arguments);
                  this.clearPattern();
                },
                clearPattern: function() {
                  if (this.pattern) {
                    // 从DOM中删除模式。
                    this.pattern.remove();
                    this.pattern = null;
                  }
                },
                update: function() {
                  joint.dia.LinkView.prototype.update.apply(this, arguments);

                  if (this.model && !this.model.get("pattern")) {
                    return this;
                  }

                  this.clearPattern();
                  // 确保pattern不存在
                  if (!this.pattern) {
                    // 创建模式和图像元素。
                    this.pattern = joint.V(
                      _.template(this.patternMarkup)({
                        id: this.id
                      })
                    );
                    // 缓存图像元素以便更快地访问。
                    this.patternImage = this.pattern.findOne("image");

                    // 将模式附加到pager的defs中。
                    joint
                      .V(this.paper.svg)
                      .defs()
                      .append(this.pattern);

                    // 通知 '.connection' 路径使用pattern渲染
                    var connection = joint
                      .V(this.el)
                      .findOne(".connection")
                      .attr({
                        stroke: "url(#pattern-" + this.id + ")"
                      });

                    // 缓存原来的stroke-width
                    this.strokeWidth = connection.attr("stroke-width") || 1;
                  }

                  // 确保我们停止了正在进行的模式更新。
                  joint.util.cancelFrame(this.frameId);

                  this.frameId = joint.util.nextFrame(this.fillWithPattern);

                  return this;
                },
                fillWithPattern: function() {
                  var strokeWidth = this.strokeWidth;
                  var bbox = joint.g
                    .rect(joint.V(this.el).bbox(true))
                    .moveAndExpand({
                      x: -strokeWidth,
                      y: -strokeWidth,
                      width: 2 * strokeWidth,
                      height: 2 * strokeWidth
                    });
                  var points = [].concat(
                    this.sourcePoint,
                    this.route,
                    this.targetPoint
                  );
                  points = _.map(points, function(point) {
                    return joint.g.point(point.x - bbox.x, point.y - bbox.y);
                  });
                  var canvas = document.createElement("canvas");
                  canvas.width = bbox.width;
                  canvas.height = bbox.height;
                  var ctx = canvas.getContext("2d");
                  ctx.lineWidth = strokeWidth;
                  ctx.lineJoin = "round"; //lineJoin 属性设置或返回所创建边角的类型，当两条线交汇时。bevel/round/miter。
                  ctx.lineCap = "round"; //lineCap 属性设置或返回线条末端线帽的样式。butt/round/square
                  for (
                    var i = 0, pointsCount = points.length - 1;
                    i < pointsCount;
                    i++
                  ) {
                    ctx.save();
                    var gradientPoints = this.gradientPoints(
                      points[i],
                      points[i + 1],
                      strokeWidth
                    );
                    var gradient = ctx.createLinearGradient.apply(
                      ctx,
                      gradientPoints
                    );

                    this.drawPattern.call(
                      this,
                      ctx,
                      points[i],
                      points[i + 1],
                      strokeWidth,
                      gradient
                    );

                    ctx.restore();
                  }

                  // generate data URI from the canvas
                  var dataUri = canvas.toDataURL("image/png");

                  // update the pattern image and the dimensions
                  this.pattern.attr(bbox);
                  this.patternImage.attr({
                    width: bbox.width,
                    height: bbox.height,
                    "xlink:href": dataUri
                  });
                },
                // finds a gradient with perpendicular direction to a link segment
                gradientPoints: function(from, to, width) {
                  var angle = joint.g.toRad(from.theta(to) - 90);
                  var center = joint.g.line(from, to).midpoint();
                  var start = joint.g.point.fromPolar(width / 2, angle, center);
                  var end = joint.g.point.fromPolar(
                    width / 2,
                    Math.PI + angle,
                    center
                  );
                  return [start.x, start.y, end.x, end.y];
                },
                // A drawing function executed for all links segments.
                drawPattern: function(ctx, from, to, width, gradient) {
                  var innerWidth = width - 4;
                  var outerWidth = width;
                  var buttFrom = joint.g.point(from).move(to, -outerWidth / 2);
                  var buttTo = joint.g.point(to).move(from, -outerWidth / 2);
                  var lineColor = "blue";
                  if (
                    this.model.get("attrs") &&
                    this.model.get("attrs")[".connection"]
                  ) {
                    lineColor = this.model.get("attrs")[".connection"]["stroke"]
                      ? this.model.get("attrs")[".connection"]["stroke"]
                      : lineColor;
                  }
                  var patternColor = "#ffffff";
                  if (this.model.get("patternColor")) {
                    patternColor = this.model.get("patternColor");
                  }
                  gradient.addColorStop(0.0, lineColor);
                  gradient.addColorStop(0.5, patternColor);
                  gradient.addColorStop(1.0, lineColor);

                  ctx.beginPath();
                  ctx.lineWidth = innerWidth;
                  ctx.strokeStyle = gradient;
                  ctx.moveTo(from.x, from.y);

                  ctx.lineTo(to.x, to.y);
                  ctx.stroke();
                  ctx.closePath();
                }
              };
            function setLevel(cell, value) {
              var range = cell.attributes.range;
              if (range) {
                range = eval(range);
              }
              var persent = (value - range[0]) / (range[1] - range[0]);
              cell.prop("attrs/text/text", "");
              cell.transition(
                "attrs/rect",
                {
                  transform: "translate(0,0)",
                  height: 60 * persent
                },
                {
                  delay: 0,
                  duration: 1000,
                  valueFunction: function(start, end) {
                    return function(time) {
                      var height =
                        start["height"] +
                        (end["height"] - start["height"]) * time;
                      var all = 0;
                      return {
                        transform: "translate(0," + (60 - height) + ")",
                        height: height
                      };
                    };
                  }
                }
              );
            }
            function setOpenAngle(cell, value, element) {
              var range = cell.attributes.range;
              var id = cell.id;
              openAngles[id].setValue(value);
            }
            function pathAnimate(cell, value, type, kpiRange) {
              if (!kpiRange) kpiRange = [0, 1];
              var p = (value - kpiRange[0]) / (kpiRange[1] - kpiRange[0]);
              if (p < 0) p = -p;
              if (p > 1) p = 1;
              if (!cell.linkDomBox) {
                var pathlink = linksDic["source:" + cell.id]; //渲染的link
                if (!pathlink) pathlink = linksDic["target:" + cell.id];
                if (!pathlink) return;
                cell.linkDom = jQuery("[model-id=" + pathlink.id + "]")[0]; //定义的link
                cell.linkDomBox = cell.linkDom.getBoundingClientRect();
              }
              var movetox = -1;
              var movetoy = -1;
              if (type == "number:1") {
                //X轴正方向
                if (cell.offsetx == undefined) {
                  cell.offsetx = cell.get("position").x;
                }
                movetox = cell.offsetx + (cell.linkDomBox.width * p) / scale;
              } else if (type == "number:2") {
                //x轴负方向
                if (cell.offsetx == undefined) {
                  cell.offsetx = cell.get("position").x;
                }
                movetox = cell.offsetx - (cell.linkDomBox.width * p) / scale;
              } else if (type == "number:3") {
                //y轴正方向
                if (cell.offsety == undefined) {
                  cell.offsety = cell.get("position").y;
                }
                movetoy = cell.offsety + (cell.linkDomBox.height * p) / scale;
              } else if (type == "number:4") {
                //y轴负方向
                if (cell.offsety == undefined) {
                  cell.offsety = cell.get("position").y;
                }
                movetoy = cell.offsety - (cell.linkDomBox.height * p) / scale;
              } else if (type == "number:5") {
                var connection = cell.linkDom.firstChild;
                var cellDom = jQuery("[model-id=" + cell.id + "]")[0];
                var attrs = {
                  "xlink:href": "#" + cellDom.firstChild.attributes["id"].value,
                  path: connection.attributes["d"].value,
                  dur: "5s",
                  begin: "1s",
                  rotate: "auto"
                };
                var animateMotion = joint.V("animateMotion", attrs);
                cellDom.firstChild.append(animateMotion.node);
              }
              if (movetox > -1) {
                cell.transition("position/x", movetox, {
                  delay: 100,
                  duration: 1000,
                  timingFunction: joint.util.timing.inout,
                  valueFunction: function(a, b) {
                    return function(t) {
                      return a + (b - a) * t;
                    };
                  }
                });
              }
              if (movetoy > -1) {
                cell.transition("position/y", movetoy, {
                  delay: 100,
                  duration: 1000,
                  timingFunction: joint.util.timing.inout,
                  valueFunction: function(a, b) {
                    return function(t) {
                      return a + (b - a) * t;
                    };
                  }
                });
              }
            }
            function fill(cell, color) {
              var type = getType(getAttributes(cell, "type"));
              cell.transition("attrs/" + type + "/fill", color, {
                delay: 300,
                duration: 500,
                valueFunction: joint.util.interpolate.hexColor
              });
            }
            function fillColor(cell, type, color, state, color2) {
              var stateId = cell.get("stateId");
              if (stateId) {
                if (state < 1) state = 0;
                cell.state = state;
                var colorAry = [
                  color,
                  "#25bce7",
                  "#e1cd0a",
                  "#ed9700",
                  "#e7675d"
                ];
                var colorAry2 = [
                  color2,
                  "#25bce7",
                  "#e1cd0a",
                  "#ed9700",
                  "#e7675d"
                ];
                if (stateId == "number:1" || stateId == "number:3") {
                  if (type && colorAry[state]) {
                    cell.transition(
                      "attrs/" + type + "/fill",
                      colorAry[state],
                      {
                        delay: 300,
                        duration: 500,
                        valueFunction: joint.util.interpolate.hexColor
                      }
                    );
                  }
                }
                if (
                  (stateId == "number:2" || stateId == "number:3") &&
                  colorAry2[state]
                ) {
                  cell.transition("attrs/text/fill", colorAry2[state], {
                    delay: 300,
                    duration: 500,
                    valueFunction: joint.util.interpolate.hexColor
                  });
                }
              }
            }
            function breathFlash(cell, type, color, state, opacityState) {
              var stateId = cell.get("stateId");
              var flash = function(el) {
                var defaultOpacity = opacityState ? 1 : el.opacity;
                el.transition("attrs/" + type + "/opacity", defaultOpacity, {
                  delay: 0,
                  duration: 3000,
                  timingFunction: joint.util.timing.inout,
                  valueFunction: function(a, b) {
                    return function(t) {
                      var o =
                        a +
                        b *
                          (defaultOpacity -
                            Math.abs(defaultOpacity - 2 * defaultOpacity * t));
                      return Number(o.toFixed(2));
                    };
                  }
                });
              };

              if (stateId) {
                if (state < 0) state = 0;
                var colorAry = [
                  color,
                  "#25bce7",
                  "#e1cd0a",
                  "#ed9700",
                  "#e7675d"
                ];
                if (stateId == "number:2") {
                  type = "text";
                }
                if (type) {
                  if (!cell.opacity) {
                    cell.opacity = jQuery.isNumeric(
                      cell.prop("attrs/" + type + "/opacity")
                    )
                      ? cell.prop("attrs/" + type + "/opacity")
                      : 1;
                  }
                  cell.state = state;
                  cell.prop("attrs/" + type + "/opacity", 0.1);
                  cell.prop("attrs/" + type + "/fill", colorAry[state]);
                  if (cell.state > 0) {
                    if (
                      _.contains(
                        cell.getTransitions(),
                        "attrs/" + type + "/opacity"
                      )
                    )
                      return;
                    cell.on("transition:end", function(el, path) {
                      if (el.state > 0) {
                        flash(el);
                      } else {
                        el.off("transition:end");
                        el.prop("attrs/" + type + "/opacity", el.opacity);
                      }
                    });
                    flash(cell);
                  } else {
                    cell.prop("attrs/" + type + "/opacity", cell.opacity);
                  }
                }
              }
            }
            function bubbleFlash(cell, type, color, state, opacityState) {
              var stateId = cell.get("stateId");
              var flash = function() {
                cell.prop("attrs/" + type + "/r", 0);
                cell.prop(
                  "attrs/" + type + "/opacity",
                  opacityState ? 1 : cell.opacity
                );
                cell.transition(
                  "attrs/" + type,
                  {
                    r: cell.r,
                    opacity: 0
                  },
                  {
                    delay: 0,
                    duration: 1500,
                    valueFunction: function(start, end) {
                      return function(time) {
                        return {
                          r: start["r"] + (end["r"] - start["r"]) * time,
                          opacity: start["opacity"] - start["opacity"] * time
                        };
                      };
                    }
                  }
                );
              };
              if (stateId) {
                if (state < 0) state = 0;
                var colorAry = [
                  color,
                  "#25bce7",
                  "#e1cd0a",
                  "#ed9700",
                  "#e7675d"
                ];
                if (stateId == "number:2") {
                  type = "text";
                }
                if (type) {
                  if (!cell.opacity) {
                    cell.opacity = jQuery.isNumeric(
                      cell.prop("attrs/" + type + "/opacity")
                    )
                      ? cell.prop("attrs/" + type + "/opacity")
                      : 1;
                    cell.r = cell.prop("attrs/" + type + "/r");
                    cell.prop(
                      "attrs/" + type + "/opacity",
                      opacityState ? 1 : cell.opacity
                    );
                  }
                  cell.state = state;
                  cell.prop("attrs/" + type + "/fill", colorAry[state]);
                  if (cell.state > 0) {
                    if (_.contains(cell.getTransitions(), "attrs/" + type))
                      return;
                    cell.on("transition:end", function(el) {
                      if (el.state > 0) {
                        flash();
                      } else {
                        cell.prop("attrs/" + type + "/opacity", cell.opacity);
                        cell.prop("attrs/" + type + "/r", cell.r);
                      }
                    });
                    flash();
                  } else {
                    cell.prop("attrs/" + type + "/opacity", cell.opacity);
                    cell.prop("attrs/" + type + "/r", cell.r);
                  }
                }
              }
            }
            function changeIconAndText(cell, state, type) {
              if (!type) type = "alertConfig";
              if (type == "alertConfig") {
                var alertIcon = cell.get("alertConfig");
                if (alertIcon) {
                  if (state < 1) state = 0;
                  var alertConfig = cell.get(type);
                  alertConfig.forEach(function(item) {
                    if (item.id == state) {
                      cell.prop("attrs/text/text", item.alertText || "");
                      if (item.alertIcon)
                        cell.prop("attrs/image/xlink:href", item.alertIcon);
                    }
                  });
                }
              } else if (type == "valueConfig") {
                var valueConfig = cell.get(type);
                valueConfig.forEach(function(item) {
                  item.stateDisplay = false;
                  if (item.valueText == state) {
                    item.stateDisplay = true;
                    if (item.valueText)
                      cell.prop("attrs/text/text", item.valueText);
                    if (item.valueIcon)
                      cell.prop("attrs/image/xlink:href", item.valueIcon);
                  }
                });
              }
            }
            function makeConfig(json) {
              var width = topo.width(),
                w = json.width,
                h = json.height,
                portion = h / w,
                height = width * portion;
              /** keep consequence with old version **/
              persentage = w / width;
              /** keep consequence with old version **/
              return {
                width: width,
                height: height,
                model: graph,
                interactive: false,
                scale: width / w,
                perpendicularLinks: true,
                gridSize: 0,
                markAvailable: true,
                linkConnectionPoint: joint.util.shapePerimeterConnectionPoint,
                defaultLink: new joint.dia.Link({
                  attrs: {
                    ".marker-source": {
                      d: "M 10 0 L 0 5 L 10 10 z",
                      transform: "scale(0.001)"
                    },
                    ".marker-target": {
                      d: "M 10 0 L 0 5 L 10 10 z"
                    },
                    ".connection": {
                      stroke: "black"
                    }
                  }
                }),
                linkView: joint.dia.LinkView.extend(PatternLinkView)
              };
            }
            function removeSame(a, b) {
              a.indexOf(b) == -1 ? a.push(b) : null;
              return a;
            }
            function makeValueEval(rangeObj) {
              var json = parse(rangeObj);
              if (isArray(json) || typeof json !== "object" || json === null) {
                return function removeSingnal(val) {
                  if (typeof val === "undefined" || val === null) {
                    return;
                  }
                  if (isArray(val)) {
                    val = val.reduce(collapse, []);
                    return val[0];
                  }
                  if (val[0] == "[" && val[val.length - 1] == "]") {
                    val = parse(val);
                    if (isArray(val)) {
                      val = val.reduce(collapse, []);
                      return val[0];
                    } else {
                      return "-";
                    }
                  }
                  return val;
                };
              }
              return function(val) {
                return json[val];
              };
            }
            paperScroller.scroll(0, 0);
            paperScroller.$el.css("padding-left", "0");
            paperScroller.$el.css("padding-top", "0");
            paperScroller.$el.css("overflow", "hidden");
            paper.on("element:pointerup", function(cellView) {
              if (cellView.model instanceof joint.dia.Element) {
                openCellTools(cellView);
              }
            });
            paper.on("cell:pointerup", function(cellView, evt) {
              if (cellView.model instanceof joint.dia.Link) {
                openCellTools(cellView);
              }
              if (cellView.model.attributes.extend == "directive") {
                directive(cellView.model.attributes);
              }
              if (cellView.model.attributes.extend == "tip") {
                tip(cellView.model.attributes);
              }
            });
            if ($$.isString(json.bgimage)) {
              paper.$el.css("background-image", 'url("' + json.bgimage + '")');
              paper.$el.css("background-size", "contain");
              paper.$el.css("background-repeat", "no-repeat");
              paper.$el.css("background-position", "center");
            }
            paper.el.oncontextmenu = function(evt) {
              evt.preventDefault();
            };
            //paper.$el.css("background-color", json.bgcolor);
            graph.fromJSON(json);
            svgId = wrap.find("svg")[0];
            topo
              .find(".viewport")
              .attr("transform", "scale(" + config.scale + ")");
            function hiddenMarkers() {
              $("g.marker-vertices").attr("display", "none");
              $("g.marker-arrowheads").attr("display", "none");
              $("g.link-tools").attr("display", "none");
            }
            hiddenMarkers();

            /** --------------- keep consequence with old version ------------------- **/
            if (events["$renderGraphComplete"]) {
              events["$renderGraphComplete"](graph.getCells());
            }
            self.trigger("$renderGraphComplete", graph.getCells());
            if (events["$loadCiKpiComplete"]) {
              events["$loadCiKpiComplete"](graph.getCells());
            }
            self.trigger("$loadCiKpiComplete", graph.getCells());
            /** --------------- keep consequence with old version ------------------- **/

            graph.getCells().forEach(function(cell) {
              var modelId = cell.get("id");
              var cursorStr = cell.get("cursor");
              var cursor = "";
              if (cursorStr) {
                var cursorAry = cursorStr.split(":");
                if (
                  cursorAry.length > 0 &&
                  cursorAry[cursorAry.length - 1] != "?"
                ) {
                  cursor = cursorAry[cursorAry.length - 1];
                }
              }
              var $_cell_el = paper.$el.find('g[model-id="' + modelId + '"]');
              if (cursor) {
                $_cell_el.get(0).style = "cursor: " + cursor + "!important";
              }
            });
            self.getDomainAreaLineTree_alertStatus(function(res) {
              res
                .getChildren(function() {
                  return true;
                })
                .then(function(children) {
                  getAllUnits().then(function(u) {
                    units = u;
                    var explainer = {
                      " ": {
                        getNodeId: function(cell) {
                          return getNumber(cell.attributes.nodeId);
                        },
                        getKpiId: function(cell) {
                          return getNumber(cell.attr("kpiId"));
                        },
                        getInstance: function(cell) {
                          return undefined;
                        },
                        filter: function(cell) {
                          return function(value) {
                            var nodeId = getNumber(cell.attr("nodeId")),
                              kpiId = getNumber(cell.attr("kpiId"));
                            return (
                              nodeId == value.nodeId && kpiId == value.kpiCode
                            );
                          };
                        },
                        handler: function(cell, valuelist) {}
                      },
                      value: {
                        before: function(cell) {
                          let ins = cell.attributes.attrs.text.text;
                          cell.prop("_instance", ins);
                        },
                        getNodeId: function(cell) {
                          return getNumber(cell.attributes.nodeId);
                        },
                        getKpiId: function(cell) {
                          return getNumber(cell.attributes.kpiId);
                        },
                        getInstance: function(cell) {
                          return cell.attributes.attrs.text.text;
                        },
                        filter: function(cell) {
                          return function(value) {
                            var nodeId = getNumber(cell.attributes.nodeId),
                              kpiId = getNumber(cell.attributes.kpiId),
                              instance = cell.prop("_instance");
                            return (
                              nodeId == value.nodeId &&
                              kpiId == value.kpiCode &&
                              instance == value.instance
                            );
                          };
                        },
                        handler: function(cell, valuelist) {
                          let val = valuelist[0];
                          changeIconAndText(
                            cell,
                            val ? val.value : 0,
                            "valueConfig"
                          );
                        }
                      },
                      alarm: {
                        before: function(cell) {
                          cell.prop("attrs/text/text", " ");
                        },
                        getNodeId: function(cell) {
                          return getNumber(cell.attributes.nodeId);
                        },
                        getKpiId: function(cell) {
                          return undefined;
                        },
                        getInstance: function(cell) {
                          return undefined;
                        },
                        filter: function(cell) {
                          return function(value) {
                            var nodeId = getNumber(cell.attr("nodeId")),
                              kpiId = getNumber(cell.attr("kpiId"));
                            return (
                              nodeId == value.nodeId && kpiId == value.kpiCode
                            );
                          };
                        },
                        handler: function(cell, valuelist) {
                          var nodeId = getNumber(cell.attributes.nodeId),
                            node = children.find(function(child) {
                              return child.id == nodeId;
                            }),
                            val =
                              valuelist.find(function(value) {
                                return (
                                  value.nodeId == nodeId &&
                                  value.kpiCode == 999999
                                );
                              }) || {},
                            state = val.value || 0;
                          changeIconAndText(cell, state);
                        }
                      },
                      instance: {
                        before: function(cell) {
                          cell.prop("attrs/text/text", " ");
                        },
                        getNodeId: function(cell) {
                          return getNumber(cell.attributes.nodeId);
                        },
                        getKpiId: function(cell) {
                          return getNumber(cell.attributes.kpiId);
                        },
                        getInstance: function(cell) {
                          return undefined;
                        },
                        filter: function(cell) {
                          return function(value) {
                            var nodeId = getNumber(cell.attributes["nodeId"]),
                              kpiId = getNumber(cell.attributes["kpiId"]);
                            return (
                              nodeId == value.nodeId && kpiId == value.kpiCode
                            );
                          };
                        },
                        handler: function(cell, valuelist) {
                          var nodeId = getNumber(cell.attributes.nodeId),
                            dataItemId = getNumber(cell.attributes.kpiId),
                            node = children.find(function(child) {
                              return child.id == nodeId;
                            }),
                            val =
                              valuelist.find(function(value) {
                                return (
                                  value.nodeId == nodeId &&
                                  value.kpiCode == dataItemId
                                );
                              }) || {};
                          //cell.prop( "attrs/text/text", "-" );
                          getResourceById(nodeId).then(function(resource) {
                            var allaccessConfigs = resource.$attr(
                              "physicalConfig/accessConfigs"
                            );
                            getKpisByModelId(resource.modelId).then(function(
                              kpiMap
                            ) {
                              var currentModelKpiMap = kpiMap[resource.modelId],
                                kpiData =
                                  kpisMap[resource.modelId][dataItemId] || {},
                                range = makeValueEval(kpiData.range),
                                unit = getUnit(units[kpiData.unit]);
                              cell.prop("attrs/text/fill", "white");
                              cell.prop("attrs/text/visibility", "visible");
                              cell.prop(
                                "attrs/text/text",
                                formatVal(range(val.value)) + unit
                              );
                            });
                          });
                        }
                      },
                      alert: {
                        getNodeId: function(cell) {
                          return getNumber(cell.attr("nodeId"));
                        },
                        getKpiId: function(cell) {
                          return;
                        },
                        getInstance: function(cell) {
                          return;
                        },
                        filter: function(cell) {
                          return function(value) {
                            var nodeId = getNumber(cell.attr("nodeId"));
                            return nodeId == value.nodeId && kpiId == 999999;
                          };
                        },
                        handler: function(cell, valuelist) {
                          var nodeId = getNumber(cell.attributes.nodeId),
                            node = children.find(function(child) {
                              return child.id == nodeId;
                            });
                          function run(ins) {
                            ins.setPos(cell.attributes.position);
                            ins.setAlarmStatus(node.state);
                            ins.on("textClick", function(event) {});
                            ins.on("click", function(event) {
                              self.refresh({
                                id: node.id
                              });
                            });
                          }
                          if (cell.$ins == null) {
                            self.createAlarm(node.label, function(ins) {
                              cell.$ins = ins;
                              run(cell.$ins);
                            });
                          } else {
                            run(cell.$ins);
                          }
                        }
                      },
                      baowualarm: {
                        getNodeId: function(cell) {
                          return getNumber(cell.attributes["nodeId"]);
                        },
                        getKpiId: function(cell) {
                          return;
                        },
                        getInstance: function(cell) {
                          return;
                        },
                        filter: function(cell) {
                          return function(value) {
                            var nodeId = getNumber(cell.attributes.nodeId);
                            return (
                              nodeId == value.nodeId && value.kpiCode == 999999
                            );
                          };
                        },
                        handler: function(cell, valuelist) {
                          var nodeId = getNumber(cell.attributes.nodeId),
                            value = valuelist.find(function(v) {
                              return v.nodeId == nodeId;
                            });
                          if (typeof value === "undefined") {
                            return;
                          }
                          breathFlash(
                            cell,
                            "rect",
                            "#ff0000",
                            value.value,
                            false
                          );
                        }
                      },
                      dataItem: {
                        getNodeId: function(cell) {
                          var currentdevice =
                              cell.attributes.currentdevice || 0,
                            nodeId = getNumber(cell.attributes.nodeId);
                          return currentdevice ? res.id : nodeId;
                        },
                        getKpiId: function(cell) {
                          return cell.attributes.dataItem;
                        },
                        getInstance: function(cell) {
                          return getString(cell.attributes.sensor);
                        },
                        filter: function(cell) {
                          var dataItem = cell.attributes.dataItem,
                            sensor = cell.attributes.sensor;
                          return function(value) {
                            var kpiCode = value.kpiCode,
                              instance = value.instance;
                            if (kpiCode == 999997) {
                              instance = instance.split("_");
                              kpiCode = instance[0];
                              instance = instance[1];
                            }
                            return (
                              sensor == instance &&
                              dataItem.indexOf(kpiCode - 0) != -1
                            );
                          };
                        },
                        handler: function(cell, valuelist) {
                          var currentdevice =
                              cell.attributes.currentdevice || 0,
                            dataItem = cell.attributes.dataItem,
                            nodeId = currentdevice
                              ? res.id
                              : getNumber(cell.attributes.nodeId),
                            sensor = getString(cell.attributes.sensor);
                          getResourceById(nodeId).then(function(resource) {
                            var allaccessConfigs = resource.$attr(
                              "physicalConfig/accessConfigs"
                            );
                            getKpisByModelId(resource.modelId).then(function(
                              kpiMap
                            ) {
                              var currentModelKpiMap = kpiMap[resource.modelId];
                              return success(
                                getMeasurePointData(
                                  parse(resource.values.MeasurePointLocate)
                                )
                              ).then(function(sensors) {
                                var sen = sensors.find(function(s) {
                                    return s.name === sensor;
                                  }),
                                  kpis = allaccessConfigs
                                    .filter(function(d) {
                                      return (
                                        d.instance == sensor &&
                                        currentModelKpiMap[d.dataItemId] &&
                                        !currentModelKpiMap[d.dataItemId][
                                          "needTransform"
                                        ]
                                      );
                                    })
                                    .map(kpi => {
                                      let obj = valuelist.find(val => {
                                        return val.kpiCode == kpi.dataItemId;
                                      });
                                      obj
                                        ? (kpi.arisingTime = obj.arisingTime)
                                        : null;
                                      return kpi;
                                    }),
                                  kpiFilter = kpis.filter(function(kpi) {
                                    return (
                                      dataItem.indexOf(kpi.dataItemId) != -1
                                    );
                                  }),
                                  dt;
                                kpis.sort(function(a, b) {
                                  return (
                                    currentModelKpiMap[a.dataItemId].serial -
                                    currentModelKpiMap[b.dataItemId].serial
                                  );
                                });
                                if (!sen) {
                                  return;
                                }
                                if (kpiFilter.length > 0) {
                                  (cell.$attrDisp =
                                    cell.$attrDisp ||
                                    self.createAttrDisp(
                                      kpiFilter[0].kpiName,
                                      kpiFilter.map(mapDataItem(nodeId)),
                                      self.getPersentageSite(
                                        cell.attributes.position
                                      )
                                    )),
                                    function() {};
                                  dt = remapAttrDist(cell.$attrDisp.getData());
                                  valuelist.forEach(function(v) {
                                    var dataItemId = v.kpiCode,
                                      instance = v.instance;
                                    if (dataItemId === 999997) {
                                      instance = instance.split("_");
                                      dataItemId = instance[0];
                                      instance = instance[1];
                                    }
                                    var rs = dt[instance + "/" + dataItemId],
                                      kpiData =
                                        kpisMap[resource.modelId][dataItemId],
                                      range = makeValueEval(kpiData.range),
                                      unit = getUnit(units[kpiData.unit]);
                                    if (v.kpiCode == 999997) {
                                      rs.updateStatus(v.value);
                                    } else {
                                      rs
                                        ? rs.updateValue(
                                            formatVal(range(v.value)) + unit
                                          )
                                        : null;
                                      rs ? rs.updateTime(v.arisingTime) : null;
                                    }
                                  });
                                }
                              });
                            });
                          });
                        }
                      },
                      kpis: {
                        getNodeId: function(cell) {
                          var currentdevice =
                              cell.attributes.currentdevice || 0,
                            nodeId = getNumber(cell.attributes.nodeId);
                          return currentdevice ? res.id : nodeId;
                        },
                        getKpiId: function(cell) {
                          return cell.attributes.dataItem;
                        },
                        getInstance: function(cell) {
                          return getString(cell.attributes.sensor);
                        },
                        filter: function(cell) {
                          var dataItem = cell.attributes.dataItem,
                            sensor = getString(cell.attributes.sensor);
                          return function(value) {
                            var kpiCode = value.kpiCode,
                              instance = value.instance;
                            if (kpiCode == 999997) {
                              instance = instance.split("_");
                              kpiCode = instance[0];
                              instance = instance[1];
                            }
                            return (
                              sensor == instance &&
                              dataItem.indexOf(kpiCode - 0) != -1
                            );
                          };
                        },
                        handler: function(cell, valuelist) {
                          var currentdevice =
                              cell.attributes.currentdevice || 0,
                            dataItem = cell.attributes.dataItem,
                            dataItems,
                            valuelistMap = valuelist.reduce(function(a, b) {
                              a[b.kpiCode] = b;
                              return a;
                            }, {}),
                            nodeId = currentdevice
                              ? res.id
                              : getNumber(cell.attributes.nodeId),
                            sensor = getString(cell.attributes.sensor);
                          if (valuelist && valuelist.length > 0) {
                          }
                          getResourceById(nodeId).then(function(resource) {
                            var allaccessConfigs = resource.$attr(
                              "physicalConfig/accessConfigs"
                            );
                            getKpisByModelId(resource.modelId).then(function(
                              kpiMap
                            ) {
                              var currentModelKpiMap = kpiMap[resource.modelId];
                              return success(
                                getMeasurePointData(
                                  parse(resource.values.MeasurePointLocate)
                                )
                              ).then(function(sensors) {
                                var sen = sensors.find(function(s) {
                                    return s.name === sensor;
                                  }),
                                  kpis = allaccessConfigs.filter(function(d) {
                                    return (
                                      d.instance == sensor &&
                                      currentModelKpiMap[d.dataItemId] &&
                                      !currentModelKpiMap[d.dataItemId][
                                        "needTransform"
                                      ]
                                    );
                                  }),
                                  dt;
                                kpis.sort(function(a, b) {
                                  return (
                                    currentModelKpiMap[a.dataItemId].serial -
                                    currentModelKpiMap[b.dataItemId].serial
                                  );
                                });
                                if (!sen) {
                                  return;
                                }
                                dataItems = kpis
                                  .filter(function(kpi) {
                                    valuelistMap[kpi.dataItemId]
                                      ? (kpi.arisingTime =
                                          valuelistMap[
                                            kpi.dataItemId
                                          ].arisingTime)
                                      : null;
                                    return (
                                      dataItem.indexOf(kpi.dataItemId) != -1
                                    );
                                  })
                                  .map(mapKpi);
                                //
                                cell.$attrDisp =
                                  cell.$attrDisp ||
                                  self.createAttrDisp(
                                    sen.label,
                                    dataItems.map(d => {
                                      d.nodeId = nodeId;
                                      return d;
                                    }),
                                    self.getPersentageSite(
                                      cell.attributes.position
                                    ),
                                    undefined,
                                    undefined,
                                    cell.get("absheight")
                                  );
                                dt = remapAttrDist(cell.$attrDisp.getData());
                                valuelist.forEach(function(v) {
                                  if (nodeId != v.nodeId) {
                                    return;
                                  }
                                  var dataItemId = v.kpiCode,
                                    instance = v.instance;
                                  if (dataItemId == 999997) {
                                    instance = instance.split("_");
                                    dataItemId = instance[0];
                                    instance = instance[1];
                                  }
                                  var rs = dt[instance + "/" + dataItemId],
                                    kpiData =
                                      kpisMap[resource.modelId][dataItemId] ||
                                      {},
                                    range = makeValueEval(kpiData.range),
                                    unit = getUnit(units[kpiData.unit]);
                                  if (typeof range(v.value) === "undefined") {
                                  }
                                  if (
                                    typeof (formatVal(range(v.value)) + unit) ==
                                    "undefined"
                                  ) {
                                  }
                                  if (v.kpiCode == 999997) {
                                    rs.updateStatus(v.value);
                                  } else {
                                    rs
                                      ? rs.updateValue(
                                          formatVal(range(v.value)) + unit
                                        )
                                      : null;
                                    rs ? rs.updateTime(v.arisingTime) : null;
                                  }
                                });
                              });
                            });
                          });
                        }
                      }
                    };

                    function toFix(n) {
                      var num = n - 0;
                      if (num !== num) {
                        return n;
                      }
                      return num.toFixed(2);
                    }

                    function formatVal(val) {
                      if (typeof val == "undefined" || val === null) {
                        return "-";
                      }
                      if (typeof val === "object") {
                        return toFix(val[0]);
                      }
                      return toFix(val);
                    }

                    function remapAttrDist(arr) {
                      var obj = {};
                      for (var i = 0; i < arr.length; i++) {
                        obj[arr[i].instance + "/" + arr[i].id] = arr[i];
                        obj[arr[i].instance + "/999998"] = arr[i];
                        obj[arr[i].instance + "/999997"] = arr[i];
                      }
                      return obj;
                    }
                    function isNotUndefined(d) {
                      return typeof d !== "undefined";
                    }
                    function attribute(cell, attr, val) {
                      var attrs = attr.split("/").filter(isNotUndefined),
                        item;
                      if (typeof val === "undefined") {
                        rs = cell;
                        while ((item = attrs.shift()) && rs) {
                          rs = rs[item];
                        }
                        return rs;
                      }
                      var last = attrs.pop(),
                        rs = cell;
                      while ((item = attrs.shift()) && rs) {
                        rs = rs[item];
                      }
                      if (typeof rs === "object") {
                        rs[last] = val;
                      }
                    }
                    function getNodeId(cell) {
                      var ext = cell.attributes.extend || " ",
                        fn = attribute(explainer, [ext, "getNodeId"].join("/"));
                      return typeof fn === "function" ? fn(cell) : null;
                    }

                    function getKpiId(cell) {
                      var ext = cell.attributes.extend || " ",
                        fn = attribute(explainer, [ext, "getKpiId"].join("/"));
                      return typeof fn === "function" ? fn(cell) : null;
                    }
                    function getInstance(cell) {
                      var ext = cell.attributes.extend || " ",
                        fn = attribute(
                          explainer,
                          [ext, "getInstance"].join("/")
                        );
                      return typeof fn === "function" ? fn(cell) : null;
                    }
                    function eachProp(obj, callback) {
                      for (var i in obj) {
                        callback(obj[i], i, obj);
                      }
                    }
                    return success(graph).then(function(graph) {
                      completeEvent &&
                        completeEvent({
                          target: self,
                          self: self,
                          global: global,
                          tools: elemData
                        });
                      var cells = graph.getCells(),
                        nodeIds = cells
                          .map(function(cell) {
                            return getNodeId(cell);
                          })
                          .filter(noEmpty)
                          .reduce(removeSame, []),
                        kpiIds = cells
                          .map(function(cell) {
                            return getKpiId(cell);
                          })
                          .filter(noEmpty)
                          .concat([999997, 999998, 999999])
                          .reduce(collapse, [])
                          .reduce(removeSame, []),
                        instances = cells
                          .map(function(cell) {
                            return getInstance(cell);
                          })
                          .filter(noEmpty)
                          .reduce(removeSame, []);
                      function startSocket(callback) {
                        var paramSocket = {
                            ciid: nodeIds.toString(),
                            kpi: kpiIds.toString()
                          },
                          operation = "register";
                        uuid = Math.uuid();
                        function toArr(obj) {
                          let rs = [];
                          for (let i in obj) {
                            for (let j in obj[i]) {
                              for (let k in obj[i][j]) {
                                rs.push(obj[i][j][k]);
                              }
                            }
                          }
                          return rs;
                        }
                        function throttle(fn, time) {
                          let timer,
                            obj = {};
                          return function(event) {
                            let nodeId = event.data.nodeId,
                              kpiCode = event.data.nodeId,
                              instance = event.data.instance || "_";
                            if (timer == null) {
                              timer = setTimeout(() => {
                                fn.call(this, toArr(obj));
                                timer = null;
                                obj = {};
                              }, time);
                            } else {
                              obj[nodeId] = obj[nodeId] || {};
                              obj[nodeId][kpiCode] = obj[nodeId][kpiCode] || {};
                              obj[nodeId][kpiCode][instance] = event.data;
                            }
                          };
                        }
                        ws.send(nodeIds, kpiIds);
                        ws.on(
                          throttle(function(events) {
                            let dis = $(topo[0].parentNode).css("display");
                            if (dis != "none") {
                              callback(events);
                            }
                          }, 3000)
                        );
                      }
                      function inputValue(condition) {
                        return function(valueList) {
                          cells.forEach(function(cell) {
                            var ext = cell.attributes.extend,
                              config = explainer[ext || " "];
                            if (typeof config == "undefined") {
                              return;
                            }
                            var fitered = config.filter,
                              handler = config["handler"],
                              data = valueList.filter(fitered(cell));
                            if (condition(data)) {
                              handler(cell, data);
                            }
                          });
                        };
                      }
                      cells.forEach(function(cell) {
                        var ext = cell.attributes.extend,
                          config = explainer[ext || " "];
                        if (typeof config == "undefined") {
                          return;
                        }
                        config.before ? config.before(cell) : null;
                      });

                      function getData() {
                        timer = null;
                        timerCallback = valuelist => {
                          inputValue(function(data) {
                            return true;
                          })(valuelist);
                          timer = setTimeout(getData, 6000);
                          /* startSocket(function(valuelist) {
                              inputValue(function(data) {
                                return data.length > 0;
                              })(valuelist);
                            }); */
                        };
                        if (
                          nodeIds &&
                          nodeIds.length > 0 &&
                          kpiIds &&
                          kpiIds.length > 0
                        ) {
                          getKpiValueList(
                            nodeIds,
                            kpiIds,
                            instances,
                            false
                          ).then(function(d) {
                            /* let last = d[d.length - 1];
                            last.instance = last.kpiCode + "_" + last.instance;
                            last.kpiCode = 999997;
                            last.value = 4; */
                            timerCallback && timerCallback(d);
                          });
                        } else {
                          inputValue(function(data) {
                            return true;
                          })([]);
                        }
                      }
                      getResourceByIds(nodeIds)
                        .then(function(resources) {
                          var rs = {},
                            modelIds = resources.reduce(function(a, b) {
                              if (a.indexOf(b.modelId) == -1) {
                                a.push(b.modelId);
                              }
                              return a;
                            }, []);
                          return getKpisByModelIds(modelIds);
                        })
                        .then(function(d) {
                          extend(kpisMap, d);
                          getData();
                        });
                    });
                  });
                });
            });
          });
        });
      };
      if (typeof initEvent == "function") {
        try {
          initEvent({
            target: self,
            self: self,
            global: global,
            tools: elemData
          });
        } catch (e) {
          console.error(e);
        }
      } else {
        self.render();
      }
    });
    topo.css(style);
    topo.css("position", "relative");
    topo.append(wrap);
    self.on("$destroy", function() {
      clearTimeout(timer);
      timer = undefined;
      timerCallback = undefined;
      SwSocket.unregister(uuid);
    });
    return topo;
  };
}
</script>
