<config injector="ajax, $timeout, $q"
></config>
<template>
    <div>
        <div class="address-item">
            <select ng-model="province" ng-options="p.label as p.label for p in list" id="province">
                <option value="">请选择省级...</option>
            </select>
        </div>
        <div class="address-item">
            <select ng-model="city" ng-options="c.label as c.label for c in citys" id="city">
                <option value="">请选择市级...</option>
            </select>
        </div>
        <div class="address-item">
            <select ng-model="town" ng-options="t.label as t.label for t in towns" id="town">
                <option value="">请选择县级...</option>
            </select>
        </div>
        <div class="address-item">
            <input class="form-control" id="detailAddress" ng-model="da" placeholder="详细地址"/>
        </div>
    </div>
</template>
<script type="text/javascript">
export default function (ajax, timeout, q) {
  return {
    scope: {
      ngModel: "=?",
      config: "=?",
      options: "=?"
    },
    replace: true,
    require: '?ngModel',
    link (scope, element, attr, ngModel) {
      let province = element.find('#province'),
        city = element.find('#city'),
        town = element.find('#town'),
        detailAddress = element.find('#detailAddress'),
        watcher1,
        watcher2,
        address,
        defer = q.defer();

      ajax.post('resourceUIService.getSimpleDistricts').then(d => {
        scope.list = d;
        defer.promise.then(function (n) {
          address = n;
          splitAddress(d, address);
        });
      });

      let findAddress = (allAddressList, upper) => {
        let tempAdd;
        if (upper) {
          tempAdd = address.split(upper);
          if (tempAdd.length > 2) {
            tempAdd[1] = upper;
          }
          address = address.substring(upper.length);
        }
        return allAddressList.find(a => {
          return (tempAdd ? tempAdd[1] : address || '').startsWith(a.label);
        });
      }

      let splitAddress = function (allAddressList) {
        timeout(function () {
          let province = findAddress(allAddressList);
          scope.province = province && province.label ? province.label : void 0;

          let city = findAddress(province ? province.children : [], province ? province.label : '');
          scope.city = city && city.label ? city.label : void 0;

          let town = findAddress(city ? city.children : [], city ? city.label : '');
          scope.town = town && town.label ? town.label : void 0;

          scope.da = town && town.label ? address.split(town.label)[1] : void 0;
        });
      }

      province[0].onchange = function () {
        ngModel.$setViewValue((province.val().split(':')[1] || '') + (city.val().split(':')[1] || '') + (town.val().split(':')[1] || '') + (detailAddress.val()));
      };
      city[0].onchange = function () {
        ngModel.$setViewValue((province.val().split(':')[1] || '') + (city.val().split(':')[1] || '') + (town.val().split(':')[1] || '') + (detailAddress.val()));
      };
      town[0].onchange = function () {
        ngModel.$setViewValue((province.val().split(':')[1] || '') + (city.val().split(':')[1] || '') + (town.val().split(':')[1] || '') + (detailAddress.val()));
      };
      detailAddress[0].onchange = function () {
        ngModel.$setViewValue((province.val().split(':')[1] || '') + (city.val().split(':')[1] || '') + (town.val().split(':')[1] || '') + (detailAddress.val()));
      };
      Array.prototype.push.call(ngModel.$parsers, function (n, o) {
        if (!n) {
          return;
        }
        return n;
      });

      Array.prototype.push.call(ngModel.$formatters, function (n, o) {
        if (!n) {
          return;
        }
        defer.resolve(n);
        return n;
      });

      watcher1 = scope.$watch(`province`, n => {
        if (typeof n !== 'undefined') {
          scope.citys = scope.list.find(d => {
            return d.label === n;
          }).children;
        }
      });
      watcher2 = scope.$watch(`city`, n => {
        if (typeof n !== 'undefined') {
          scope.towns = scope.citys.find(d => {
            return d.label === n;
          }).children;
        }
      });
      scope.$on(`$destroy`, _ => {
        watcher1();
        watcher2();
      });

    }
  }
}
</script>
<style type="less" scoped="true">
.address-item {
    display: inline-block !important;
    margin-right: 4px;
    width: ~'calc(33.33% - 4px)';
    line-height: 0 !important;
    select {
        width: 100% !important;
        overflow: hidden !important;
        white-space: nowrap !important;
        text-overflow: ellipsis !important;
    }
    &:last-child {
        display: block !important;
        width: 100% !important;
        margin-right: 0;
        margin-top: -4px;
    }
}
</style>