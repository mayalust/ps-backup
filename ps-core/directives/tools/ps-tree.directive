<config injector="$timeout,psUltility"
></config>
<template>
    <div>
        <div class="ps_tree">
            <div class="_sel"></div>
        </div>
    </div>
</template>
<script type="text/javascript">
import {screenOffset, attribute, isArray } from "ps-ultility";

export default function ($timeout, psUltility) {
  return {
    restrict: 'E',
    require: '?ngModel',
    scope: {
      ngModel: '=?',
      config: '=?',
      validate : "=?",
      composory : "=?",
      options: '@'
    },
    replace: true,
    link: function (scope, element, attr, ngModel) {
      function findOption(){
        var match = /in\s+([^\s]+)\s*/.exec(scope.options);
        return match ? match[1] : null;
      }
      scope.$parent.$watch(findOption(), (n,o,s) => {
        if( isArray(n) ){
          render()
        }
      })
      let _conf, change = attr['change'], whole,
        field_id, field_pid, field_label, field_value,
        ele = element[0].children[0],
        sel = ele.children[0]
      function render(){
        _conf = psUltility.trimngOptions(scope, "options")
        let dataOptions = _conf.rawOptions,
          defaultConfig = {};
        scope.config = angular.extend({}, defaultConfig, scope.config || {});
          field_id = _conf.id;
          field_pid = scope.config.format && scope.config.format.parentID ? scope.config.format.parentID : 'parentID';
          field_label = scope.config.format && scope.config.format.label ? scope.config.format.label : 'label';
          field_value = scope.config.format && scope.config.format.value ? scope.config.format.value : field_id;
        //生成树下拉菜单
        let flag = dataOptions.some(function (item) {
          if (item.children) {
            return true;
          }
        });
        if (!flag) {
          dataOptions = list2tree(dataOptions);
        }
        sel.onclick = function (e) {
          if ($(sel).hasClass('open')) {
            destroyeIconDiv();
          } else {
            renderIconDiv();
          }
        };
        //利用捕获特性处理
        document.addEventListener('scroll', function (e) {
          document._ICON_SCROLL_EVENT = arguments.callee;
          if (e.target.className !== "ps-tree-drop-content") {
            destroyeIconDiv();
          }
        }, true);
        document.onclick = function (e) {
          destroyeIconDiv();
        }
        function list2tree (list) {
          let roots = [];
          for (let i in list) {
            var root = list.find((m) => {
              return list[i][field_pid] === m[field_id];
            });
            if (!root) {
              roots.push(list[i]);
            } else {
              root.children = root.children || [];
              root.children.push(list[i]);
            }
          }
          return roots;
        }

        function creatSelectTree (d, lv = 0) {
          var str = '',
            active = "",
            spaceWidth = 20,
            level = lv;
          for (var i = 0; i < d.length; i++) {
            active = ngModel.$viewValue == d[i]["id"] ? "active" : "";
            if (d[i].children && d[i].children.length > 0) {
              str += `<div class="level"><div class="item ${active}"
                    value="${d[i][field_value]}"
                    style="margin-left: ${-spaceWidth * (level + 1)}px;padding-left: ${spaceWidth * (level + 1)}px;">
                    ${d[i][field_label]}<i class="glyphicon glyphicon-minus" style="left: ${spaceWidth * (level)}px;"></i>
                    </div>`;
              str += creatSelectTree(d[i].children, level + 1);
              str += `</div>`;
            } else {
              str += `<div class="level"><div class="item ${active}" value="${d[i][field_value]}" style="margin-left: ${-spaceWidth * (level + 1)}px;padding-left: ${spaceWidth * (level + 1)}px;">${d[i][field_label]}</div></div>`
            }
          }
          return str;
        }


        function exec( command ){
          let regex = /([a-zA-Z\.\_\$\[\]"'][a-zA-Z\.\_\$\d\[\]"']*)/g;
          command = command.replace(regex, "scope.$parent.$1");
          eval( command );
        }

        function getElePosition (element) {
          return element.getBoundingClientRect();
        }

        //渲染下拉树
        function renderIconDiv () {
          return $timeout(function () {
            let whole = $('<div class="ps-tree-drop-content"></div>');
            $(document.body).append(whole);
            createIconDiv();
            $('.item').click(function (e) {
              if (e.target.tagName !== 'I') {
                scope.$apply(() => {
                  ngModel.$setViewValue($(this).attr('value'));
                  if(change){
                    exec( change );
                  }
                  ngModel.$render();
                });
              }
            });
            $('.item > i').click(function (e) {
              e.stopPropagation();
              if ($(this).hasClass('glyphicon-minus')) {
                $(this).removeClass('glyphicon-minus')
                  .addClass('glyphicon-plus');
                $(this).parent().parent().children('.level').hide();
              } else {
                $(this).removeClass('glyphicon-plus')
                  .addClass('glyphicon-minus');
                $(this).parent().parent().children('.level').show();
              }
            })
          })
        }

        function createIconDiv () {
          whole = $('.ps-tree-drop-content')[0];
          whole.innerHTML = creatSelectTree(dataOptions);
          whole.style.left = getElePosition(sel).left + 'px';
          whole.style.top = (getElePosition(sel).top + sel.offsetHeight + 2) + 'px';
          whole.style.width = ele.clientWidth + "px";
          $(sel).addClass('open');
        }

      }

      function findtree(node, callback){
        var item, queue = node.map(d=>{return d});
        while(item = queue.pop()){
          if(callback(item)){
            return item;
          } else {
            item.children ? [].push.apply(queue, item.children) : null;
          }
        }
      }

      function validate(n){
        scope.validate = (function(){
          if(scope.composory == true){
            if(typeof n === "undefined"){
              return false
            }
          }
          return true;
        })();
      }

      function destroyeIconDiv () {
        $('.ps-tree-drop-content').html();
        $('.ps-tree-drop-content').remove();
        $(sel).removeClass('open');
      }

      scope.$on('destroy', function () {
        $('.ps-tree-drop-content').remove();
        scope.config = null;
        ele = null;
        sel = null;
        document.onclick = null;
        document.removeEventListener('scroll', document._ICON_SCROLL_EVENT);
      });
      ngModel.$render = function(){
        if( !_conf ){
          $(sel).html( "---请选择---" );
          return;
        }
        let n = ngModel.$viewValue;
        validate(n);
        let option = findtree(_conf.rawOptions, d => {
          return d[field_value] == n;
        }), text = option && option[field_label];
        $(sel).html(text || "---请选择---");
      }
      Array.prototype.push.call(ngModel.$parsers, function (n, o) {
        let rs = (function(){
          if (!n) {
            return;
          } else {
            return n;
          }
        })();
        return rs;
      });
      Array.prototype.push.call(ngModel.$formatters, function (n, o) {
        if (!n) {
          return;
        } else {
          return n;
        }
      });
    }
  }
}
</script>
<style type="less" scoped="true">
* {
    margin: 0;
    padding: 0;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.ps_tree {
    position: relative;
    width: 100%;
    cursor: pointer;
  -moz-user-select: none; /*火狐*/
  -webkit-user-select: none; /*webkit浏览器*/
  -ms-user-select: none; /*IE10*/
  -khtml-user-select: none; /*早期浏览器*/
  user-select: none;
}

._sel {
    display: block;
    padding: 6px 5px;
    line-height: 1.42857143;
    background-color: #fff;
    background-image: none;
    border: 1px solid #e8e8e8;
}

</style>