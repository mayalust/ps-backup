<config injector="$q,$timeout"
></config>
<template>
    <div class="wrap">
        <select></select>
        <span style="color: red;font-size: 12px; margin-left: 10px;"
              ng-if="error"
              ng-bind="error"></span>
    </div>
</template>
<script type="text/javascript">
import {attribute} from "ps-ultility";

export default function (q, timeout) {
  return {
    scope: {
      ngModel: "=?",
      config: "=?",
      options: '@'  //= 赋值 @字符格式  & 回调  不写也可以
    },
    require: '?ngModel',
    link (scope, element, attr, ngModel) {
      function isTypeof (type) {
        return function (obj) {
          return toString.call(obj) === "[object " + type + "]";
        }
      }

      var toString = Object.prototype.toString,
        isArray = isTypeof("Array"),
        isObject = isTypeof("Object"),
        reg = /(?:(?:([\w\[\]\d\.\"\']+)\s+as\s+)?([\w\[\]\d\.\"\']+)\s+for\s+)?(\w+)\s+in\s+(?:([\w\[\]\d\.\"\']+))/g,
        match = reg.exec(attr["options"]), s2,
        defer = q.defer(),
        options = match[4],
        item = match[3],
        value = match[2] || item,
        key = match[1] || value,
        $dom = element.find('select'),
        dom = $dom[0],
        dataOptions = getData(scope.$parent, options),
        defaultConfig = {
          placeholder: '---请选择---',
          search: true,
          multiple: true,
          width: '100%',
          language: {
            noResults: function () {
              return "没有该匹配项";
            }
          }
        };
      scope.config = $.extend({}, defaultConfig, scope.config || {});
      $dom.css({'width': scope.config.width, 'height': scope.config.height});
      $dom.attr(scope.config.disabled ? scope.config.disabled : "")
      var fn = new Function("scope", "options", "callback",
        "for(var i in options){\n\
            var " + item + "=options[i];\n\
                        callback(" + key + ", " + value + "," + item + ",i)\n\
                    }"
      );
      scope.$parent.$watch(options, function (n, o, s) {
        if (!n) {
          return;
        }
        isArray(n) ? render(n, null) : null;
      });

      function getData (obj, attr) {
        var fn = new Function("obj", `return obj.${attr}`);
        return (fn(obj));
      }

      function getVal (obj) {
        var fn = new Function("item", `return ${key} `);
        return fn(obj);
      }

      function findIdex (arr, fn) {
        if (isArray(arr)) {
          let ret = [];
          for (var i = 0; i < arr.length; i++) {
            if (fn(arr[i], i)) {
              ret.push(i);
            }
          }
          return ret;
        }
        return -1;
      }

      function render (n) {
        dataOptions = n;

        function fmtVal (value) {
          if (typeof value === "string") {
            if (!/^\s*$/g.test(value)) {
              return value;
            } else {
              return "-";
            }
          } else {
            return "-";
          }
        }

        function changeSelect (e) {
          let inxes = $dom.val(),
            items = [];
          for (let i in inxes) {
            items.push(getVal(dataOptions[inxes[i]]));
          }
          e.$render = function (d) {
            render(d, null);
          }
          e.$select = dataOptions.filter((n, ind) => {
            if (!$dom.val()) {
              return false;
            }
            return $dom.val().indexOf(ind) > -1 || $dom.val().indexOf(ind + '') > -1;
          });
          e.$option = dataOptions;
          scope.config.on && scope.config.on.select && scope.config.on.select(e);
          return items.join();
        }

        try {
          scope.error = null;
          var str1 = '';
          fn(scope, n, function (key, value, item, i) {//注意创建删除节点时候回流 改变属性的时候不会
            str1 += `<option value="${i}">${fmtVal(value)}</option>\n`;
          });
        } catch (e) {
          scope.error = '*无效的表达式';
        } finally {
          window['require'](['select2'], () => {
            timeout(function () {
              defer.resolve("success");
              ngModel.$render();
            }, 5);
            $dom.select2(scope.config);
            $dom.off("select2:select");
            $dom.off("select2:unselect");
            $dom.on("select2:select", function (e) {
              ngModel.$setViewValue(changeSelect(e));
            });
            $dom.on("select2:unselect", function (e) {
              changeSelect(e);
              ngModel.$setViewValue(changeSelect(e));
            });
          });
          $dom.html(str1);
          $dom.css("display", "none");
        }
      }

      ngModel.$render = function () {
        var val = ngModel.$viewValue;
        defer.promise.then(() => {
          let finx = findIdex(dataOptions, (m) => {
            return val.indexOf(getItem(m, key)) > -1;
          }), ins;
          if (finx !== -1) {
            ins = $dom.val(finx);
          } else {
            ins = $dom.val(null);
          }
          if (typeof ins === "object" && typeof ins.trigger === "function") {
            ins.trigger("change");
          }
        });
      };

      function getItem (obj, str) {
        let attr = str.split("."), rs;
        attr.shift();
        rs = attr.length > 0 ? attribute(obj, attr.join(".")) : obj
        return rs;
      }

      render(dataOptions);
      Array.prototype.push.call(ngModel.$parsers, function (n, o) {
        if (!n) {
          return;
        }
        return n;
      });
      Array.prototype.push.call(ngModel.$formatters, function (n, o) {
        return n;
      });
      scope.$on('destroy', function () {
        toString = null;
        isArray = null;
        isObject = null;
        reg = null;
        match = null;
        s2 = null;
        options = null;
        item = null;
        value = null;
        key = null;
        $dom = null;
        dom = null;
        dataOptions = null;
        defaultConfig = null;
        fn = null;
      })
    }
  }
}
</script>
<style type="less" scoped="true">
.wrap {
    margin: 5px;
    padding: 10px;
    color: #333;
    background-color: #eee;
    border: 1px solid #ddd;
}
</style>