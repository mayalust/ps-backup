<config injector="$timeout,$location,psEvent,psUltility,psDialog,ajax,growl,psExplainer,$rootScope,psUi,$q"
></config>
<template>
  <div class="angular-dataTable" style="padding: 10px 25px;width: 100%;">
    <div class="angular-dataTable-header" ng-if="gridInstance.showHeader != false"
         style="margin : 0px auto 5px auto">
      <button ng-repeat="button in getTableButtons()"
              ng-disabled="button.disabledFn()"
              ng-show="button.showFn()"
              class="btn btn-sm btn-primary"
              ng-click="buttonClick(button)"
              type="button"
              style="margin-right: 5px;">
        <span ng-class="hidden-sm">{{button.label}}</span>
      </button>
    </div>
    <div class="angular-dataTable-body">
      <div class="dataTables_wrapper dt-bootstrap no-footer">
        <div class="dataTables_scroll">
          <div class="dataTables" style="position: relative; overflow: auto; width: 100%;">
            <table width="100%" class="table table-hover no-footer dataTable"
                   style="width: 100%;">
              <thead>
                <tr role="row" style="height: 0px;">
                  <th ng-if="gridInstance.showIndex">序号</th>
                  <th ng-repeat="column in gridInstance.columns track by $index">
                    <div class="dataTables_sizing" ng-bind="column.label"></div>
                  </th>
                  <th ng-if="gridInstance.hasButtons()">操作</th>
                </tr>
              </thead>
              <tbody>
                <tr ng-if="showNoData()">
                  <td ng-attr-colspan="{{$parent.getFullLength()}}" style="text-align: center;">
                    没有符合条件的记录
                  </td>
                </tr>
                <tr ng-if="gridInstance.inlineAdd">
                  <td ng-if="gridInstance.showIndex">0</td>
                  <td ng-repeat="column in gridInstance.columns">
                    <ps-tools-add-grid1 data-column="column"
                                        data-row="gridInstance.$$INLINE_ADD_ROW"></ps-tools-add-grid1>
                  </td>
                  <td data-field-label="操作">
                    <div class="btn-group btn-group-sm">
                      <button class="btn btn-default"
                              ng-click="inlineAddConfirm()">
                        确定
                      </button>
                      <button class="btn btn-default" ng-click="inlineAddCancel()">
                        取消
                      </button>
                    </div>
                  </td>
                </tr>
                <tr role="row" ng-if="gridInstance.currentPageData.length > 0"
                    ng-repeat="row in gridInstance.currentPageData track by $index" ng-init="outerIndex = $index">
                  <td ng-if="gridInstance.showIndex">{{$index + 1}}</td>
                  <td ng-repeat="column in gridInstance.columns">
                    <ps-tools-grid1 ng-if="!row.$$edit"
                                    data-column="$parent.column"
                                    data-row="$parent.$parent.row">
                    </ps-tools-grid1>
                    <ps-tools-edit-grid1 ng-if="row.$$edit"
                                         data-column="$parent.column"
                                         data-row="$parent.$parent.row">
                    </ps-tools-edit-grid1>
                  </td>
                  <td ng-if="gridInstance.hasButtons()" data-field-label="操作"
                      ng-style="btnColStyle(row)">
                    <div class="btn-group btn-group-sm"
                         ng-style="btnColStyle(row)"
                         ng-class="{true:'open', false :''}[row.open]">
                      <button ng-if="row.$$edit && row.$$showEditBodyButton"
                              ng-repeat="op in getEditBodyButtons(row) | limitTo : 3"
                              ng-class="renderClass(op.class, row)"
                              ng-click="buttonClick(op, row, outerIndex)">
                        <span ng-bind="getButtonLabel(op)"></span>
                      </button>
                      <button ng-if="row.$$edit && !row.$$showEditBodyButton"
                              ng-click="inlineEditConfirm(row)"
                              type="button"
                              class="btn btn-default">
                        <span>确定</span>
                      </button>
                      <button ng-if="row.$$edit && !row.$$showEditBodyButton"
                              ng-click="inlineEditCancel(row)"
                              type="button"
                              class="btn btn-default">
                        <span>取消</span>
                      </button>
                      <button ng-if="!row.$$edit"
                              ng-repeat="op in getBodyButtons(row) | limitTo : 3"
                              ng-disabled="op.disabled(row)"
                              ng-class="renderClass(op.class, row)"
                              ng-click="buttonClick(op, row, outerIndex)">
                        <i class="fa hidden-lg hidden-md hidden-sm"
                           ng-class="getButtonIcon(op)"></i>
                        <span class="hidden-xs" ng-bind="getButtonLabel(op)"></span>
                      </button>
                      <button ng-if="getBodyButtons(row).length > 3 && !row.$$edit"
                              type="button" class="btn btn-default dropdown-toggle"
                              ng-click="moreClick(op, row, $event)">
                        更多
                        <span class="caret"></span>
                      </button>
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
        <div class="row" ng-if="hasPages()">
          <div ng-class="{true:'col-sm-3', false : 'col-sm-2'}[gridInstance.miniSize == true]">
            <div class="dataTables_length"><label>每页显示
              <select class="form-control input-sm"
                      ng-change="sizeChange(gridInstance.pageInstance.size)"
                      ng-model="gridInstance.pageInstance.size"
                      ng-options="size as size for size in sizes"></select>
              项</label></div>
          </div>
          <div ng-class="{true:'col-sm-3', false : 'col-sm-4'}[gridInstance.miniSize == true]">
            <div class="dataTables_info" aria-live="polite" ng-bind="pageDescription()"
                 style="margin-left: 70px;"></div>
          </div>
          <div class="col-sm-6">
            <div class="dataTables_paginate paging_simple_numbers" id="DataTables_Table_0_paginate">
              <ul class="pagination">
                <li class="paginate_button previous" ng-class="isPrevBtnDisabled()"
                    ng-click="prevPage()">
                  <a>上页</a>
                </li>
                <li class="paginate_button"
                    ng-class="{true:'active',false:''}[gridInstance.pageInstance.current == 0]"
                    ng-if="true" ng-click="moveTo(0)">
                  <a>1</a>
                </li>
                <li class="paginate_button disabled" ng-if="ifBeforeMarkShow()">
                  <a>…</a>
                </li>
                <li class="paginate_button"
                    ng-click="moveTo(pg)"
                    ng-class="{true:'active',false:''}[gridInstance.pageInstance.current == pg]"
                    ng-repeat="pg in middleRange()">
                  <a ng-bind="pg + 1"></a>
                </li>
                <li class="paginate_button disabled" ng-if="ifAfterMarkShow()">
                  <a>…</a>
                </li>
                <li class="paginate_button"
                    ng-class="{true:'active',false:''}[gridInstance.pageInstance.current == gridInstance.pageInstance.total - 1]"
                    ng-if="gridInstance.pageInstance.total > 1"
                    ng-click="moveTo(gridInstance.pageInstance.total - 1)">
                  <a ng-bind="gridInstance.pageInstance.total"></a>
                </li>
                <li class="paginate_button next" ng-class="isNextBtnDisabled()"
                    ng-click="nextPage()">
                  <a>下页</a>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>
<script type="text/javascript">
import PsGrid from './ps-grid';
import { attribute, deepClone } from "ps-ultility";

export default function (timeout, $location, psEvent, psUltility, psDialog, ajax, growl, psExplainer, rootScope, psUi, $q) {
  return {
    scope: {
      config: "=",
      ngModel: "=?",
    },
    require: '?ngModel',
    link: function (scope, element, attr, ngModel) {
      const toString = Object.prototype.toString,
        isArray = isType("Array"),
        isObject = isType("Object"),
        isFunction = isType("Function"),
        _position = ["label", "type", "bind", "search", "filter", "options"],
        _btnPosition = ["label", "on.click"],
        _size = [5, 10, 15, 20, 25, 50, 100];

      function isType (type) {
        let _objectType = "[object ";
        return function (target) {
          return toString.call(target) == _objectType + type + "]";
        }
      }

      function getTextFromType (type, header) {
        if (isArray(header)) {
          var inx = _position.indexOf(type)
          return header[inx];
        } else if (isObject(header)) {
          return header[type];
        } else if (isFunction(header)) {
          return header[type];
        } else {
          return null
        }
      }

      function getAttrs (obj, attrs) {
        var arr = attrs.split(".");
        var target = obj;
        for (var i in arr) {
          target = target[arr[i]]
          if (!target) {
            break;
          }
        }
        return target;
      }

      function getButtonFromType (type, header) {
        if (isArray(header)) {
          var inx = _btnPosition.indexOf(type)
          return header[inx];
        } else if (isObject(header)) {
          return getAttrs(header, type);
        } else {
          return null
        }
      }

      function getButtonFunction (op) {
        var fn = getButtonFromType("on.click", op);
        return fn;
      }

      /****************************** 行选中相关 ******************************/
      scope.trClass = function (row) {
        var cls = [];
        if (row.$$selected) {
          cls.push("selected");
        }
        var result = cls.toString().replace(",", " ")
        return result;
      };
      scope.allClick = function () {
        scope.allcheck = scope.allcheck ? false : true;
        scope.gridInstance.currentPageData.forEach(d => {
          d.$$selected = scope.allcheck;
        });
      };
      scope.selectRow = function (row) {
        if (!scope.gridInstance.multipleSelect) {
          let flag = row.$$selected;
          scope.gridInstance.currentPageData.forEach(d => {
            d.$$selected = false;
          });
          row.$$selected = flag;
        } else {
          let length = 0;
          scope.gridInstance.currentPageData.forEach(d => {
            if (d.$$selected) {
              length++;
            }
          });
          if (length === scope.gridInstance.currentPageData.length) {
            scope.allcheck = true;
          } else {
            scope.allcheck = false;
          }
        }
      };
      /*----------------------------- 行选中相关 -----------------------------*/
      /****************************** 处理没有数据的情况 ******************************/
      scope.showNoData = function () {
        if (scope.gridInstance
          && !scope.gridInstance.inlineAdd
          && scope.gridInstance.currentPageData
          && scope.gridInstance.currentPageData.length < 1) {
          return true;
        }
        return false;
      };
      scope.getFullLength = function () {
        var showIndex = scope.gridInstance && scope.gridInstance.showIndex;
        var showSelector = scope.gridInstance && scope.gridInstance.showSelector;
        var bodyLength = scope.gridInstance && scope.gridInstance.columns.length;
        var bodyButtons = scope.gridInstance && scope.gridInstance.hasButtons();
        return bodyLength + (showSelector ? 1 : 0) + (bodyButtons ? 1 : 0) + (showIndex ? 1 : 0);
      };
      /*----------------------------- 处理没有数据的情况 -----------------------------*/
      /****************************** 按钮相关 ******************************/
      scope.open = false;
      scope.getTableButtons = function () {
        let buttons = scope.gridInstance ? scope.gridInstance.outButtons : [];
        buttons.forEach(button => {
          button.disabledFn = function () {
            if (typeof button.disabled === 'function') {
              return button.disabled.call(scope.gridInstance, button);
            }
            return false;
          };
          button.showFn = function () {
            if (typeof button.show === 'function') {
              return button.show.call(scope.gridInstance, button);
            }
            return true;
          };
        });
        return buttons;
      };
      scope.getEditBodyButtons = function (row) {
        return scope.gridInstance.bodyButtons.filter(function (n) {
          if (n.functionCode) {
            return !!rootScope.menuitems[n.functionCode];
          }
          if (n.show) {
            if (typeof n.show === "function") {
              return n.show.call(scope.gridInstance, row);
            } else {
              return n.show;
            }
          }
          return true;
        });
      };
      scope.getBodyButtons = function (row) {
        return scope.gridInstance.bodyButtons.filter(function (n) {
          if (n.functionCode) {
            return !!rootScope.menuitems[n.functionCode];
          }
          if (n.show) {
            if (typeof n.show === "function") {
              return n.show.call(scope.gridInstance, row);
            } else {
              return n.show;
            }
          }
          return true;
        });
      };
      scope.renderClass = function (target, row) {
        var type = typeof target;
        if (type == 'function') {
          return target(row);
        } else if (type == 'string') {
          return target;
        } else {
          return 'btn btn-default';
        }
      };
      scope.getButtonLabel = function (op) {
        return getButtonFromType("label", op)
      };
      scope.getButtonIcon = function (op) {
        return op.iconClass || 'fa-edit';
      };
      scope.inlineEditConfirm = function (row) {
        let editRow = {};
        let editKeys = [];
        for (let key in row) {
          if (key.includes('FREEBOARD_____VALUE_____')) {
            editKeys.push(key);
            editRow[key.split('FREEBOARD_____VALUE_____')[1]] = row[key];
          }
        }
        let defer = $q.defer();
        if (typeof scope.gridInstance.inlineEditConfirm === 'function') {
          scope.gridInstance.inlineEditConfirm.call(scope.gridInstance, editRow, row, function (value) {
            defer.resolve(value);
          });
        } else {
          editKeys.forEach(ek => {
            row[ek.split('FREEBOARD_____VALUE_____')[1]] = row[ek];
          });
          row.$$edit = false;
        }
        defer.promise.then((value) => {
          row.$$edit = false;
          if (value) {
            editKeys.forEach(ek => {
              if (value[ek.split('FREEBOARD_____VALUE_____')[1]]) {
                row[ek] = value[ek.split('FREEBOARD_____VALUE_____')[1]];
                row[ek.split('FREEBOARD_____VALUE_____')[1]] = value[ek.split('FREEBOARD_____VALUE_____')[1]];
              }
            });
          } else {
            editKeys.forEach(ek => {
              row[ek.split('FREEBOARD_____VALUE_____')[1]] = row[ek];
            });
          }
        });
      };
      scope.inlineEditCancel = function (row) {
        row.$$edit = false;
      };
      scope.inlineAddCancel = function () {
        scope.gridInstance.inlineAdd = false;
        scope.gridInstance.$$INLINE_ADD_ROW = {};
        typeof scope.gridInstance.inlineAddCancel === 'function' && scope.gridInstance.inlineAddCancel.call(scope.gridInstance);
      };
      scope.inlineAddConfirm = function () {
        let newRow = {};
        for (let key in scope.gridInstance.$$INLINE_ADD_ROW) {
          newRow[key.split('FREEBOARD_____VALUE_____')[1]] = scope.gridInstance.$$INLINE_ADD_ROW[key];
        }
        let defer = $q.defer();
        typeof scope.gridInstance.inlineAddConfirm === 'function' && scope.gridInstance.inlineAddConfirm.call(scope.gridInstance, newRow, function () {
          defer.resolve();
        });
        defer.promise.then(() => {
          ngModel.$setViewValue([...scope.gridInstance.getData()]);
          scope.gridInstance.inlineAdd = false;
          scope.gridInstance.$$INLINE_ADD_ROW = {};
        });
      };
      scope.buttonClick = function (op, row, index) {
        var fn = getButtonFunction(op);
        if (op.symbol === 'inline') {
          scope.inlineAddObj.show = true;
          return;
        }
        if (op.symbol === 'inlineAdd') {
          let flag = true;
          if (typeof fn === "function") {
            flag = fn.call(scope.gridInstance, row, index);
          }
          if (!flag) {
            return;
          }
          let flag1 = scope.gridInstance.data.some(d => {
            return d.$$edit;
          });
          let flag2 = scope.gridInstance.inlineAdd;
          if (flag1) {
            growl.warning('当前有正在编辑的数据，请先保存。');
            return;
          }
          if (flag2) {
            growl.warning('当前有正在添加的数据，请先保存。');
            return;
          }
          scope.gridInstance.inlineAdd = true;
          return;
        }
        if (op.symbol === 'inlineEdit') {
          let flag1 = scope.gridInstance.data.some(d => {
            return d.$$edit;
          });
          let flag2 = scope.gridInstance.inlineAdd;
          if (flag1) {
            growl.warning('当前有正在编辑的数据，请先保存。');
            return;
          }
          if (flag2) {
            growl.warning('当前有正在添加的数据，请先保存。');
            return;
          }
          row.$$edit = true;
          return;
        }
        if (typeof fn === "function") {
          fn.call(scope.gridInstance, row, index);
        } else if (typeof fn === "string") {
          $location.path(fn);
        }
      };
      scope.moreClick = function (op, row, e) {
        let buttons = scope.getBodyButtons(row);
        buttons = buttons.slice(2);
        typeof e.currentTarget.ins === "undefined"
          ? e.currentTarget.ins = psUi.createDrop(e.currentTarget, remapRowStruc(buttons, row), "right")
            .on("submit", d => {
              scope.buttonClick && scope.buttonClick(d, row, e);
              delete e.currentTarget.ins;
            }).on("close", d => {
              delete e.currentTarget.ins;
            })
          : null;
      };
      scope.btnColStyle = function (row) {
        let btn = scope.getBodyButtons(row);
        let unit = 70;
        return {
          'width': (btn.length * unit > 3 * unit ? 3 * unit : btn.length * unit) + "px"
        }
      };
      /*----------------------------- 按钮相关 -----------------------------*/
      /****************************** 排序相关 ******************************/
      scope.sortClick = function (head, key) {
        var sortable = head.sortable === false && false || true;
        if (sortable) {
          scope.gridInstance.sort(head, key, function () {
            scope.$apply();
          });
        }
      };
      scope.sorting = function (head, key) {
        var cls = "";
        if (head.sortable !== false) {
          cls += "sorting"
        }
        if (scope.gridInstance.sortBy.value == key) {
          if (scope.gridInstance.sortBy.direction === 'desc') {
            cls += "_desc";
          } else {
            cls += "_asc";
          }
        }
        return cls;
      };
      /*----------------------------- 排序相关 -----------------------------*/
      /****************************** 分页相关 ******************************/
      scope.sizes = _size;
      scope.moveTo = function (pg) {
        scope.gridInstance.moveTo(pg, function () {
          scope.$apply();
        });
      };
      scope.sizeChange = function (size) {
        scope.gridInstance.setPageSize(size, function () {
          scope.$apply();
        });
      };
      scope.prevPage = function () {
        scope.gridInstance.prevPage(function () {
          scope.$apply();
        });
      };
      scope.nextPage = function () {
        scope.gridInstance.nextPage(function () {
          scope.$apply();
        });
      };
      scope.pageDescription = function () {
        var from = scope.gridInstance.pageInstance.current * scope.gridInstance.pageInstance.size + 1;
        var to = from + scope.gridInstance.currentPageData.length - 1;
        var total = scope.gridInstance.pageInstance.length;
        return '第 ' + from + ' 至 ' + to + ' 项，共 ' + total + ' 项'
      };
      scope.hasPages = function () {
        return (scope.gridInstance && scope.gridInstance.showPage !== false) && scope.gridInstance.pageInstance && scope.gridInstance.pageInstance.getTotal() > 0;
      };
      scope.ifBeforeMarkShow = function () {
        var current = scope.gridInstance.pageInstance.current;
        var total = scope.gridInstance.pageInstance.total;
        return current > 2 && total > 3;
      };
      scope.middleRange = function () {
        var arr = [];
        var current = scope.gridInstance.pageInstance.current;
        var total = scope.gridInstance.pageInstance.total;
        current > 1 && arr.push(current - 1);
        current > 0 && current < total - 1 && arr.push(current);
        current < total - 2 && arr.push(current + 1);
        return arr;
      };
      scope.ifAfterMarkShow = function () {
        var current = scope.gridInstance.pageInstance.current;
        var total = scope.gridInstance.pageInstance.total;
        return current < total - 3 && total > 3;
      };
      scope.isPrevBtnDisabled = function () {
        return scope.gridInstance.pageInstance.isFirst() ? "disabled" : "";
      };
      scope.isNextBtnDisabled = function () {
        return scope.gridInstance.pageInstance.isLast() ? "disabled" : "";
      };
      /*----------------------------- 分页相关 -----------------------------*/
      scope.getLabel = function (header) {
        return getTextFromType("label", header) || header
      }

      function remapRowStruc (arr, row) {
        return arr.map(n => {
          if (isObject(n)) {
            if (typeof n.show === 'function') {
              n._isShow = n.show(row);
            }
            return n;
          } else if (isArray(n)) {
            return {
              label: n[0],
              on: {
                click: n[1]
              }
            }
          } else if (isString(n)) {
            return {
              label: n
            }
          }
        })
      }

      let sourceWatch, watch1, watch2;

      sourceWatch = scope.$watch("config", function (n, o, s) {
        if (typeof n !== 'undefined') {
          s.gridInstance = new PsGrid(n, ngModel.$viewValue, s);

          watch1 = scope.$watch(`gridInstance.deleteSign`, function () {
            ngModel.$setViewValue([...s.gridInstance.getData()]);
          });

        }
      });
      scope.$on('$destroy', function () {
        $("body").off("click.drop");
        sourceWatch && sourceWatch();
        watch1 && watch1();
      });
      scope.$on('PS_REFRESH_GRID_FROM_SEARCH_DONE', function (e, p) {
        scope.gridInstance.setSearchParameter(p);
        scope.gridInstance.moveTo(0, function () {
          scope.$apply();
        });
      });

    }
  }
}
</script>
