<config injector="$compile, psEvent, psUltility, growl, psDialog, ajax"
></config>
<template>
  <div>
    <div class="level">
      <div class="item" ng-style="transf(level)" ng-if="show || hasChildShow">
        <button ng-click="toggle()" ng-if="option.children.length > 0" style="margin-right: 5px">
          <span class="glyphicon glyphicon-minus"></span>
        </button>
        <span ng-if="!root" ng-bind="option.index"></span>
        <span ng-if="!root">-</span>
        <span ng-bind="option.label" ></span>
        <span class="glyphicon glyphicon-question-sign" ng-class="{_sign: true}"></span>
        <button ng-repeat="btn in buttons" ng-if="!root || (root && btn.rootShow)" ng-class="{_fr:true}" ng-attr-title="{{btn.tit}}" ng-click="click(btn, $event)">
          <span ng-bind="btn.label"></span>
          <i ng-class="btn.class"></i>
        </button>
      </div>
    </div>
  </div>
</template>
<script type="text/javascript">
  import { extend } from "ps-ultility";
  export default function(compile, psEvent, psUltility, growl, psDialog, ajax){
    return {
      scope : {
        search : "=",
        level : "=",
        option: "=",
        buttons : "=",
        root : "="
      },
      require : '?ngModel',
      link(scope, element, attr, ngModel) {
        let target = element[0].children[0],
          dom = document.createElement("div");
        dom.setAttribute("ng-if", "open !== false");
        dom.innerHTML = `<ps-tree-view2-content
            data-search="search"
            data-option="op"
            data-buttons="buttons"
            data-level="level + 1"
            data-root = "op._isRoot"
            ng-repeat="op in option.children track by $index">
        </ps-tree-view2-content>`;
        scope.transf = function(level){
          return {
            "margin-left" : -20 * level + "px",
            "padding-left" : 20 * level + "px"
          }
        };
        function allParents(scope, callback){
          while(scope && !scope.$$isTreeRoot){
            callback(scope);
            scope = scope.$parent;
          }
        }
        let s = psUltility.getRootScope(scope);
        s.$watch(scope.search, (n, o, s) => {
          let find = typeof n !== "undefined"
            ? scope.option.label.indexOf(n) !== -1 : true;
          scope.hasChildShow = scope.show = find;
          if(find){
            allParents(scope, (s) => {
              s.hasChildShow = true;
            })
          }
        });
        target.appendChild(dom);
        compile(target)(scope);
        scope.click = function(btn, event){
          let evt = psEvent(event);
          function add (obj) {
            let url = obj.url,
              successMsg = obj.successMsg || "添加成功",
              template = obj.template,
              before = obj.before || function (source) {
                source.parentModelId = scope.option.id;
                return [source]
              },
              after = obj.after || function (source) {
                return source;
              };
            return evt.pipe({
              command: "openModal",
              args: [template, null]
            }).pipe({
              command: "post",
              args: [url, before]
            }).pipe({
              command: "unshift",
              args: [after]
            }).pipe(function () {
              growl.success(successMsg);
            });
          }

          function remove (obj) {
            let url = obj.url,
              message = obj.message || "是否删除此项内容",
              successMsg = obj.successMsg || "删除成功",
              before = obj.before || function (source) {
                return [evt.$row.id];
              };
            return evt.pipe({
              command: "openAlert",
              args: [message]
            }).pipe({
              command: "post",
              args: [url, before]
            }).pipe({
              command: "remove"
            }).pipe(function () {
              growl.success(successMsg);
            })
          }

          function update (obj) {
            let url = obj.url,
              template = obj.template,
              successMsg = obj.successMsg || "更新成功",
              before = obj.before || function (source) {
                return [source]
              },
              after = obj.after || function (source) {
                return source;
              };
            return evt.pipe({
              command: "openModal",
              args: [template, evt.$row]
            }).pipe({
              command: "post",
              args: [url, before]
            }).pipe({
              command: "update",
              args: [after]
            }).pipe(function () {
              growl.success(successMsg);
            });
          }

          evt.extend({
            $row: scope.option,
            open: open,
            add: add,
            remove: remove,
            update: update
          });
          evt.registerCommand("openModal", function (name, data, dt, next, freeze) {
            let customRootScope = psUltility.getRootScope(scope),
              modal = customRootScope[psUltility.keyPattern(name)] || psDialog.getModelTemplate(name),
              dialog = psDialog.modal(modal(), data);
            dialog.on("submit", d => {
              next(d);
            });
            /**
            dialog.on("close", (d) => {
              freeze();
            })**/
          });
          evt.registerCommand("openAlert", function (message, dt, next, freeze) {
            let customRootScope = psUltility.getRootScope(scope),
              alertd = psDialog.getAlertTemplate("commonAlert"),
              dialog = psDialog.confirm(message);
              /*dialog = psDialog.confirm(message,()=>{
                  this.submit();
              });*/

              // confirm方法return 的不是一个Promise,不能用.then
           /* dialog.then(e => {
                if(e){
                    // next(dt);
                    console.log(e,dt);
                }else {
                    freeze();
                }
            })*/
            dialog.on("submit", (d) => {
              next(dt);
            });
            dialog.on("close", (d) => {
              freeze();

            })
          });
          evt.registerCommand("post", function (url, param, data, next, freeze) {
            param = typeof param === "function" ? param(data) : param;
            ajax.post(url, param).then((d) => {
              next(d);
            }).catch((e) => {
              freeze(e);
            })
          });
          evt.registerCommand("remove", function (data, next, freeze) {
            let chidlren = scope.$parent.$parent.option.children;
            var inx = chidlren.indexOf(scope.option);
            chidlren.splice(inx, 1);
            next();
          });
          evt.registerCommand("unshift", function (method, data, next, freeze) {
            let dt = typeof method === "function" ? method(data) : data;
            scope.option.children = scope.option.children || [];
            scope.option.children.unshift(dt);
            //宝钢增加排序 19.1.11 hlc
            scope.option.children.sort( (a,b) => {
                if(a.index && b.index){
                    return a.index - 0 - b.index;
                }
                return 0;
            });
            next(dt);
          });
          evt.registerCommand("update", function (method, data, next, freeze) {
            let dt = typeof method === "function" ? method(data) : data;
            let  children ;
            extend(scope.option, dt);
            //编辑树节点后排序 19.1.11 hlc
            children = scope.$parent.$parent.option.children;
            children.sort( (a,b) => {
                if(a.index && b.index){
                    return a.index - 0 - b.index;
                }
                return 0;
            });
            next(dt);
          });
          btn.on && typeof btn.on.click === "function" && btn.on.click(evt);
        };
        scope.toggle = function(){
          scope.open = typeof scope.open === "undefined" ? false : !scope.open;
        };
      }
    }

  }
</script>
<style type="less" scoped="true">
  .item {
    display: block;
    line-height: 32px;
    border-bottom: 1px solid #d2d6de;
    position: relative;
    padding: 6px;
    height: auto;
    cursor: pointer;
    &.active {
      background-color : #3c8dbc;
      color : #fff;
      &:hover {
        background-color: #3c8dbc;
      }
    }
  }

  .level {
    margin-left: 20px;
  }

  .item:hover {
    background: #f4f4f4;
  }
  button {
    line-height: 20px;
    color: rgb(255, 255, 255);
    border: 0px;
    background-color: rgb(0, 157, 234);
    float: left;
    padding: 2px 5px 2px 6px;
    margin: 4px 0px 0px 3px;
    display: block;
  }
  ._fr {
    color: rgb(30, 184, 184);
    border: 1px solid rgb(221, 221, 221);
    margin: 4px 3px 0px 2px;
    background-color: rgb(255, 255, 255);
    line-height: 14px;
    position: relative;
    overflow: visible;
    float: right;
    z-index: 1;

  }
  ._sign {
    font-size: 16px;
    color: rgb(238, 238, 238);
    margin-left: 20px;
  }

</style>
