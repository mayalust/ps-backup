<config injector="$q, ajax, $timeout, psScope, psExplainer, psAttribute, psUltility">
</config>
<template>
  <section class="content">
    <div class="row">
      <div class="col-md-12">
        <div class="box" style="background-color: transparent;">
          <ps-header ng-show="config.title" navigators="navigators"></ps-header>
          <ps-search ng-show="config.search && config.search.body.length > 0" option="search"></ps-search>
          <div class="box-footer">
            <ps-grid source="grid"></ps-grid>
            <!--<dat-table-dom source="grid"></dat-table-dom>-->
          </div>
        </div>
      </div>
    </div>
  </section>
</template>
<script type="text/javascript">
  import {attribute, isString, clone} from "ps-ultility";
  export default function (q, ajax, timeout, psScope, psExplainer, psAttribute, psUltility) {
    return {
      scope: {
        config: '=?',
        option: '=?',
        tableForm : '=?'
      },
      link (scope, element, attr, ngModel) {
        psScope(scope);
        let attributes = {},
          clear, searchAttributes = [],
          gridAttributes = [],
          watchGridData,
          watchGridDataLength,
          watcher = attribute(scope, ".option.config.grid.watch"),
          realPageParameter = {
            start: 0,
            length: 10,
            statCount: true
          },
          latestParameter,
          isType = (type, obj) => Object.prototype.toString.call(obj) === `[object ${type}]`,
          mergeObj = function () {
            let arr = Array.prototype.slice.call(arguments);
            let obj = {};
            for (let i = 0; i < arr.length; i++) {
              if (arr[i] ) {
                if (typeof arr[i] == 'object') {
                  for (let key in arr[i]) {
                    obj[key] = arr[i][key];
                  }
                } else {
                  return arguments[0];
                }
              }
            }

            return obj;
          },
          refreshGridEventHandler,
          paintSearch = false,
          paintGrid = false,
          initGrid = () => {
            if (Object.keys(attributes).length < 1) {
              return;
            }
            /****** 处理所有表格字段, 将所有的字段，转换为对象格式，放入gridAttributes中 ******/
            gridAttributes = psAttribute.resolveGridAttributes(scope.config.grid, attributes);
            /****** 处理所有表格字段 ******/


            /****** 处理表格字段 ******/
            scope.grid = {};
            scope.grid.body = psAttribute.buildGridBody(gridAttributes);
            // 将config字段的属性，全部组合进来
            for (let key in scope.config.grid.config) {
              scope.grid[key] = scope.config.grid.config[key];
            }
            scope.grid.buttons = scope.config.grid.buttons && scope.config.grid.buttons.outGrid ? scope.config.grid.buttons.outGrid : [];
            scope.grid.bodyButtons = scope.config.grid.buttons && scope.config.grid.buttons.inGrid ? scope.config.grid.buttons.inGrid : [];
            // options中是表格数据，对应处理为grid的data
            scope.grid.data = scope.config.grid.options;
            scope.grid.data ? scope.grid.data.needInitPage = true : void 0;
            if (/WithPage$/.test(scope.config.grid.config.url) || scope.config.grid.config.ajax) {
              scope.grid.realPage = true;
              scope.grid.realPageParameter = realPageParameter;
            }

            /**** 处理表格字段到此结束 ****/

            /**
             function watchChanges () {
              psUltility.createLoadWatch(scope.option.config.grid.watch, scope, d => {
                let handler = scope.option.config.grid.watch.handler;
                scope.grid.data = handler ? handler(d) : d;
              })
            }**/

            function watchChanges () {
              psUltility.createLoadWatch(scope.option.config.grid.watch, scope, d => {
                if (scope.tableForm == true) {
                  let key = scope.$parent.option["key"],
                    _key = isString(key) ? psUltility.keyPattern(key) : null,
                    handler = scope.option.config.grid.watch.handler,
                    obj = handler ? handler(d, scope.$parent['option'][_key] || []) : d;
                  isArray(obj) ? attribute(scope.$parent, `option.${_key}`, obj) : null;
                  scope.grid.data = obj;
                } else {
                  let handler = scope.option.config.grid.watch.handler;
                  scope.grid.data = handler ? handler(d) : d;
                }
              })
            }

            /******* 如果配置了URL，则从url中查询数据 *******/
            let getGridData = (parameter = scope.grid.parameter, needInitPage, fromFirstPage) => {
              parameter = isType('Object', scope.grid.parameter) ? mergeObj(scope.grid.parameter, parameter) : parameter;
              let getter, sendParameter;
              if (/WithPage$/.test(scope.grid.url) || scope.grid.ajax) {
                getter = function (d) {
                  d.data.fromFirstPage = !!fromFirstPage;
                  d.data.needInitPage = !!needInitPage;
                  d.data.total = d.total;
                  return d.data;
                };
                latestParameter = parameter;
                sendParameter = [latestParameter, realPageParameter];
              }

              function renderData (arr) {
                let promise = typeof arr === "undefined"
                  ? ajax.post(scope.grid.url, sendParameter ? sendParameter : parameter, getter)
                  : ajax.pipeline(arr);
                gridAttributes.forEach((d, index) => {
                  if (d.relate) {
                    let handler = psExplainer.get(d.relate.name);
                    if (handler) {
                      promise = promise.pipe(ajax.postAll(handler))
                    } else {
                      let obj = {
                        url: d.relate.name + `@${d.relate.to === 'id' ? 'getByIds' : 'getByCondition'}`,
                        before: d.relate.from
                      }
                      if (d.relate.to !== 'id') {
                        let relateDataType = d.relate.dataType ? d.relate.dataType : "numberic";
                        obj['param'] = function (resource) {
                          let rs = [];
                          resource.forEach(function (r) {
                            if (typeof  r == 'string') {
                              r.split(",").forEach(function (relateTo) {
                                if (relateDataType == "numberic") {
                                  let rn = new Number(relateTo);
                                  rs.push(isNaN(rn) ? relateTo : rn);
                                }
                              });
                            } else {
                              rs.push(r);
                            }
                          });
                          let p = mergeObj({}, d.relate.parameter);
                          p[d.relate.to] = {
                            IN: rs
                          }
                          return [d.relate.name, p];
                        }
                      };
                      obj['after'] = `${d.relate.alias || d.relate.name}:${d.relate.to == "id" ? "_id" : d.relate.to}`;
                      promise = promise.pipe(ajax.postAll(obj));
                    }
                  }
                });
                return promise;
              }

              renderData().then(x => {
                scope.grid.data = x;
                watchGridData && watchGridData();
                watchGridDataLength && watchGridDataLength();
                function watchGridDataWatcher (dt) {
                  let inxs = [],
                    newAdd = dt.filter((n, i) => {
                      if (typeof n.__get__ !== "function") {
                        inxs.push(i);
                        return true
                      } else {
                        return false;
                      }
                    }).map(d => {
                      return clone(d);
                    });
                  renderData(newAdd).then(d => {
                    scope.grid.data = dt.map((n, i) => {
                      let rs = inxs.indexOf(i);
                      return rs !== -1 ? d[rs] : n;
                    });
                  });
                }

                watchGridDataLength = scope.$watch(`grid.data.length`, (n, o, s) => {
                  if (n && o) {
                    if (n > o) {
                      watchGridDataWatcher(scope.grid.data)
                    }
                  }
                });
                /**
                 watchGridData = scope.$watch(`grid.data`, (n, o, s) => {
                      if (n) {
                        watchGridDataWatcher(n);
                      }
                    });**/
                if (scope.option && scope.option.key) {
                  scope.option[psUltility.keyPattern(scope.option.key)] = x;
                }
              });
            }
            if (scope.grid.url) {
              getGridData();
            }
            if (watcher) {
              watchChanges()
            }

            if (refreshGridEventHandler) {
              refreshGridEventHandler();
            }
            refreshGridEventHandler = scope.$on('PS_REFRESH_GRID', (e, d) => {
              if (d && d.realPageParameter) {
                realPageParameter = mergeObj(realPageParameter, d.realPageParameter);
                if (d.fromFirstPage) {
                  getGridData(d.parameter, d.needInitPage, d.fromFirstPage);
                } else {
                  getGridData(latestParameter, d.needInitPage, d.fromFirstPage);
                }
              } else {
                getGridData(d);
              }
            });


          },
          initSearch = () => {

            /****** 处理所有查询字段, 将所有的字段，转换为对象格式，放入searchAttributes中 ******/
            searchAttributes = psAttribute.resolveSearchAttributes(scope.config.search, attributes);
            /****** 处理所有查询字段 ******/

            /****** 组织查询字段 ******/
            scope.search = {
              body: [],
              buttons: {}
            };
            scope.search.body = psAttribute.buildSearchBody(searchAttributes);
            scope.search.beforeSearch = scope.config.search && scope.config.search.beforeSearch ? scope.config.search.beforeSearch : void 0;
              if (/WithPage$/.test(scope.config.grid.config.url) || scope.config.grid.config.ajax) {
              scope.search.realPage = true;
            }
            /****** 组织查询字段 ******/
          },
          refreshGrid = () => {
            paintGrid = true;
            timeout(function () {
              if (paintGrid) {
                paintGrid = false;
                initGrid();
              }
            })
          },
          refreshSearch = () => {
            paintSearch = true;
            timeout(function () {
              if (paintSearch) {
                paintSearch = false;
                initSearch();
              }
            })
          },
          initialization = false,
          init = () => {
            if (!initialization) {
              initialization = true;
              timeout(function () {
                scope.borderTop = _ => {
                  return {
                    "border-top": !scope.config.title && (!scope.config.search || scope.config.search.body.length < 1) ? "none" : "1px solid #f4f4f4"
                  }
                };
                /****** 处理标题 ******/
                scope.navigators = isType('Array', scope.config.title) ? scope.config.title.map(d => {
                  return isType('Array', d) ? {
                    label: d[0],
                    url: d[1],
                    active: !!d[2]
                  } : d;
                }) : [{
                  label: scope.config.title,
                  active: true
                }];

                /****** 处理标题结束 ******/

                /****** 处理所有的字段, 将所有的字段，转换为对象格式，放入attributes中 ******/
                attributes = psAttribute.resolveAttributes(scope.config.attributes)
                /****** 处理所有的字段 ******/

                initSearch();
                initGrid();
              });
            } else {
              refreshGrid();
            }
          };

        let watch1, watch2, watch3, watch4, watch5;
        watch1 = scope.$watch(`config`, n => {
          if (typeof n !== 'undefined') {
            typeof clear === "function" ? clear() : null;
            clear = init();
          }
        });
        watch2 = scope.$watch(`option`, (n, o, s) => {
          if (typeof n !== 'undefined') {
            s.config = n.config;
          }
          watch3 = scope.$watch(`config.grid.options`, (n, o, s) => {
            if (n) {
              scope.grid ? scope.grid.data = n : null;
            }
          });
          /*watch4 = scope.$watch(`config.grid.body`, (n, o, s) => {
            if (n) {
              // initialization = false;
              // init();
              refreshGrid();
            }
          }, true);*/
        });

        scope.$on('$destroy', () => {
          watch1 && watch1();
          watch2 && watch2();
          watch3 && watch3();
          watch4 && watch4();
          watch5 && watch5();
          watchGridData && watchGridData();
          watchGridDataLength && watchGridDataLength();
        });
      }
    }
  }
</script>
<style type="less" scoped="true">
</style>
