<config injector="$scope,ajax,growl,userUIService,psAttribute,$timeout">
</config>
<template>
    <ps-table config="config"></ps-table>
</template>
<script type="text/javascript">
export default function (scope, ajax, growl, userUIService, psAttribute, timeout) {
  let currentModelId;
  let gridBody = ["domainPath", "label", "sn"];
  let gridBodyLength =gridBody.length;
  scope.config = {
    title: "设备台账",
    attributes: {
      "domainPath": ["设备位置", "dict", {
        name: "resource",
        from: "domainPath",
        to: "domainPath",
        parameter: {
          modelId: 300,
          category: "Domain"
        }
      }],
      "label": ["设备名称", "text"],
      "sn": ["设备编码", "text"]
    },
    search: {
      body: [{
        name: "modelId",
        label: "设备类型",
        searchType: "tree",
        format: {
          parentID: "parentModelId",
          id: "id",
          label: "label"
        },
        relate: {
          name: "modelDefinition"
        },
        watch: function (n, s, m) {
          if (currentModelId != n) {
            currentModelId = n;
            if (n != null) {
              let length = scope.config.search.body.length;

              m.attrs.splice(length, m.attrs.length - length);

              scope.config.grid.body.splice(gridBodyLength, scope.config.grid.body.length - gridBodyLength);
              ajax.post("resourceUIService.getAttrsByModelId", [n]).then((ds) => {
                let searchAttributes = [];
                let gridAttrs = [];
                ds.forEach(function (d) {

                  if (d.showSearch) {
                      let searchType = "input";
                      if (d.searchType != null && d.searchType.type != null) {
                          searchType = d.searchType.type;
                      }

                      var searchAttr={
                          name:"values."+d.name,
                          type:d.dataType,
                          label:d.label,
                          format:d.format,
                          searchType :searchType
                      }
                      if(d.dataType=="relate"){
                          searchAttr.relate=d.relate;
                      }else  if(d.dataType=="enum"){
                          searchAttr.options=JSON.parse(d.attrTypeValue);
                      // }else  if(d.dataType=="dict"){
                      //     searchAttr.options=JSON.parse(d.attrTypeValue);
                      }
                    searchAttributes.push(searchAttr);
                  }
                  if (d.showGrid) {
                      var gridAttr={
                          name:"values."+d.name,
                          type:d.dataType,
                          label:d.label,
                          format:d.format
                      }
                      if(d.dataType=="relate") {
                          gridAttr.relate = d.relate;
                      }else if(d.dataType=="enum"){
                          let attrTypeValues=JSON.parse(d.attrTypeValue);
                          let attrTypeValueMap={};
                          attrTypeValues.forEach(function(item){
                              attrTypeValueMap[item.id]=item;
                          });

                          gridAttr.bind=function(row,v){

                            return  [attrTypeValueMap[v].label];
                          }
                      }else if(d.dataType=="dict"){
                          let attrTypeValues=JSON.parse(d.attrTypeValue);
                          let attrTypeValueMap={};
                          attrTypeValues.forEach(function(item){
                              attrTypeValueMap[item.id]=item;
                          });

                          gridAttr.bind=function(row,v){

                              return  [attrTypeValueMap[v].label];
                          }
                      }
                      if(d.gridType!=null){
                          // gridAttr.gridType=d.gridType.type;
                      }
                    gridAttrs.push(gridAttr);
                  }
                });

                if (searchAttributes.length > 0) {
                  /****** 处理所有查询字段, 将所有的字段，转换为对象格式，放入searchAttributes中 ******/
                  let search = {body: searchAttributes}
                  searchAttributes = psAttribute.resolveSearchAttributes(search, []);
                  let t = [];
                  psAttribute.buildSearchBody(searchAttributes).forEach(function (a) {
                    t.push(a);
                  });
                  m.getSearchComponent(t, function (addAttrs) {
                    addAttrs.forEach(function (a) {
                      m.attrs.push(a);
                    });
                  });
                }
                if(gridAttrs.length>0){

                    scope.config.grid.body= scope.config.grid.body.concat(gridAttrs);
                    // gridAttrs.forEach(function (a) {
                    //     gridBody.push(a);
                    // });
                }

                  //
              });
            }
          }
        }
      }, "label", {
        label: "设备编码",
        name: "sn"
      }]
    },
    grid: {
      body: gridBody,
      buttons: {
        outGrid: [{
          label: " 导出查询结果",
          class: "primary",
          icon: "fa fa-download",
          symbol: "export",
          filename: "设备台账信息"
          // functionCode:"ddd"
        }, {
          label: "导出所有",
          class: "primary",
          icon: "fa fa-download",
          on: {
            click: function () {
              if (currentModelId > 0) {
                window.location.href = '' + userUIService.uploadFileUrl + '/api/rest/export/resourceUIService/exportDeviceByModel/' + currentModelId + '.xlsx/' + currentModelId + '/deviceInfo/';
              } else {
                growl.warning("请选择一个设备类型！");
              }
            }
          }
        }]
      },
      config: {
        url: 'resourceUIService.getDevicesByConditionWithPage',
        parameter: {},
        showIndex: false,
        showSelector: false,
        showSearch: false
      },
      options: []
    }
  };

};
</script>
<style type="less">
</style>