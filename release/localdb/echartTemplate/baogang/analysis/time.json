{
  "layout": {
    "type": "column",
    "children": [
      {
        "label": "控制板1",
        "type": "block",
        "source": "BLOCK",
        "style": {
          "padding": "10px",
          "margin": "5px",
          "border": "0",
          "box-shadow": "0px 0px 0px 0px rgba(0,0,0,0)",
          "background-color": "rgba(250,250,250,0)"
        },
        "children": [
          {
            "type": "column",
            "col": 12,
            "children": [
              {
                "label": "控件组",
                "type": "ctrlgroup",
                "source": "CTRLGROUP",
                "advance": {
                  "expression": "expression = {\n  width : \"auto\",\n  on : {\n    init : function(event){\n      var target = event.target;\n      var global = event.global;\n      target.setValue(\"type\", 0);\n      target.setValue(\"x0\", undefined);\n      target.setValue(\"x1\", undefined);\n      var render = function(){\n          var x0 = target.getValue(\"x0\") || 0;\n          var y0 = target.getValue(\"y0\") || 0;\n          var x1 = target.getValue(\"x1\") || 0;\n          var y1 = target.getValue(\"y1\") || 0;\n          var ctrlGroups = [\n           [{\n               type : \"jquery\",\n               render : function(){\n                   var div = $(\"<div></div>\");\n                   div.width(25);\n                   div.height(10);\n                   div.css(\"background-color\", \"blue\");\n                   return div;\n               }\n           },{\n              type : \"label\",\n              value : \"X\",\n              style : {\n                  \"width\" : \"10px\",\n                  \"padding\" : \"3px\"\n              }\n            },{\n              type : \"label\",\n              value : parseFloat(x0).toFixed(4),\n              style : {\n                  \"width\" : \"50px\",\n                  \"padding\" : \"3px 10px\",\n                  \"background-color\" : \"rgba(0,0,0,.1)\"\n              }\n            },{\n              type : \"label\",\n              value : \"Y\",\n              style : {\n                  \"padding\" : \"3px\"\n              }\n            },{\n              type : \"label\",\n              value : parseFloat(y0).toFixed(4),\n              style : {\n                  \"width\" : \"50px\",\n                  \"padding\" : \"3px 10px\",\n                  \"background-color\" : \"rgba(0,0,0,.1)\"\n              }\n            },{\n               type : \"jquery\",\n               render : function(){\n                   var div = $(\"<div></div>\");\n                   div.width(25);\n                   div.height(10);\n                   div.css(\"margin-left\", \"50px\");\n                   div.css(\"background-color\", \"red\");\n                   return div;\n               }\n           },{\n              type : \"label\",\n              value : \"X\",\n              style : {\n                  \"padding\" : \"3px\"\n              }\n            },{\n              type : \"label\",\n              value : parseFloat(x1).toFixed(4),\n              style : {\n                  \"width\" : \"50px\",\n                  \"padding\" : \"3px 10px\",\n                  \"background-color\" : \"rgba(0,0,0,.1)\"\n              }\n            },{\n              type : \"label\",\n              value : \"Y\",\n              style : {\n                  \"padding\" : \"3px\"\n              }\n            },{\n              type : \"label\",\n              value : parseFloat(y1).toFixed(4),\n              style : {\n                  \"width\" : \"50px\",\n                  \"padding\" : \"3px 10px\",\n                  \"background-color\" : \"rgba(0,0,0,.1)\"\n              }\n            },{\n              type : \"label\",\n              value : \"△X\",\n              style : {\n                  \"margin-left\" : \"50px\",\n                  \"padding\" : \"3px\"\n              }\n            },{\n              type : \"label\",\n              value : (x1-x0).toFixed(4),\n              style : {\n                  \"width\" : \"50px\",\n                  \"padding\" : \"3px 10px\",\n                  \"background-color\" : \"rgba(0,0,0,.1)\"\n              }\n            },{\n              type : \"label\",\n              value : \"△Y\",\n              style : {\n                  \"padding\" : \"3px\"\n              }\n            },{\n              type : \"label\",\n              value : (y1-y0).toFixed(4),\n              style : {\n                  \"width\" : \"50px\",\n                  \"padding\" : \"3px 10px\",\n                  \"background-color\" : \"rgba(0,0,0,.1)\",\n                  \"margin-right\" : \"50px\"\n              }\n            }]\n          ];\n          target.render(ctrlGroups);\n      }\n      target.on(\"handleChange\", function(){\n          render();\n      })\n      render();\n    }\n  }\n}"
                },
                "style": {
                  "margin": "5px",
                  "font-size": "12px"
                },
                "help": "../pdf/ctrlgroup.pdf",
                "parameters": {}
              },
              {
                "label": "高级视图",
                "type": "advanceEchart",
                "source": "ADVANCEECHART",
                "advance": {
                  "expression": "express = {\n  on: {\n    init: function (event) {\n      var target = event.target;\n      var global = event.global;\n      var kpi;\n      var resource = target.getValue(\"global/resource\");\n      var ci = [resource.id];\n      var sensor = target.getValue(\"global/sensor\");\n      var time = target.getValue(\"global/time\");\n      var kpi = sensor ? [sensor.kpiId]: [];\n      var instance = sensor ? sensor.instance : \"\";\n     \n      var renderROWEchart = function (ci, kpi, time) {\n        time = time || target.dateHandler();\n        var params = {\n          time:0,\n          kpiCodes:kpi,\n          isRealTimeData:false,\n          nodeIds:ci,\n          startTime:time.getUTCDateString(),\n          endTime:time.getUTCDateString(),\n          transformerType:\"ROW\",\n          includeInstance : true,\n          queryInstances : instance\n        }\n        target.showLoading();\n        target.hideNoData();\n        event.target.postService(\"kpiDataFlexService\", \"getKpiValueList\", [\"kpi\",params], function(returnData){\n          target.hideLoading();\n\n          if (returnData.data.length > 0) {\n            var data = eval(returnData.data[0].value);\n            var dataList = data[0];\n            var valueList = data[1];\n            for(var i in valueList){\n              valueList[i] = [dataList[i], valueList[i]];\n            };\n            target.setValue(\"x0\", dataList[0]);\n            target.setValue(\"y0\", valueList[0][1]);\n            target.setValue(\"x1\", dataList[180]);\n            target.setValue(\"y1\", valueList[180][1]);\n            target.trigger(\"handleChange\");\n            var render = function (init, sub) {\n              var x0 = target.getValue(\"x0\") || 0;\n              var x1 = target.getValue(\"x1\") || 180;\n              var x2 = 90;\n              var markLine = undefined;\n              var markPoint = undefined;\n              var option = {\n                grid: [{\n                  \"top\": \"10%\",\n                  \"width\": \"90%\",\n                  \"left\": \"5%\",\n                  \"height\": \"65%\"\n                }, {\n                  \"top\": \"10%\",\n                  \"width\": \"90%\",\n                  \"left\": \"5%\",\n                  \"height\": \"65%\"\n                }, {\n                  \"top\": \"10%\",\n                  \"width\": \"90%\",\n                  \"left\": \"5%\",\n                  \"height\": \"65%\"\n                }],\n                tooltip: {\n                  \"alwaysShowContent\": true,\n                  trigger: 'item',\n                  triggerOn: 'none'\n                },\n                xAxis: [{\n                  type : \"value\",\n                  max : \"dataMax\",\n                  axisLabel : {\n                    show : true\n                  },\n                  axisPointer: {\n                    label: {\n                      formatter: function (val) {\n                        if (val.seriesData[0]) {\n                             // 
                },
                "style": {
                  "margin": "auto",
                  "width": "100%",
                  "height": "350px"
                },
                "url": "images/map/map1.png",
                "parameters": {
                  "theme": "dark"
                }
              }
            ]
          }
        ],
        "advance": {
          "expression": {}
        },
        "url": "images/map/map1.png"
      }
    ],
    "col": 12
  },
  "setting": "{\n  \"theme\": \"steel\"\n}"
}