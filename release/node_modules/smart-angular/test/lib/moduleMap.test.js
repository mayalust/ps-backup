const {
  getFilePath
} = require("ps-ultility");
const pathLib = require("path");
const psfile = require("ps-file");
let {
  expect
} = require("chai");
let createModuleMap = require("../../dist/lib/moduleMap.js");
let moduleMap = createModuleMap();
describe("测试编辑以后文件是否需要刷新加载", () => {
  /* it("1)先初始化模块，再更新其中一个依赖，模块会被标记为已更新", done => {
    moduleMap.init("ps-test", "output").then(() => {
      psfile(pathLib.resolve(__dirname, "../../ps-test/controllers"))
        .stat()
        .then(n => {
          return n.read("./test.controller").then(d => {
            let str = d.toString();
            n.write(
              "./test.controller",
              `  </test>
          </template>
          <script>
            export default function( scope, compile, registerService ){
              console.log("${Math.floor(Math.random() * 10000)}")
              scope.n = "tttttt";
            }
          </script>
          <style lang="scss" scoped>
            .wrap {
              span {
                color : blue
              }
            }
          </style>`
            ).then(d => {
              moduleMap.init("ps-test", "output").then(moduleList => {
                let modified = moduleList.some(module => module.isModified());
                expect(modified).to.be.equal(true);
                done();
              });
            });
          });
        });
    });
  });
  it("2)完全不更新依赖，模块会被标记为已未更新", done => {
    moduleMap.init("ps-test", "output").then(moduleList => {
      let modified = moduleList.some(module => module.isModified());
      expect(modified).to.be.equal(false);
      done();
    });
  }); */
});