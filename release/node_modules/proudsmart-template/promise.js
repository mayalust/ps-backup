function bind(target, fn){
  return function(){
    fn.apply(target, arguments);
  }
}
function extend(a, b){
  for(var i in b){
    a[i] = b[i];
  }
  return a;
}
function Promise(fn){
  var cur = this;
  function resolve(d){
    this.emit("resolve", d);
  }
  function reject(d){
    this.emit("reject", d);
  }
  fn(resolve, reject)
}
Promise.prototype.event = {};
Promise.prototype.state = 0;
Promise.on = function(eventname, callback){
  this.event[eventname] = callback;
}
Promise.emit = function(eventname, data){
  this.event[eventname](data)
}
Promise.prototype.then = function(fn){
  var cur = this, p;
  this.promise = this.promise || new Promise(function(res, rej){
    cur.on("resolve", function(d){
      p = fn(d);
      if(p){
        p.then(function(d){
          res(d);
        });
        p.catch(function(d){
          rej(d);
        });
      } else {
        res(d)
      }
    });
    cur.on("reject", function(d){
      rej(d);
    });
  })
}
Promise.prototype.catch = function(fn){
  var cur = this, p;
  return
}


promise.then(function(d){
  return promise;
})
.then(function(d){