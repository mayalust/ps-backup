{"version":3,"sources":["js/services/websocket-service.js"],"names":["define","services","service","$timeout","growl","serviceProxy","self","this","callbackPool","delayPool","ws","newWebSocket","wsURL","protocol","host","wsTmp","WebSocket","e","onopen","evnt","length","popData","shift","isReg","register","uuid","operation","callbackFuns","unRegister","readyState","send","type","param","onOpen","onmessage","onMessage","onclose","console","info","onerror","state","evenData","JSON","parse","data","angular","forEach","value","callback","doSend","webSocketVo","stringify","unregister","webSocketRe","push","num","key","simuSend","config","interval","nodeId","kpiId","instance","sendMsg","i","kpiCode","repeat","setTimeout","warn","error"],"mappings":"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","file":"js/services/websocket-service.js","sourcesContent":["define(['../services/services.js'], function (services) {\n  'use strict';\n\n  services.service('SwSocket', ['$timeout', 'growl', 'serviceProxy', function ($timeout, growl, serviceProxy) {\n    var self = this;\n    var callbackPool = []; //onMessage分类处理函数  \n\n    var delayPool = []; //延迟处理请求  \n\n    var registerPool = []; //已注册的方法  \n\n    var data = {};\n    var ws = null;\n\n    function newWebSocket() {\n      var wsURL = \"wss://192.168.1.121/websocket/message\";\n      var protocol = \"ws:\";\n\n      if (serviceProxy.protocol) {\n        protocol = serviceProxy.protocol;\n      }\n\n      if (serviceProxy.host) {\n        wsURL = protocol + \"//\" + serviceProxy.host + \"/websocket/message\";\n      } //wsURL = \"ws://192.168.1.200/websocket/message\";\n\n\n      var wsTmp = {};\n\n      try {\n        wsTmp = new WebSocket(wsURL);\n      } catch (e) {}\n\n      ;\n\n      wsTmp.onopen = function (evnt) {\n        onOpen(evnt);\n      };\n\n      wsTmp.onmessage = function (evnt) {\n        onMessage(evnt);\n      };\n\n      wsTmp.onclose = function (evnt) {\n        onclose(evnt);\n      };\n\n      wsTmp.onerror = function (evnt) {\n        onError(evnt);\n      };\n\n      return wsTmp;\n    }\n\n    ws = newWebSocket();\n\n    function onOpen() {\n      //缓存池中存在请求  \n      while (delayPool.length > 0) {\n        var popData = delayPool.shift();\n\n        if (popData.isReg == 1) {\n          self.register(popData.uuid, popData.operation, popData.callbackFuns);\n        } else if (popData.isReg == 0) {\n          self.unRegister(popData.uuid);\n        } else {\n          if (ws.readyState == 1) {\n            self.send(popData.uuid, popData.operation, popData.type, popData.param);\n          }\n        }\n      }\n    }\n\n    function onclose() {\n      console.info(\"websocket已经关闭\");\n      /*是否重新链接*/\n\n      $timeout(function () {\n        newWebSocket();\n      }, 10000);\n    }\n\n    function onMessage(evnt) {\n      //这里处理接收数据  \n      var evenData = JSON.parse(evnt.data);\n      angular.forEach(callbackPool, function (value) {\n        if (value.uuid === evenData.uuid) {\n          value.callback(evenData);\n        }\n      });\n    }\n\n    function onError(evnt) {\n      console.info(ws.state);\n      /*是否重新链接\n      $timeout(function() {\n        newWebSocket();\n      }, 3000);\n      */\n    } //注册方法\n    //注册成功后会一直监听后端推送的相应部分的数据  \n    //直到注销此方法  \n\n\n    self.register = function (uuid, operation, callbackFuns) {\n      self.unregister(uuid);\n      var webSocketRe = {};\n      webSocketRe.operation = 'register';\n      webSocketRe.uuid = 'register';\n      webSocketRe.param = {\n        uuid: uuid,\n        operation: operation\n      };\n\n      if (ws.readyState == 0) {\n        //websocket服务未打开\n        webSocketRe.isReg = 1; //register\n\n        webSocketRe.operation = operation;\n        webSocketRe.uuid = uuid;\n        webSocketRe.callbackFuns = callbackFuns;\n        delayPool.push(webSocketRe);\n        return \"sending is delay.\";\n      } else {\n        callbackPool.push({\n          uuid: uuid,\n          operation: operation,\n          callback: callbackFuns\n        });\n      }\n\n      ;\n    }; //注销方法  \n    //通知后端不再推送相应数据  \n\n\n    self.unregister = function (uuid) {\n      var webSocketRe = {};\n      webSocketRe.operation = 'unRegister';\n      webSocketRe.uuid = uuid; //websocket服务未开启  \n\n      if (ws.readyState == 0) {\n        delayPool.push(webSocketRe); //  \n\n        return \"unregister is delay.\";\n      } else {\n        var num = 0; //循环检查回调函数池  \n\n        angular.forEach(callbackPool, function (value, key) {\n          if (value.uuid === uuid) {\n            num += 1;\n            delete callbackPool[key];\n            num -= 1;\n          }\n        }); //回调函数池中已经不存在此方法才真正发送websocket请求  \n        //通知后端不再推送相应数据  \n\n        if (num === 0) {\n          doSend(webSocketRe);\n        }\n      }\n    }; //实际发送websocket请求  \n\n\n    function doSend(webSocketVo) {\n      /** 只有链接状态才发送 */\n      if (ws.readyState == 1) {\n        var rs = ws.send(JSON.stringify(webSocketVo));\n      }\n    }\n\n    self.simuSend = function (config) {\n      var interval = config.interval;\n      var nodeId = config.nodeId;\n      var kpiId = config.kpiId;\n      var value = config.value;\n      var instance = config.instance;\n      var interval = config.interval;\n\n      var sendMsg = function sendMsg() {\n        var loop = function loop(i, callback) {\n          var uuid = callback.uuid;\n          var data = {\n            data: JSON.stringify({\n              uuid: uuid,\n              data: {\n                nodeId: nodeId,\n                kpiCode: kpiId,\n                value: value,\n                instance: instance\n              }\n            })\n          };\n          onMessage(data);\n        };\n\n        for (var i in callbackPool) {\n          loop(i, callbackPool[i]);\n        }\n\n        ;\n      };\n\n      if (interval) {\n        var repeat = function repeat() {\n          setTimeout(function () {\n            sendMsg();\n            repeat();\n          }, interval);\n        };\n\n        repeat();\n      } else {\n        sendMsg();\n      }\n    };\n\n    self.send = function (uuid, operation, type, param) {\n      var webSocketVo = {};\n      webSocketVo.operation = operation;\n      webSocketVo.uuid = uuid;\n      webSocketVo.type = type;\n      webSocketVo.param = param;\n\n      if (ws.readyState == 0) {\n        console.warn(\"websocket is in openning state.\");\n        delayPool.push(webSocketVo);\n        return \"sending is delay.\";\n      } else if (ws.readyState == 1) {\n        return doSend(webSocketVo);\n      } else {\n        console.error(\"websocket is in closing state.\");\n      }\n    };\n\n    return self;\n  }]);\n});"],"sourceRoot":"/source/"}