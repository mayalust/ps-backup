{"version":3,"sources":["js/services/uploader-service.js"],"names":["define","services","factory","FileUploader","configUIService","growl","param","domainPath","groupName","id","invalid","key","keyDesc","label","value","fileFormat","uploader","url","origin","withCredentials","events","fuploader","filters","push","name","fn","item","options","nameAry","split","type","length","indexOf","warning","fileMaxSize","size","onWhenAddingFileFailed","filter","console","info","onAfterAddingFile","fileItem","onCompleteItem","response","status","headers","code","data","success","saveConfig","resultObj","error","message","prototype","on","eventName","callback","uploadFile","file","clearQueue","addToQueue","queue","que","formData","upload"],"mappings":"AAAAA,OAAO,CAAC,2BAA4B,SAAUC,GAC5C,aAEAA,EAASC,QAAQ,YAAa,CAAC,eAAgB,kBAAmB,QAAS,SAAUC,EAAcC,EAAiBC,GAClH,IAAIC,EAAQ,CACVC,WAAY,GACZC,UAAW,iBACXC,GAAI,EACJC,SAAS,EACTC,IAAK,GACLC,QAAS,GACTC,MAAO,GACPC,MAAO,IAELC,EAAa,6BAGbC,EAAW,IAAIb,EAAa,CAC9Bc,IAAKb,EAAgBc,OAAS,0DAC9BC,iBAAiB,IAEfC,EAAS,GAETC,EAAY,WACdL,EAASM,QAAQC,KAAK,CACpBC,KAAM,cACNC,GAAI,SAAYC,EAEdC,GACA,IAAIC,EAAUF,EAAKF,KAAKK,MAAM,KAC1BC,EAAOF,EAAQA,EAAQG,OAAS,GAEpC,OAAiC,GAA7BhB,EAAWiB,QAAQF,IACrBzB,EAAM4B,QAAQ,UAAYlB,EAAa,WAAY,KAC5C,KAGcmB,IAAnBR,EAAKS,KAAO,QACd9B,EAAM4B,QAAQ,mBAAsC,KAC7C,MAObjB,EAASoB,uBAAyB,SAAUV,EAE1CW,EAAQV,GACRW,QAAQC,KAAK,yBAA0Bb,EAAMW,EAAQV,IAGvDX,EAASwB,kBAAoB,SAAUC,KAEvCzB,EAAS0B,eAAiB,SAAUD,EAAUE,EAAUC,EAAQC,GAG9D,GAFAP,QAAQC,KAAK,iBAAkBI,GAE3BA,EACF,GAAqB,GAAjBA,EAASG,KAAW,CACtB,IAAI7B,EAAM0B,EAASI,KACnBzC,EAAMQ,MAAQG,EACdZ,EAAM2C,QAAQ,SAAU,IACxB5C,EAAgB6C,WAAW3C,EAAO,SAAU4C,GAC1C9B,EAAO,mBAAsB8B,UAG/B7C,EAAM8C,MAAMR,EAASS,QAAS,SAKhC/C,EAAM8C,MAAM,eAAgB,MA+BlC,OA1BA9B,EAAUgC,UAAUC,GAAK,SAAUC,EAAWC,GAC5CpC,EAAOmC,GAAaC,GAGtBnC,EAAUgC,UAAUI,WAAa,SAAUC,EAAMF,GAK/C,GAJApC,EAAO,mBAAwBoC,EAC/BxC,EAAS2C,aACT3C,EAAS4C,WAAWF,GAEQ,EAAxB1C,EAAS6C,MAAM9B,OAAY,CAC7B,IAAI+B,EAAM9C,EAAS6C,MAAM,GACzBvD,EAAMO,MAAQiD,EAAIJ,KAAKlC,KACvBpB,EAAgB6C,WAAW3C,EAAO,SAAU4C,GAC1C,GAAsB,GAAlBA,EAAUJ,KAAW,CACvB,IAAIrC,EAAKyC,EAAUH,KAAKtC,GACxBH,EAAMG,GAAKA,EACXqD,EAAIC,SAAW,CAAC,CACdjD,MAAO,wBACPL,GAAIA,IAENqD,EAAIE,cAML,IAAI3C","file":"js/services/uploader-service.js","sourcesContent":["define(['../services/services.js'], function (services) {\n  'use strict';\n\n  services.factory('fuploader', ['FileUploader', 'configUIService', 'growl', function (FileUploader, configUIService, growl) {\n    var param = {\n      domainPath: \"\",\n      groupName: \"dashboardImage\",\n      id: 0,\n      invalid: false,\n      key: \"\",\n      keyDesc: \"\",\n      label: \"\",\n      value: \"\"\n    };\n    var fileFormat = \"|jpg|png|jpeg|bmp|gif|svg|\";\n    var queueLimit = 1;\n    var fileMaxSize = 1;\n    var uploader = new FileUploader({\n      url: configUIService.origin + '/api/rest/uploadConfig/configUIService/uploadConfigFile',\n      withCredentials: true\n    });\n    var events = {};\n\n    var fuploader = function fuploader() {\n      uploader.filters.push({\n        name: 'imageFilter',\n        fn: function fn(item\n        /*{File|FileLikeObject}*/\n        , options) {\n          var nameAry = item.name.split(\".\");\n          var type = nameAry[nameAry.length - 1];\n\n          if (fileFormat.indexOf(type) == -1) {\n            growl.warning(\"文件格式仅支持\" + fileFormat + \"文件，请重新选择\", {});\n            return false;\n          }\n\n          if (item.size / 1024 > fileMaxSize * 1000) {\n            growl.warning(\"您选择的文件大于\" + fileMaxSize + \"M，请重新选择\", {});\n            return false;\n          }\n\n          return true;\n        }\n      });\n\n      uploader.onWhenAddingFileFailed = function (item\n      /*{File|FileLikeObject}*/\n      , filter, options) {\n        console.info('onWhenAddingFileFailed', item, filter, options);\n      };\n\n      uploader.onAfterAddingFile = function (fileItem) {};\n\n      uploader.onCompleteItem = function (fileItem, response, status, headers) {\n        console.info('onCompleteItem', response);\n\n        if (response) {\n          if (response.code == 0) {\n            var url = response.data;\n            param.value = url;\n            growl.success(\"图片上传成功\", {});\n            configUIService.saveConfig(param, function (resultObj) {\n              events['fileUploadComplete'](resultObj);\n            });\n          } else {\n            growl.error(response.message, {});\n          }\n\n          ;\n        } else {\n          growl.error(\"操作异常了，尝试重新刷新\", {});\n        }\n      };\n    };\n\n    fuploader.prototype.on = function (eventName, callback) {\n      events[eventName] = callback;\n    };\n\n    fuploader.prototype.uploadFile = function (file, callback) {\n      events['fileUploadComplete'] = callback;\n      uploader.clearQueue();\n      uploader.addToQueue(file);\n\n      if (uploader.queue.length > 0) {\n        var que = uploader.queue[0];\n        param.label = que.file.name;\n        configUIService.saveConfig(param, function (resultObj) {\n          if (resultObj.code == 0) {\n            var id = resultObj.data.id;\n            param.id = id;\n            que.formData = [{\n              value: 'images/dashboardImage',\n              id: id\n            }];\n            que.upload();\n          }\n        });\n      }\n    };\n\n    return new fuploader();\n  }]);\n});"],"sourceRoot":"/source/"}