{"version":3,"sources":["toolkit/component/excel.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","define","data","element","excelDom","$","render","inner","table","i","css","append","renderRow","inx","row","header","rowDom","renderHeader","renderCol","th","thDom","text","col","colDom","renderDom","children","remove","j","removeEmptyCell","parameters","excelData","style"],"mappings":"AAAA,SAASA,QAAQC,GAAwT,OAAtOD,QAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBF,GAAO,cAAcA,GAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,IAAyBA,GAKxVK,OAAO,GAAI,WACT,OAAO,SAAUC,GACf,IAAIC,EAAUD,EAAKC,QACfC,EAAWC,EAAE,eAwFjB,OA5EAF,EAAQG,OAAS,SAAUJ,GACzB,IA+DIK,EA/DY,WACd,IAAIC,EAAQH,EAAE,mBAGd,IAAK,IAAII,KAFTD,EAAME,IAAI,QAAS,QAELR,EACH,GAALO,EACFD,EAAMG,OAAOC,EAAUH,EAAGP,EAAKO,IAAI,IAEnCD,EAAMG,OAAOC,EAAUH,EAAGP,EAAKO,KAInC,OAAOD,EAEP,SAASI,EAAUC,EAAKC,EAAKC,GAC3B,IAAIC,EAASX,EAAE,aAMf,IAAK,IAAII,KAJLI,EAAM,GAAK,GACbG,EAAON,IAAI,mBAAoB,QAGnBI,EACRC,EACFC,EAAOL,OAAOM,EAAaH,EAAIL,KAE/BO,EAAOL,OAAOO,EAAUJ,EAAIL,KAIhC,OAAOO,EAEP,SAASC,EAAaE,GACpB,IAAIC,EAAQf,EAAE,aASd,GARAe,EAAMV,IAAI,UAAW,YACrBU,EAAMV,IAAI,aAAc,UACxBU,EAAMV,IAAI,QAAS,QACnBU,EAAMV,IAAI,cAAe,QACzBU,EAAMV,IAAI,SAAU,qBACpBU,EAAMV,IAAI,mBAAoB,WAC9BU,EAAMV,IAAI,cAAe,QAER,iBAANS,GAAyB,KAAPA,EAE3B,OADAC,EAAMC,KAAKF,GACJC,EAIX,SAASF,EAAUI,GACjB,IAAIC,EAASlB,EAAE,aAOf,GANAkB,EAAOb,IAAI,UAAW,YACtBa,EAAOb,IAAI,cAAe,QAC1Ba,EAAOb,IAAI,aAAc,UACzBa,EAAOb,IAAI,SAAU,kBACrBa,EAAOb,IAAI,QAAS,QAEF,iBAAPY,GAA2B,KAARA,EAE5B,OADAC,EAAOF,KAAKC,GACLC,IAMHC,GACZpB,EAASqB,WAAWC,SACpBtB,EAASO,OAAOJ,IA5EI,SAAyBL,GAC7C,IAAK,IAAIO,KAAKP,EACZ,IAAK,IAAIyB,KAAKzB,EAAKO,GACU,UAAvBd,QAAQO,EAAKO,GAAGkB,YACXzB,EAAKO,GAAGkB,GA2EvBC,CAAgBzB,EAAQ0B,WAAWC,WACnC3B,EAAQG,OAAOH,EAAQ0B,WAAWC,WAE9B3B,EAAQ4B,OACV3B,EAASM,IAAIP,EAAQ4B,OAGhB3B","file":"toolkit/component/excel.js","sourcesContent":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Created by leonlin on 16/11/3.\n */\ndefine([], function () {\n  return function (data) {\n    var element = data.element;\n    var excelDom = $(\"<div></div>\");\n\n    var removeEmptyCell = function removeEmptyCell(data) {\n      for (var i in data) {\n        for (var j in data[i]) {\n          if (_typeof(data[i][j]) == \"object\") {\n            delete data[i][j];\n          }\n        }\n      }\n    };\n\n    element.render = function (data) {\n      var renderDom = function renderDom() {\n        var table = $(\"<table></table>\");\n        table.css(\"width\", \"100%\");\n\n        for (var i in data) {\n          if (i == 0) {\n            table.append(renderRow(i, data[i], true));\n          } else {\n            table.append(renderRow(i, data[i]));\n          }\n        }\n\n        return table;\n\n        function renderRow(inx, row, header) {\n          var rowDom = $(\"<tr></tr>\");\n\n          if (inx % 2 == 1) {\n            rowDom.css(\"background-color\", \"#eee\");\n          }\n\n          for (var i in row) {\n            if (header) {\n              rowDom.append(renderHeader(row[i]));\n            } else {\n              rowDom.append(renderCol(row[i]));\n            }\n          }\n\n          return rowDom;\n\n          function renderHeader(th) {\n            var thDom = $(\"<th></th>\");\n            thDom.css(\"padding\", \"5px 20px\");\n            thDom.css(\"text-align\", \"center\");\n            thDom.css(\"color\", \"#fff\");\n            thDom.css(\"line-height\", \"20px\");\n            thDom.css(\"border\", \"1px solid #3c8dbc\");\n            thDom.css(\"background-color\", \"#3c8dbc\");\n            thDom.css(\"font-weight\", \"bold\");\n\n            if (typeof th == 'string' && th !== '') {\n              thDom.text(th);\n              return thDom;\n            }\n          }\n\n          function renderCol(col) {\n            var colDom = $(\"<td></td>\");\n            colDom.css(\"padding\", \"5px 20px\");\n            colDom.css(\"line-height\", \"20px\");\n            colDom.css(\"text-align\", \"center\");\n            colDom.css(\"border\", \"1px solid #ddd\");\n            colDom.css(\"color\", \"#888\");\n\n            if (typeof col == 'string' && col !== '') {\n              colDom.text(col);\n              return colDom;\n            }\n          }\n        }\n      };\n\n      var inner = renderDom();\n      excelDom.children().remove();\n      excelDom.append(inner);\n    };\n\n    removeEmptyCell(element.parameters.excelData);\n    element.render(element.parameters.excelData);\n\n    if (element.style) {\n      excelDom.css(element.style);\n    }\n\n    return excelDom;\n  };\n});"],"sourceRoot":"/source/"}