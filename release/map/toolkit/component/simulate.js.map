{"version":3,"sources":["toolkit/component/simulate.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","define","type","nodesDes","kpisDes","instances","ranges","svs","callback","result","date","Date","services","timeStamp","getTime","timeStampToStr","nDate","getFullYear","getMonth","getDate","renderData","index","loopNodes","node","loopKpis","inx","kpi","instance","range","val","max","min","ran","Math","round","random","calcRandom","newTime","sampleData","agentId","aggregatePeriod","aggregateStatus","aggregateType","arisingTime","compressCount","computeTaskId","dataSerialNumber","dataTime","insertTime","kpiCode","id","nodeId","notes","numberValue","quality","resourceId","stringValue","value","valueStr","push","i","dictionaryService","loadArray","loop","loadType","getDictValues","event","code","rs","el","some","itm","label","data","path","status","every","elem","loopInstance","ins1","loopInstance2","ins2","nextStep","renderData2D","aggr_type","loopAggrType","atype","valueCode","slice","renderData3D"],"mappings":"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","file":"toolkit/component/simulate.js","sourcesContent":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Created by leonlin on 16/11/3.\n */\ndefine([], function () {\n  return function (type, nodesDes, kpisDes, instances, ranges, svs, callback) {\n    var result = [];\n    var date = new Date();\n    var services = svs ? svs : {};\n    var timeStamp = date.getTime();\n\n    var timeStampToStr = function timeStampToStr(timeStamp) {\n      var nDate = new Date(timeStamp);\n      var year = nDate.getFullYear();\n      var month = nDate.getMonth();\n      var dt = nDate.getDate();\n      return year + \"-\" + month + \"-\" + dt;\n    };\n\n    var renderData = function renderData(index) {\n      var loopNodes = function loopNodes(node) {\n        var loopKpis = function loopKpis(inx, kpi) {\n          var renderData = function renderData(instance) {\n            var range;\n\n            if (ranges) {\n              range = ranges[inx];\n            }\n\n            var calcRandom = function calcRandom(range) {\n              if (range) {\n                var max = range[1];\n                var min = range[0];\n                var ran = max - min;\n                return Math.round((min + Math.random() * ran) * 10) / 10;\n              } else {\n                return Math.round(Math.random() * 100);\n              }\n            };\n\n            var val = calcRandom(range);\n            var newTime = timeStamp + index * 30 * 24 * 3600 * 1000;\n            var sampleData = {\n              \"agentId\": \"0\",\n              \"aggregatePeriod\": null,\n              \"aggregateStatus\": null,\n              \"aggregateType\": null,\n              \"arisingTime\": timeStampToStr(newTime),\n              \"compressCount\": 0,\n              \"computeTaskId\": 0,\n              \"dataSerialNumber\": 0,\n              \"dataTime\": null,\n              \"insertTime\": timeStampToStr(newTime),\n              \"kpiCode\": kpi.id,\n              \"nodeId\": node.id,\n              \"notes\": null,\n              \"numberValue\": val,\n              \"quality\": 0,\n              \"resourceId\": 0,\n              \"stringValue\": null,\n              \"value\": val,\n              \"valueStr\": val + \"\"\n            };\n\n            if (instance) {\n              sampleData.instance = instance;\n            }\n\n            result.push(sampleData);\n          };\n\n          var loopInstances = function loopInstances(instance) {\n            renderData(instance);\n          };\n\n          if (instances) {\n            for (var i in instances) {\n              loopInstances(instances[i]);\n            }\n          } else {\n            renderData();\n          }\n        };\n\n        for (var i in kpisDes) {\n          loopKpis(i, kpisDes[i]);\n        }\n      };\n\n      for (var i in nodesDes) {\n        loopNodes(nodesDes[i]);\n      }\n    };\n\n    var renderData2D = function renderData2D() {\n      var dictionaryService = services.dictionaryService;\n      var loadArray = [\"energyType\", \"industryShortType\"];\n\n      var nextStep = function nextStep() {\n        var loopNodes = function loopNodes(node) {\n          var loopKpis = function loopKpis(inx, kpi) {\n            var loopInstance = function loopInstance(ins1) {\n              var loopInstance2 = function loopInstance2(ins2) {\n                var range;\n\n                if (ranges) {\n                  range = ranges[inx];\n                }\n\n                var calcRandom = function calcRandom(range) {\n                  if (range) {\n                    var max = range[1];\n                    var min = range[0];\n                    var ran = max - min;\n                    return Math.round((min + Math.random() * ran) * 10) / 10;\n                  } else {\n                    return Math.round(Math.random() * 100);\n                  }\n                };\n\n                var val = calcRandom(range);\n                var newTime = timeStamp;\n                var sampleData = {\n                  \"agentId\": \"0\",\n                  \"aggregatePeriod\": null,\n                  \"aggregateStatus\": null,\n                  \"aggregateType\": null,\n                  \"arisingTime\": timeStampToStr(newTime),\n                  \"compressCount\": 0,\n                  \"computeTaskId\": 0,\n                  \"dataSerialNumber\": 0,\n                  \"dataTime\": null,\n                  \"insertTime\": timeStampToStr(newTime),\n                  \"kpiCode\": kpi.id,\n                  \"nodeId\": node.id,\n                  \"notes\": null,\n                  \"numberValue\": val,\n                  \"instance\": ins1.label + \",\" + ins2.label,\n                  \"quality\": 0,\n                  \"resourceId\": 0,\n                  \"stringValue\": null,\n                  \"value\": val,\n                  \"valueStr\": val + \"\"\n                };\n                result.push(sampleData);\n              };\n\n              for (var i in loadArray[1].data) {\n                loopInstance2(loadArray[1].data[i]);\n              }\n            };\n\n            for (var i in loadArray[0].data) {\n              loopInstance(loadArray[0].data[i]);\n            }\n          };\n\n          for (var i in kpisDes) {\n            loopKpis(i, kpisDes[i]);\n          }\n        };\n\n        for (var i in nodesDes) {\n          loopNodes(nodesDes[i]);\n        }\n\n        ;\n\n        if (typeof callback == \"function\") {\n          callback(result);\n        }\n      };\n\n      var loop = function loop(inx, loadType) {\n        var getEnergyType = function getEnergyType(event) {\n          var checkFinished = function checkFinished() {\n            var every = loadArray.every(function (elem) {\n              return _typeof(elem) == \"object\";\n            });\n\n            if (every) {\n              nextStep();\n            }\n          };\n\n          if (event.code == 0) {\n            var rs = [];\n\n            var loop = function loop(el) {\n              var some = rs.some(function (itm) {\n                return itm.label == el.label;\n              });\n\n              if (!some) {\n                rs.push(el);\n              }\n            };\n\n            for (var i in event.data) {\n              loop(event.data[i]);\n            }\n\n            loadArray[inx] = {\n              path: loadType,\n              status: \"finished\",\n              data: rs\n            };\n            checkFinished();\n          }\n        };\n\n        dictionaryService.getDictValues(loadType, getEnergyType);\n      };\n\n      for (var i in loadArray) {\n        loop(i, loadArray[i]);\n      }\n    };\n\n    var renderData3D = function renderData3D() {\n      var aggr_type;\n      var dictionaryService = services.dictionaryService;\n      var loadArray = [\"energyType\", \"industryShortType\"];\n\n      var nextStep = function nextStep() {\n        var loopNodes = function loopNodes(node) {\n          var loopKpis = function loopKpis(inx, kpi) {\n            var loopAggrType = function loopAggrType(atype) {\n              var loopInstance = function loopInstance(ins1) {\n                var loopInstance2 = function loopInstance2(ins2) {\n                  var range;\n\n                  if (ranges) {\n                    range = ranges[inx];\n                  }\n\n                  var calcRandom = function calcRandom(range) {\n                    if (range) {\n                      var max = range[1];\n                      var min = range[0];\n                      var ran = max - min;\n                      return Math.round((min + Math.random() * ran) * 10) / 10;\n                    } else {\n                      return Math.round(Math.random() * 100);\n                    }\n                  };\n\n                  var val = calcRandom(range);\n                  var newTime = timeStamp;\n                  var sampleData = {\n                    \"agentId\": \"0\",\n                    \"aggregatePeriod\": null,\n                    \"aggregateStatus\": null,\n                    \"aggregateType\": atype.valueCode,\n                    \"arisingTime\": timeStampToStr(newTime),\n                    \"compressCount\": 0,\n                    \"computeTaskId\": 0,\n                    \"dataSerialNumber\": 0,\n                    \"dataTime\": null,\n                    \"insertTime\": timeStampToStr(newTime),\n                    \"kpiCode\": kpi.id,\n                    \"nodeId\": node.id,\n                    \"notes\": null,\n                    \"numberValue\": val,\n                    \"instance\": ins2.label + \",\" + ins1.label,\n                    \"quality\": 0,\n                    \"resourceId\": 0,\n                    \"stringValue\": null,\n                    \"value\": val,\n                    \"valueStr\": val + \"\"\n                  };\n                  result.push(sampleData);\n                };\n\n                for (var i in loadArray[1].data) {\n                  loopInstance2(loadArray[1].data[i]);\n                }\n              };\n\n              for (var i in loadArray[0].data) {\n                loopInstance(loadArray[0].data[i]);\n              }\n            };\n\n            for (var i in aggr_type) {\n              loopAggrType(aggr_type[i]);\n            }\n\n            ;\n          };\n\n          for (var i in kpisDes) {\n            loopKpis(i, kpisDes[i]);\n          }\n        };\n\n        for (var i in nodesDes) {\n          loopNodes(nodesDes[i]);\n        }\n\n        ;\n\n        if (typeof callback == \"function\") {\n          callback(result);\n        }\n      };\n\n      var loop = function loop(inx, loadType) {\n        var getEnergyType = function getEnergyType(event) {\n          var checkFinished = function checkFinished() {\n            var every = loadArray.every(function (elem) {\n              return _typeof(elem) == \"object\";\n            });\n\n            if (every) {\n              nextStep();\n            }\n          };\n\n          if (event.code == 0) {\n            var rs = [];\n\n            var loop = function loop(el) {\n              var some = rs.some(function (itm) {\n                return itm.label == el.label;\n              });\n\n              if (!some) {\n                rs.push(el);\n              }\n            };\n\n            for (var i in event.data) {\n              loop(event.data[i]);\n            }\n\n            loadArray[inx] = {\n              path: loadType,\n              status: \"finished\",\n              data: rs\n            };\n            checkFinished();\n          }\n        };\n\n        dictionaryService.getDictValues(loadType, getEnergyType);\n      };\n\n      for (var i in loadArray) {\n        loop(i, loadArray[i]);\n      }\n\n      dictionaryService.getDictValues(\"aggregateType\", function (event) {\n        if (event.code == 0) {\n          aggr_type = event.data.slice(0, 2);\n        }\n      });\n    };\n\n    if (type == \"time\") {\n      for (var i = 0; i < 8; i++) {\n        renderData(i);\n      }\n    } else if (type == \"ci\") {\n      renderData(0);\n    } else if (type == \"ci_2d\") {\n      renderData2D();\n    } else if (type == \"ci_3d\") {\n      renderData3D();\n    }\n\n    ;\n    return result;\n  };\n});"],"sourceRoot":"/source/"}