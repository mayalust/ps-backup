{"version":3,"sources":["toolkit/component/simulate_time.js"],"names":["define","init","options","result","timeStampToStr","timeStamp","nDate","Date","year","getFullYear","month","getMonth","dat","getDate","hour","getHours","min","getMinutes","sec","getSeconds","startTime","getTime","period","frequency","nodesDes","kpisDes","range","getData","curTime","loopNodes","node","kpi","val","sampleData","i","max","ran","Math","round","random","calcRandom","agentId","aggregatePeriod","aggregateStatus","aggregateType","arisingTime","compressCount","computeTaskId","dataSerialNumber","dataTime","insertTime","kpiCode","id","nodeId","notes","numberValue","quality","resourceId","stringValue","value","valueStr","push","callback"],"mappings":"AAGAA,OAAO,GAAI,WACT,MAAO,CACLC,KAAM,SAAcC,GAClB,IAAIC,EAAS,GAETC,EAAiB,SAAwBC,GAC3C,IAAIC,EAAQ,IAAIC,KAAKF,EAAY,OAC7BG,EAAOF,EAAMG,cACbC,EAAQJ,EAAMK,WAAa,EAC3BC,EAAMN,EAAMO,UACZC,EAAOR,EAAMS,WACbC,EAAMV,EAAMW,aACZC,EAAMZ,EAAMa,aAuBhB,OArBIT,EAAQ,KACVA,EAAQ,IAAMA,GAGZE,EAAM,KACRA,EAAM,IAAMA,GAGVE,EAAO,KACTA,EAAO,IAAMA,GAGXE,EAAM,KACRA,EAAM,IAAMA,GAGVE,EAAM,KACRA,EAAM,IAAMA,GAIPV,EAAO,IAAME,EAAQ,IAAME,EAAM,IAAME,EAAO,IAAME,EAAM,IAAME,EAAM,aAwE/E,OAAO,IArEQ,SAAkBhB,GAC/B,IAAIkB,EAAYlB,EAAQkB,UAAUC,UAC9BC,EAASpB,EAAQoB,OACjBC,EAAYrB,EAAQqB,UACpBC,EAAWtB,EAAQsB,SACnBC,EAAUvB,EAAQuB,QAClBC,EAAQxB,EAAQwB,MA4DpB,OA1Dc,SAASC,EAAQC,GAC7B,GAAIA,EAAUR,EAAYE,EAAQ,CAChC,IAAIO,EAAY,SAAmBC,GACjC,IAAsCC,EAYhCC,EACAC,EAwBN,IAAK,IAAIC,KAAKT,EArCwBM,EAsCxBN,EAAQS,GA1BhBF,EAXa,SAAoBN,GACnC,GAAIA,EAAO,CACT,IAAIS,EAAMT,EAAM,GACZV,EAAMU,EAAM,GACZU,EAAMD,EAAMnB,EAChB,OAAOqB,KAAKC,MAAoC,IAA7BtB,EAAMqB,KAAKE,SAAWH,IAAa,GAEtD,OAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,UAIjBC,CAAWd,GACjBO,EAAa,CACfQ,QAAW,IACXC,gBAAmB,KACnBC,gBAAmB,KACnBC,cAAiB,KACjBC,YAAezC,EAAewB,GAC9BkB,cAAiB,EACjBC,cAAiB,EACjBC,iBAAoB,EACpBC,SAAY,KACZC,WAAc9C,EAAewB,GAC7BuB,QAAWpB,EAAIqB,GACfC,OAAUvB,EAAKsB,GACfE,MAAS,KACTC,YAAevB,EACfwB,QAAW,EACXC,WAAc,EACdC,YAAe,KACfC,MAAS3B,EACT4B,SAAY5B,EAAM,IAEpB7B,EAAO0D,KAAK5B,GAOS,mBAAZ6B,UACTA,SAAS3D,IAIb,IAAK,IAAI+B,KAAKV,EACZK,EAAUL,EAASU,IAGrBP,EAAQC,EAAUL,IAItBI,CAAQP,GACDjB,EAGF,CAAaD","file":"toolkit/component/simulate_time.js","sourcesContent":["/**\n * Created by leonlin on 16/11/3.\n */\ndefine([], function () {\n  return {\n    init: function init(options) {\n      var result = [];\n\n      var timeStampToStr = function timeStampToStr(timeStamp) {\n        var nDate = new Date(timeStamp - 8 * 3600 * 1000);\n        var year = nDate.getFullYear();\n        var month = nDate.getMonth() + 1;\n        var dat = nDate.getDate();\n        var hour = nDate.getHours();\n        var min = nDate.getMinutes();\n        var sec = nDate.getSeconds();\n\n        if (month < 10) {\n          month = \"0\" + month;\n        }\n\n        if (dat < 10) {\n          dat = \"0\" + dat;\n        }\n\n        if (hour < 10) {\n          hour = \"0\" + hour;\n        }\n\n        if (min < 10) {\n          min = \"0\" + min;\n        }\n\n        if (sec < 10) {\n          sec = \"0\" + sec;\n        }\n\n        ;\n        return year + \"-\" + month + \"-\" + dat + \"T\" + hour + \":\" + min + \":\" + sec + \".000+0000\";\n      };\n\n      var simulate = function simulate(options) {\n        var startTime = options.startTime.getTime();\n        var period = options.period;\n        var frequency = options.frequency;\n        var nodesDes = options.nodesDes;\n        var kpisDes = options.kpisDes;\n        var range = options.range;\n\n        var getData = function getData(curTime) {\n          if (curTime - startTime < period) {\n            var loopNodes = function loopNodes(node) {\n              var loopKpis = function loopKpis(inx, kpi) {\n                var calcRandom = function calcRandom(range) {\n                  if (range) {\n                    var max = range[1];\n                    var min = range[0];\n                    var ran = max - min;\n                    return Math.round((min + Math.random() * ran) * 10) / 10;\n                  } else {\n                    return Math.round(Math.random() * 100);\n                  }\n                };\n\n                var val = calcRandom(range);\n                var sampleData = {\n                  \"agentId\": \"0\",\n                  \"aggregatePeriod\": null,\n                  \"aggregateStatus\": null,\n                  \"aggregateType\": null,\n                  \"arisingTime\": timeStampToStr(curTime),\n                  \"compressCount\": 0,\n                  \"computeTaskId\": 0,\n                  \"dataSerialNumber\": 0,\n                  \"dataTime\": null,\n                  \"insertTime\": timeStampToStr(curTime),\n                  \"kpiCode\": kpi.id,\n                  \"nodeId\": node.id,\n                  \"notes\": null,\n                  \"numberValue\": val,\n                  \"quality\": 0,\n                  \"resourceId\": 0,\n                  \"stringValue\": null,\n                  \"value\": val,\n                  \"valueStr\": val + \"\"\n                };\n                result.push(sampleData);\n              };\n\n              for (var i in kpisDes) {\n                loopKpis(i, kpisDes[i]);\n              }\n\n              if (typeof callback == \"function\") {\n                callback(result);\n              }\n            };\n\n            for (var i in nodesDes) {\n              loopNodes(nodesDes[i]);\n            }\n\n            getData(curTime + frequency);\n          }\n        };\n\n        getData(startTime);\n        return result;\n      };\n\n      return new simulate(options);\n    }\n    /**\n    return function(type, nodesDes, kpisDes, simulateFn, callback) {\n     var result = [];\n     var date = new Date();\n     var timeStamp = date.getTime();\n     var renderData = function(index){\n       var startTime = simulateFn.startTime.getTime();\n       var period = simulateFn.period;\n       var frequency = simulateFn.frequency;\n       var range = simulateFn.range;\n       var getData = function(curTime){\n         if(curTime - startTime < period){\n           var loopNodes = function(node){\n             var loopKpis = function(inx, kpi){\n               var calcRandom = function(range){\n                 if(range){\n                   var max = range[1];\n                   var min = range[0];\n                   var ran = (max - min);\n                   return Math.round((min + Math.random() * ran) * 10) / 10;\n                 } else {\n                   return Math.round(Math.random() * 100);\n                 }\n               };\n               var val = calcRandom(range);\n               var sampleData = {\n                 \"agentId\": \"0\",\n                 \"aggregatePeriod\":null,\n                 \"aggregateStatus\":null,\n                 \"aggregateType\": null,\n                 \"arisingTime\": timeStampToStr(curTime),\n                 \"compressCount\": 0,\n                 \"computeTaskId\": 0,\n                 \"dataSerialNumber\": 0,\n                 \"dataTime\": null,\n                 \"insertTime\": timeStampToStr(curTime),\n                 \"kpiCode\": kpi.id,\n                 \"nodeId\" : node.id,\n                 \"notes\" : null,\n                 \"numberValue\": val,\n                 \"quality\": 0,\n                 \"resourceId\": 0,\n                 \"stringValue\": null,\n                 \"value\": val,\n                 \"valueStr\": val + \"\"\n               };\n               result.push(sampleData);\n             };\n             for(var i in kpisDes){\n               loopKpis(i, kpisDes[i])\n             }\n             if(typeof callback == \"function\"){\n               callback(result);\n             }\n           };\n           for(var i in nodesDes){\n             loopNodes(nodesDes[i])\n           }\n           getData(curTime + frequency);\n         }\n       };\n       getData(startTime);\n     };\n     var renderData2D = function(){\n       var dictionaryService = services.dictionaryService;\n       var loadArray = [\"energyType\", \"industryShortType\"];\n       var nextStep = function(){\n         var loopNodes = function(node){\n           var loopKpis = function(inx, kpi){\n             var loopInstance = function(ins1){\n               var loopInstance2 = function(ins2){\n                 var range;\n                 if(ranges){\n                   range = ranges[inx];\n                 }\n                 var calcRandom = function(range){\n                   if(range){\n                     var max = range[1];\n                     var min = range[0];\n                     var ran = (max - min);\n                     return Math.round((min + Math.random() * ran) * 10) / 10;\n                   } else {\n                     return Math.round(Math.random() * 100);\n                   }\n                 };\n                 var val = calcRandom(range);\n                 var newTime = timeStamp;\n                 var sampleData = {\n                   \"agentId\": \"0\",\n                   \"aggregatePeriod\":null,\n                   \"aggregateStatus\":null,\n                   \"aggregateType\": null,\n                   \"arisingTime\": timeStampToStr(newTime),\n                   \"compressCount\": 0,\n                   \"computeTaskId\": 0,\n                   \"dataSerialNumber\": 0,\n                   \"dataTime\": null,\n                   \"insertTime\": timeStampToStr(newTime),\n                   \"kpiCode\": kpi.id,\n                   \"nodeId\" : node.id,\n                   \"notes\" : null,\n                   \"numberValue\": val,\n                   \"instance\":ins1.label + \",\" + ins2.label,\n                   \"quality\": 0,\n                   \"resourceId\": 0,\n                   \"stringValue\": null,\n                   \"value\": val,\n                   \"valueStr\": val + \"\"\n                 };\n                 result.push(sampleData);\n               };\n               for(var i in loadArray[1].data){\n                 loopInstance2(loadArray[1].data[i]);\n               }\n             };\n             for(var i in loadArray[0].data){\n               loopInstance(loadArray[0].data[i]);\n             }\n           };\n           for(var i in kpisDes){\n             loopKpis(i, kpisDes[i])\n           }\n         };\n         for(var i in nodesDes){\n           loopNodes(nodesDes[i])\n         };\n         if(typeof callback == \"function\"){\n           callback(result);\n         }\n       };\n       var loop = function(inx, loadType){\n         var getEnergyType = function(event){\n           var checkFinished = function(){\n             var every = loadArray.every(function(elem){\n               return typeof elem == \"object\"\n             });\n             if(every){\n               nextStep();\n             }\n           };\n           if(event.code == 0){\n             var rs = [];\n             var loop = function(el){\n               var some = rs.some(function(itm){\n                 return itm.label == el.label;\n               });\n               if(!some){\n                 rs.push(el)\n               }\n             }\n             for(var i in event.data){\n               loop(event.data[i]);\n             }\n             loadArray[inx] = {\n               path : loadType,\n               status : \"finished\",\n               data : rs\n             };\n             checkFinished();\n           }\n         };\n         dictionaryService.getDictValues(loadType, getEnergyType);\n       };\n       for(var i in loadArray){\n         loop(i, loadArray[i])\n       }\n     };\n     var renderData3D = function(){\n       var aggr_type;\n       var dictionaryService = services.dictionaryService;\n       var loadArray = [\"energyType\", \"industryShortType\"];\n       var nextStep = function(){\n         var loopNodes = function(node){\n           var loopKpis = function(inx, kpi){\n             var loopAggrType = function(atype){\n               var loopInstance = function(ins1){\n                 var loopInstance2 = function(ins2){\n                   var range;\n                   if(ranges){\n                     range = ranges[inx];\n                   }\n                   var calcRandom = function(range){\n                     if(range){\n                       var max = range[1];\n                       var min = range[0];\n                       var ran = (max - min);\n                       return Math.round((min + Math.random() * ran) * 10) / 10;\n                     } else {\n                       return Math.round(Math.random() * 100);\n                     }\n                   };\n                   var val = calcRandom(range);\n                   var newTime = timeStamp;\n                   var sampleData = {\n                     \"agentId\": \"0\",\n                     \"aggregatePeriod\":null,\n                     \"aggregateStatus\":null,\n                     \"aggregateType\": atype.valueCode,\n                     \"arisingTime\": timeStampToStr(newTime),\n                     \"compressCount\": 0,\n                     \"computeTaskId\": 0,\n                     \"dataSerialNumber\": 0,\n                     \"dataTime\": null,\n                     \"insertTime\": timeStampToStr(newTime),\n                     \"kpiCode\": kpi.id,\n                     \"nodeId\" : node.id,\n                     \"notes\" : null,\n                     \"numberValue\": val,\n                     \"instance\":ins2.label + \",\" + ins1.label,\n                     \"quality\": 0,\n                     \"resourceId\": 0,\n                     \"stringValue\": null,\n                     \"value\": val,\n                     \"valueStr\": val + \"\"\n                   };\n                   result.push(sampleData);\n                 };\n                 for(var i in loadArray[1].data){\n                   loopInstance2(loadArray[1].data[i]);\n                 }\n               };\n               for(var i in loadArray[0].data){\n                 loopInstance(loadArray[0].data[i]);\n               }\n             };\n             for(var i in aggr_type){\n               loopAggrType(aggr_type[i])\n             };\n           };\n           for(var i in kpisDes){\n             loopKpis(i, kpisDes[i])\n           }\n         };\n         for(var i in nodesDes){\n           loopNodes(nodesDes[i])\n         };\n         if(typeof callback == \"function\"){\n           callback(result);\n         }\n       };\n       var loop = function(inx, loadType){\n         var getEnergyType = function(event){\n           var checkFinished = function(){\n             var every = loadArray.every(function(elem){\n               return typeof elem == \"object\"\n             });\n             if(every){\n               nextStep();\n             }\n           };\n           if(event.code == 0){\n             var rs = [];\n             var loop = function(el){\n               var some = rs.some(function(itm){\n                 return itm.label == el.label;\n               });\n               if(!some){\n                 rs.push(el)\n               }\n             }\n             for(var i in event.data){\n               loop(event.data[i]);\n             }\n             loadArray[inx] = {\n               path : loadType,\n               status : \"finished\",\n               data : rs\n             };\n             checkFinished();\n           }\n         };\n         dictionaryService.getDictValues(loadType, getEnergyType);\n       };\n       for(var i in loadArray){\n         loop(i, loadArray[i])\n       }\n         dictionaryService.getDictValues(\"aggregateType\", function(event){\n         if(event.code == 0){\n           aggr_type = event.data.slice(0,2);\n         }\n       });\n     };\n     if(type == \"time\"){\n       renderData();\n     } else if(type == \"ci\"){\n       renderData(0);\n     } else if(type == \"ci_2d\"){\n       renderData2D();\n     } else if(type == \"ci_3d\"){\n       renderData3D();\n     };\n     return result;\n    }*/\n\n  };\n});"],"sourceRoot":"/source/"}