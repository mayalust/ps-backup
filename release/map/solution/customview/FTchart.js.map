{"version":3,"sources":["solution/customview/FTchart.js"],"names":["define","on","init","event","toString","Object","prototype","target","global","kpi","type","$getCurrentResource","resource","ci","id","sensor","getValue","time","kpiId","instance","renderROWEchart","dateHandler","params","kpiCodes","isRealTimeData","nodeIds","startTime","getUTCDateString","endTime","transformerType","includeInstance","queryInstances","showLoading","hideNoData","postService","returnData","hideLoading","data","length","eval","value","dataList","valueList","i","setValue","trigger","render","sub","x0","option","grid","top","width","left","height","tooltip","alwaysShowContent","triggerOn","xAxis","max","axisLabel","show","axisPointer","label","formatter","val","seriesData","backgroundColor","lineStyle","color","handle","size","margin","snap","gridIndex","yAxis","splitLine","toolbox","feature","dataZoom","yAxisIndex","restore","saveAsImage","name","iconStyle","normal","borderColor","emphasis","series","showSymbol","markLine","undefined","markPoint","xAxisIndex","opacity","showNoData"],"mappings":"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","file":"solution/customview/FTchart.js","sourcesContent":["define({\n  on: {\n    init: function init(event) {\n      var toString = Object.prototype.toString;\n      var target = event.target;\n      var global = event.global;\n      var kpi;\n      var type = 0;\n      target.$getCurrentResource(function (resource) {\n        var ci = resource ? [resource.id] : [];\n        var sensor = target.getValue(\"global/sensor\");\n        var time = target.getValue(\"global/time\");\n        var kpi = sensor ? [sensor.kpiId || sensor.id] : [];\n        var instance = sensor ? sensor.instance : \"\";\n\n        var renderROWEchart = function renderROWEchart(ci, kpi, time) {\n          time = time || target.dateHandler();\n          var params = {\n            time: 0,\n            kpiCodes: kpi || [],\n            isRealTimeData: false,\n            nodeIds: ci || [],\n            startTime: time.getUTCDateString(),\n            endTime: time.getUTCDateString(),\n            transformerType: \"ROW\",\n            includeInstance: true,\n            queryInstances: instance\n          };\n          target.showLoading();\n          target.hideNoData();\n          event.target.postService(\"kpiDataFlexService\", \"getKpiValueList\", [\"kpi\", params], function (returnData) {\n            target.hideLoading();\n\n            if (returnData.data.length > 0) {\n              var data = eval(returnData.data[0].value);\n              var dataList = data[0];\n              var valueList = data[1];\n\n              for (var i in valueList) {\n                valueList[i] = [dataList[i], valueList[i]];\n              }\n\n              ;\n              target.setValue(\"x0\", dataList[0]);\n              target.setValue(\"y0\", valueList[0][1]);\n              target.setValue(\"x1\", dataList[180]);\n              target.setValue(\"y1\", valueList[180][1]);\n              target.trigger(\"handleChange\");\n\n              var render = function render(init, sub) {\n                var x0 = target.getValue(\"x0\") || 0;\n                var x1 = target.getValue(\"x1\") || 180;\n                var x2 = 90;\n                var markLine = undefined;\n                var markPoint = undefined;\n                var option = {\n                  grid: [{\n                    \"top\": \"10%\",\n                    \"width\": \"90%\",\n                    \"left\": \"5%\",\n                    \"height\": \"65%\"\n                  }, {\n                    \"top\": \"10%\",\n                    \"width\": \"90%\",\n                    \"left\": \"5%\",\n                    \"height\": \"65%\"\n                  }, {\n                    \"top\": \"10%\",\n                    \"width\": \"90%\",\n                    \"left\": \"5%\",\n                    \"height\": \"65%\"\n                  }],\n                  tooltip: {\n                    \"alwaysShowContent\": true,\n                    trigger: 'item',\n                    triggerOn: 'none'\n                  },\n                  xAxis: [{\n                    type: \"value\",\n                    max: \"dataMax\",\n                    axisLabel: {\n                      show: true\n                    },\n                    axisPointer: {\n                      label: {\n                        formatter: function formatter(val) {\n                          if (val.seriesData[0]) {\n                            // \n                            target.setValue(\"x0\", val.value);\n\n                            if (val.seriesData[0].data) {\n                              target.setValue(\"y0\", val.seriesData[0].data[1]);\n                            }\n\n                            ;\n                            target.trigger(\"handleChange\");\n\n                            if (type == 1) {\n                              if (init == false) {\n                                render();\n                              }\n\n                              ;\n                              init = false;\n                            }\n\n                            ;\n                          }\n\n                          return val.value;\n                        },\n                        backgroundColor: \"#666\"\n                      },\n                      lineStyle: {\n                        color: \"#2285d3\",\n                        width: 2\n                      },\n                      handle: {\n                        show: true,\n                        size: 30,\n                        margin: 40\n                      },\n                      \"value\": x0,\n                      snap: true\n                    }\n                  }, {\n                    type: \"value\",\n                    max: \"dataMax\",\n                    axisLabel: {\n                      show: false\n                    },\n                    axisPointer: {\n                      label: {\n                        formatter: function formatter(val) {\n                          if (val.seriesData[0]) {\n                            // \n                            target.setValue(\"x1\", val.value);\n\n                            if (val.seriesData[0].data) {\n                              target.setValue(\"y1\", val.seriesData[0].data[1]);\n                            }\n\n                            ;\n                            target.trigger(\"handleChange\");\n                          }\n\n                          return val.value;\n                        },\n                        backgroundColor: \"#888\"\n                      },\n                      lineStyle: {\n                        color: \"#ff3a3a\",\n                        width: 2\n                      },\n                      handle: {\n                        show: true,\n                        size: 30,\n                        margin: 40\n                      },\n                      \"value\": 180,\n                      snap: true\n                    },\n                    gridIndex: 1\n                  }],\n                  yAxis: [{\n                    //show : false,\n                    type: \"value\",\n                    splitLine: {\n                      show: true\n                    }\n                  }, {\n                    type: \"value\",\n                    splitLine: {\n                      show: false\n                    },\n                    gridIndex: 1\n                  }],\n                  toolbox: {\n                    feature: {\n                      dataZoom: {\n                        yAxisIndex: false\n                      },\n                      restore: {},\n                      saveAsImage: {\n                        type: \"png\",\n                        name: \"振动分析-时域分析图\",\n                        backgroundColor: \"#0b2232\"\n                      }\n                    },\n                    iconStyle: {\n                      normal: {\n                        borderColor: \"#fff\"\n                      },\n                      emphasis: {\n                        borderColor: \"#e6e2e2\"\n                      }\n                    }\n                  },\n                  series: [{\n                    type: 'line',\n                    showSymbol: false,\n                    data: valueList,\n                    markLine: markLine,\n                    markPoint: markPoint,\n                    xAxisIndex: 1,\n                    yAxisIndex: 1,\n                    lineStyle: {\n                      normal: {\n                        opacity: 1\n                      }\n                    }\n                  }, {\n                    type: 'line',\n                    showSymbol: false,\n                    lineStyle: {\n                      normal: {\n                        opacity: 0\n                      }\n                    },\n                    data: valueList\n                  }]\n                };\n                var ins = target.render(option);\n                ins.on(\"mousemove\", function (event) {});\n              };\n\n              render();\n              /* target.on(\"renderChart\", function () {\n                render(undefined, \"renderChart\");\n              }) */\n            } else {\n              target.showNoData();\n            }\n          });\n        };\n\n        renderROWEchart(ci, kpi, time);\n      });\n    }\n  }\n});"],"sourceRoot":"/source/"}