{"version":3,"sources":["app-oc/js/directives/treeview-dom.js"],"names":["define","directives","initDirective","$timeout","restrict","controller","$scope","$element","$attrs","domMain","$on","Event","FUNCTIONINFOSINIT","event","args","checkcounts","baseNode","treeview","levels","data","treeData","showTags","showIcon","showCheckbox","statusCheck","onNodeChecked","node","checkableNodes","findCheckableNodess","functionCode","length","belong","changeChecked","changeNodesState","onNodeUnchecked","silent","flg","$","is","val","ignoreCase","exactMatch","on","e","require","ztree","fn","zTree","init","setting","$compile","link","scope","iElem","iAttr","ngmodel","treeview1","domainListTree","getDomainList","domains","gatewaydomainpath","i","domainPath","onNodeSelected","attr","popover","model","arr","split","name","change","html","trigger","placement","siblings","setTimeout","DOMAININFOSINIT","domainID","changeDomainState"],"mappings":"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","file":"app-oc/js/directives/treeview-dom.js","sourcesContent":["define(['directives/directives'], function (directives) {\n  'use strict';\n\n  directives.initDirective('treeviewCheckable', function ($timeout) {\n    return {\n      restrict: 'A',\n      controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n        var domMain = $element;\n        var tree;\n        $scope.$on(Event.FUNCTIONINFOSINIT, function (event, args) {\n          if (tree) {}\n\n          var checkcounts = 0;\n          var baseNode = args.baseNode;\n          tree = domMain.treeview({\n            levels: 99,\n            data: args.treeData,\n            showTags: true,\n            showIcon: false,\n            showCheckbox: args.statusCheck,\n            onNodeChecked: function onNodeChecked(event, node) {\n              if (checkcounts == 0) {\n                var checkableNodes = findCheckableNodess(node.functionCode);\n                checkcounts = checkableNodes.length - 1;\n                node.belong = 1;\n                baseNode[node.functionCode] = true;\n                changeChecked(checkableNodes, true);\n              } else {\n                node.belong = 1;\n                baseNode[node.functionCode] = true;\n                checkcounts--;\n              }\n\n              if (checkcounts == 0) {\n                $scope.changeNodesState(baseNode, true);\n              }\n            },\n            onNodeUnchecked: function onNodeUnchecked(event, node) {\n              if (checkcounts == 0) {\n                var checkableNodes = findCheckableNodess(node.functionCode);\n                checkcounts = checkableNodes.length - 1;\n                node.belong = 0;\n                baseNode[node.functionCode] = false;\n                changeChecked(checkableNodes, false);\n              } else {\n                node.belong = 0;\n                baseNode[node.functionCode] = false;\n                checkcounts--;\n              }\n\n              if (checkcounts == 0) {\n                $scope.changeNodesState(baseNode, false);\n              }\n            }\n          });\n          domMain.treeview('expandAll', {\n            levels: 99,\n            silent: true\n          });\n        });\n\n        var changeChecked = function changeChecked(checkableNodes, flg) {\n          if (flg) {\n            domMain.treeview('checkNode', [checkableNodes, {\n              silent: $('#chk-check-silent').is(':checked')\n            }]);\n          } else {\n            domMain.treeview('uncheckNode', [checkableNodes, {\n              silent: $('#chk-check-silent').is(':checked')\n            }]);\n          }\n        };\n\n        var findCheckableNodess = function findCheckableNodess(val) {\n          return domMain.treeview('search', [val, {\n            ignoreCase: false,\n            exactMatch: false\n          }]);\n        }; // Check/uncheck all\n\n\n        $('#btn-check-all').on('click', function (e) {\n          domMain.treeview('checkAll', {\n            silent: $('#chk-check-silent').is(':checked')\n          });\n        });\n        $('#btn-uncheck-all').on('click', function (e) {\n          domMain.treeview('uncheckAll', {\n            silent: $('#chk-check-silent').is(':checked')\n          });\n        });\n      }]\n    };\n  });\n  directives.initDirective('ztreeCheckable', function ($timeout) {\n    return {\n      restrict: 'A',\n      controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n        var domMain = $element;\n        var tree;\n        $scope.$on(Event.FUNCTIONINFOSINIT + \"_ztree\", function (event, args) {\n          // var init = function(n) {\n          require(['ztree', 'ztree-excheck'], function (ztree) {\n            $.fn.zTree.init(domMain, args.setting, args.data);\n          }); // }\n          // init(args.data);\n\n        });\n      }]\n    };\n  });\n  directives.initDirective('domainPicker1', function ($compile, $timeout) {\n    return {\n      restrict: 'A',\n      link: function link(scope, iElem, iAttr, ngmodel) {\n        require(['bootstrap-treeview'], function (treeview) {\n          var getDomainList = function getDomainList(domains) {\n            if (iAttr.gatewaydomainpath) {\n              for (var i in domains) {\n                if (domains[i].domainPath == iAttr.gatewaydomainpath) return [domains[i]];else return getDomainList(domains[i].domains);\n              }\n            } else {\n              return domains;\n            }\n          };\n\n          iElem.on('shown.bs.popover', function () {\n            var treeview1 = $('#treeview1');\n            $compile(treeview1)(scope);\n            var domainListTree = getDomainList(scope.domainListTree);\n            treeview1.treeview({\n              data: domainListTree,\n              onNodeSelected: function onNodeSelected(event, node) {\n                if (node.domainPath != \"\") {\n                  iElem.attr(\"domainPath\", node.domainPath);\n                  iElem.popover(\"hide\");\n\n                  if (iAttr.model) {\n                    var arr = iAttr.model.split(\"\\.\");\n                    var model = scope;\n\n                    for (var i in arr) {\n                      if (model) {\n                        if (i == arr.length - 1) {\n                          model[arr[i]] = node.domainPath;\n                          break;\n                        }\n\n                        model = model[arr[i]];\n                      }\n                    }\n                  }\n\n                  iElem.val(node.name).change();\n                }\n              }\n            });\n          });\n        });\n      },\n      controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n        var domMain = $element;\n        $element.attr(\"readonly\", true);\n        $element.data('content', \"<div id ='treeview1' slim-scroll height='220px'></div>\");\n        $element.popover({\n          html: true,\n          trigger: 'manual',\n          placement: 'auto bottom'\n        });\n        $element.on(\"click\", function () {\n          $element.popover(\"show\");\n          $element.siblings(\".popover\").on(\"mouseleave\", function () {\n            $element.popover('hide');\n          });\n        });\n        $element.on(\"mouseleave\", function () {\n          setTimeout(function () {\n            if (!$(\".popover:hover\").length) {\n              $element.popover(\"hide\");\n            }\n          }, 100);\n        });\n      }]\n    };\n  });\n  directives.initDirective('domaintreeCheckable', function ($timeout) {\n    return {\n      restrict: 'A',\n      controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n        var domMain = $element;\n        var tree;\n        $scope.$on(Event.DOMAININFOSINIT, function (event, args) {\n          if (tree) {}\n\n          var checkcounts = 0;\n          var baseNode = args.baseNode;\n          tree = domMain.treeview({\n            levels: 1,\n            data: args.treeData,\n            showTags: true,\n            showIcon: false,\n            showCheckbox: true,\n            onNodeChecked: function onNodeChecked(event, node) {\n              if (checkcounts == 0) {\n                var checkableNodes = findCheckableNodess(node.domainID);\n                checkcounts = checkableNodes.length - 1;\n                node.belong = 1;\n                baseNode[node.domainID] = true;\n                changeChecked(checkableNodes, true);\n              } else {\n                node.belong = 1;\n                baseNode[node.domainID] = true;\n                checkcounts--;\n              }\n\n              if (checkcounts == 0) {\n                $scope.changeDomainState(baseNode, true);\n              }\n            },\n            onNodeUnchecked: function onNodeUnchecked(event, node) {\n              if (checkcounts == 0) {\n                var checkableNodes = findCheckableNodess(node.domainID);\n                checkcounts = checkableNodes.length - 1;\n                node.belong = 0;\n                baseNode[node.domainID] = false;\n                changeChecked(checkableNodes, false);\n              } else {\n                node.belong = 0;\n                baseNode[node.domainID] = false;\n                checkcounts--;\n              }\n\n              if (checkcounts == 0) {\n                $scope.changeDomainState(baseNode, false);\n              }\n            }\n          });\n        });\n\n        var changeChecked = function changeChecked(checkableNodes, flg) {\n          if (flg) {\n            domMain.treeview('checkNode', [checkableNodes, {\n              silent: $('#chk-check-silent').is(':checked')\n            }]);\n          } else {\n            domMain.treeview('uncheckNode', [checkableNodes, {\n              silent: $('#chk-check-silent').is(':checked')\n            }]);\n          }\n        };\n\n        var findCheckableNodess = function findCheckableNodess(val) {\n          return domMain.treeview('search', [val, {\n            ignoreCase: false,\n            exactMatch: false\n          }]);\n        }; // Check/uncheck all\n\n\n        $('#btn-check-all').on('click', function (e) {\n          domMain.treeview('checkAll', {\n            silent: $('#chk-check-silent').is(':checked')\n          });\n        });\n        $('#btn-uncheck-all').on('click', function (e) {\n          domMain.treeview('uncheckAll', {\n            silent: $('#chk-check-silent').is(':checked')\n          });\n        });\n      }]\n    };\n  });\n});"],"sourceRoot":"/source/"}