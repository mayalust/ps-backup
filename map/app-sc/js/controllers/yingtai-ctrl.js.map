{"version":3,"sources":["app-sc/js/controllers/yingtai-ctrl.js"],"names":["define","controllers","initController","$scope","$rootScope","route","resourceUIService","kpiDataService","SwSocket","Info","userLoginUIService","growl","$routeParams","nodeId","console","info","current","params","init","$on","event","expertCurveHeader","MyceliaData","get","getKpiData","modelId","getKpisByModelId","returnObj","code","i","data","label","soilTemKpi","getKpiValueList","id","airHumKpi","airTemKpi","formatDate","str","Date","Format","GetDateCategoryStrByLabel","type","kpi","p","statisticType","category","nodeIds","kpiCodes","isRealTimeData","timePeriod","startTime","endTime","timeRange","queryInstances","getKpiHierarchyValueList","optionName","xData","yData","referDataTop","referDataBottom","$","each","fieldLabels","arr","value","recordList","push","m","length","n","log","option","getOption","require","echart","setOption","title","text","tooltip","trigger","legend","toolbox","show","feature","xAxis","boundaryGap","yAxis","axisLabel","formatter","series","name","lineStyle","normal","color","getResourceById","config","paths","echarts"],"mappings":"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","file":"app-sc/js/controllers/yingtai-ctrl.js","sourcesContent":["define(['controllers/controllers'], function (controllers) {\n  'use strict';\n\n  controllers.initController('ExpertCurveCtrl', ['$scope', '$rootScope', '$route', 'resourceUIService', 'kpiDataService', 'SwSocket', 'Info', 'userLoginUIService', 'growl', '$routeParams', function ($scope, $rootScope, route, resourceUIService, kpiDataService, SwSocket, Info, userLoginUIService, growl, $routeParams) {\n    console.info(\"映泰专家曲线\");\n    var nodeId;\n\n    if (route.current) {\n      nodeId = route.current.params.nodeId;\n      init();\n    } else {\n      $rootScope.$on('$locationChangeSuccess', locationChangeSuccess);\n    }\n\n    function locationChangeSuccess(event) {\n      if (route.current) {\n        nodeId = route.current.params.nodeId;\n        init();\n      }\n    }\n\n    $scope.expertCurveHeader = [];\n    $scope.MyceliaData = [];\n    var info = Info.get(\"localdb/expertcurve.json\", function (info) {\n      $scope.expertCurveHeader = info.expertCurveHeader;\n      $scope.MyceliaData = info.MyceliaData;\n    }); //获取映泰模型\n\n    function getModel() {\n      resourceUIService.getResourceById(nodeId, function (returnObj) {\n        if (returnObj.code == 0) {\n          var modelId = returnObj.data.modelId;\n          $scope.nodeIds = [nodeId];\n          getKpiData(modelId);\n        }\n      });\n      /*\r\n      resourceUIService.getDevices(function(returnObj) {\r\n        if (returnObj.code == 0) {\r\n          console.log(\"1Step\");\r\n          var modelId = returnObj.data[0].modelId;\r\n          $scope.nodeIds = [returnObj.data[0].id];\r\n          //获取KPI数据\r\n          getKpiData(modelId);\r\n        }\r\n      });\r\n      */\n    }\n    /**\r\n     * 获取KPI数据\r\n     * \r\n     */\n\n\n    var getKpiData = function getKpiData(modelId) {\n      resourceUIService.getKpisByModelId(modelId, function (returnObj) {\n        if (returnObj.code == 0) {\n          for (var i in returnObj.data) {\n            if (returnObj.data[i].label == \"土壤湿度\") {\n              //土壤湿度\n              $scope.soilTemKpi = returnObj.data[i];\n              getKpiValueList(4, returnObj.data[i].id);\n            } else if (returnObj.data[i].label == \"土壤温度\") {\n              //土壤温度\n              $scope.soilTemKpi = returnObj.data[i];\n              getKpiValueList(3, returnObj.data[i].id);\n            } else if (returnObj.data[i].label == \"空气湿度\") {\n              //湿度\n              $scope.airHumKpi = returnObj.data[i];\n              getKpiValueList(2, returnObj.data[i].id);\n            } else if (returnObj.data[i].label == \"空气温度\") {\n              //温度\n              $scope.airTemKpi = returnObj.data[i]; // $scope.kpiIdArr = [returnObj.data[i].id];\n\n              getKpiValueList(1, returnObj.data[i].id);\n            }\n          }\n        }\n      });\n    }; //格式化时间\n\n\n    var formatDate = function formatDate(str) {\n      if (str) {\n        str = new Date(str).Format(GetDateCategoryStrByLabel());\n      }\n\n      return str;\n    };\n\n    function getKpiValueList(type, kpi) {\n      var kpiQueryModel = {\n        \"statisticType\": \"\",\n        \"category\": \"time\",\n        //ci 是实时最新当前数据，time 是当前获取到的数据\n        \"nodeIds\": $scope.nodeIds,\n        //设备 ID  List\n        \"kpiCodes\": [kpi],\n        //KPI ID  List\n        \"isRealTimeData\": true,\n        //是否是实时数据\n        \"timePeriod\": 10800000,\n        //获取数据时间周期(3小时)\n        \"startTime\": \"\",\n        //获取数据开始时间\n        \"endTime\": \"\",\n        //获取数据结束时间\n        \"timeRange\": \"\",\n        //暂时没用\n        \"queryInstances\": null\n      };\n      var p = [\"kpi\", kpiQueryModel];\n      kpiDataService.getKpiHierarchyValueList(p, function (returnObj) {\n        if (returnObj.code == 0) {\n          var xData = [];\n          var yData = [];\n          var optionName;\n          var referDataTop = [];\n          var referDataBottom = [];\n          $.each(returnObj.data.fieldLabels, function (arr, value) {\n            optionName = value;\n          });\n\n          for (var i in returnObj.data.recordList) {\n            $.each(returnObj.data.recordList[i], function (arr, value) {\n              if (arr != 'category') {\n                yData.push(value);\n              } else {\n                xData.push(formatDate(value));\n              }\n            });\n          }\n\n          if (type == 1) {\n            //空气温度\n            for (var m = 0; m < yData.length; m++) {\n              referDataTop.push(30);\n            }\n\n            for (var n = 0; n < yData.length; n++) {\n              referDataBottom.push(20);\n            }\n\n            console.log();\n            var option = getOption(optionName, xData, yData, referDataTop, referDataBottom);\n\n            require(['echarts'], function (echart) {\n              var target1 = echart.init($(\"#airTem\")[0]);\n              target1.setOption(option);\n            });\n          } else if (type == 2) {\n            //空气湿度\n            for (var m = 0; m < xData.length; m++) {\n              referDataTop.push(70);\n            }\n\n            for (var n = 0; n < xData.length; n++) {\n              referDataBottom.push(60);\n            }\n\n            var option = getOption(optionName, xData, yData, referDataTop, referDataBottom);\n\n            require(['echarts'], function (echart) {\n              var target1 = echart.init($(\"#airHum\")[0]);\n              target1.setOption(option);\n            });\n          } else if (type == 3) {\n            //土壤温度\n            for (var m = 0; m < xData.length; m++) {\n              referDataTop.push(25);\n            }\n\n            for (var n = 0; n < xData.length; n++) {\n              referDataBottom.push(21);\n            }\n\n            var option = getOption(optionName, xData, yData, referDataTop, referDataBottom);\n\n            require(['echarts'], function (echart) {\n              var target1 = echart.init($(\"#soilTem\")[0]);\n              target1.setOption(option);\n            });\n          } else if (type == 4) {\n            //土壤湿度\n            for (var m = 0; m < xData.length; m++) {\n              referDataTop.push(60);\n            }\n\n            for (var n = 0; n < xData.length; n++) {\n              referDataBottom.push(50);\n            }\n\n            var option = getOption(optionName, xData, yData, referDataTop, referDataBottom);\n\n            require(['echarts'], function (echart) {\n              var target1 = echart.init($(\"#soilHum\")[0]);\n              target1.setOption(option);\n            });\n          }\n        }\n      });\n    }\n    /**\r\n     * echarts3 option\r\n     * \r\n     */\n\n\n    function getOption(optionName, xData, yData, referDataTop, referDataBottom) {\n      var option = {\n        title: {\n          text: optionName\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: [optionName]\n        },\n        toolbox: {\n          show: true,\n          feature: {// dataView: { readOnly: false },\n          }\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: false,\n          data: xData\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            formatter: '{value} °C'\n          }\n        },\n        series: [{\n          name: optionName,\n          type: 'line',\n          data: yData // markPoint: {\n          //   data: [\n          //     { type: 'max', name: '最大值' }\n          //   ]\n          // },\n          // markLine: {\n          //   data: [\n          //     { type: 'max', name: '最大标准值' },\n          //     { type: 'min', name: '最小标准值' }\n          //   ]\n          // }\n\n        }, {\n          name: '参照曲线上',\n          type: 'line',\n          lineStyle: {\n            normal: {\n              color: '#3C8DBC'\n            }\n          },\n          data: referDataTop\n        }, {\n          name: '参照曲线下',\n          type: 'line',\n          lineStyle: {\n            normal: {\n              color: '#3C8DBC'\n            }\n          },\n          data: referDataBottom\n        }]\n      };\n      return option;\n    }\n\n    require.config({\n      paths: {\n        echarts: '//cdn.bootcss.com/echarts/3.0.0/echarts'\n      }\n    });\n\n    function init() {\n      getModel();\n    }\n  }]);\n});"],"sourceRoot":"/source/"}