{"version":3,"sources":["js/services/services.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","global","factory","define","angular","module","exports","require","window","$services","this","allrequests","services","authFactory","$http","$rootScope","$location","$q","growl","params","url","location","search","theRequest","Object","indexOf","str","substr","strs","split","i","length","unescape","getUrlParams","token","version","host","undefined","origin","protocol","loc","serviceBase","RegExp","test","port","get","service","method","param","callBack","err","extendstr","cancel","defer","console","log","isString","copy","JSON","stringify","route","config","timeout","promise","callToken","post","emptyCall","success","e","status","data","kill","code","message","dt","slice","href","info","error","then","catch","inx","splice","push","Date","getTimezoneOffset","removeAllRequest","$inject"],"mappings":"AAAA,SAASA,QAAQC,GAAwT,OAAtOD,QAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBF,GAAO,cAAcA,GAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,IAAyBA,IAExV,SAAWK,EAAQC,GACjB,GAAqB,mBAAVC,OACTA,OAAO,CAAC,UAAW,wCAAyCD,OACvD,CACL,IAAIE,EAAU,CACZC,OAAQ,cAG6D,WAAhD,oBAAXA,OAAyB,YAAcV,QAAQU,SACrDA,OAAOC,UACTD,OAAOC,QAAUJ,EAAQE,EAASG,QAAQ,CAAC,2BAGzCN,GAAUO,SACZA,OAAOC,UAAYP,EAAQE,EAAS,MAd5C,CAkBGM,KAAM,SAAUN,EAASF,GAC1B,aAEA,IACIS,EAAc,GACdC,EAAWR,EAAQC,OAAO,WAAY,CAAC,eAE3C,SAASQ,EAAYC,EAAOC,EAAYC,EAAWC,EAAIC,GACrD,IAAIC,EA8JJ,WACE,IAAIC,EAAMC,SAASC,OAEfC,EAAa,IAAIC,OAErB,IAAyB,GAArBJ,EAAIK,QAAQ,KAId,IAHA,IAAIC,EAAMN,EAAIO,OAAO,GACjBC,EAAOF,EAAIG,MAAM,KAEZC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BP,EAAWK,EAAKE,GAAGD,MAAM,KAAK,IAAMG,SAASJ,EAAKE,GAAGD,MAAM,KAAK,IAIpE,OAAON,EA5KIU,GACTC,EAAQf,EAAO,MACfgB,EAAUhB,EAAO,QAAaA,EAAO,QAAa,KACtDjB,EAAQiC,QAAUA,EAEd3B,OAAOa,SAASe,OAAqD,GAA7C5B,OAAOa,SAASe,KAAKd,OAAO,eAAmE,GAA7Cd,OAAOa,SAASe,KAAKd,OAAO,eAAyE,GAAnDd,OAAOa,SAASe,KAAKd,OAAO,qBAC1JpB,EAAQkC,KAAO5B,OAAOa,SAASe,KAEDC,MAA1B7B,OAAOa,SAASiB,OAClBpC,EAAQoC,OAAS9B,OAAOa,SAASiB,OAEjCpC,EAAQoC,OAAS,WAAa9B,OAAOa,SAASe,KAGhB,UAA5B5B,OAAOa,SAASkB,SAClBrC,EAAQqC,SAAW,OAEnBrC,EAAQqC,SAAW,OAMvB,IAA4BC,EAGLJ,EAFjBA,EADFK,GAAwBD,EAa1BhC,OAAOa,SAZHe,EAAOI,EAAIJ,KAEMA,EAKLA,EAJM,IAAIM,OAAO,YAAa,KACvBC,KAAKP,IAGqB,SAAxB5B,OAAOa,SAASuB,KAChC1C,EAAQoC,OAAS,IAEjBE,EAAIF,OAAS,KAMxBpC,EAAQ2C,IAAM,SAAUC,EAASC,EAAQC,EAAOC,EAAUC,EAAKC,GAC7D,IAAIC,EAASnC,EAAGoC,QAEO,mBAAZJ,GACTK,QAAQC,IAAIT,EAASC,EAAQE,GAG1B7C,EAAQoD,SAASR,KACpBA,EAAQ5C,EAAQqD,KAAKT,GACrBA,EAAQU,KAAKC,UAAUX,IAGzB,IAAIY,EACO,aAOTd,EANS,YAC0B,EAAxBA,EAAQrB,QAAQ,KAClB,YAEA,iBAKPL,EAAMqB,EAAcmB,GADxBd,EAAqB,aAAXA,EAAyB,GAAKA,GACE,IAAMC,GAAUI,EAAY,IAAMA,EAAY,IAE3E,MAATjB,IACFd,GAAO,UAAYc,GAGrB,IAAI2B,EAAS,CACXC,QAASV,EAAOW,SAEdC,EAAYlD,EAAMmD,KAAK7C,EAAK4B,EAAOa,GAEvC,SAASK,IACP,OAAO,KAKT,SAASC,EAAQC,GAIf,GAHAA,EAAgB,KAAZA,EAAEC,OAAgBD,EAAEE,KAAOF,EAC/BJ,EAAUO,KAAOL,EAED,MAAZjB,EACF,GAAc,GAAVmB,EAAEI,KACJvB,EAASmB,QAET,IAAsC,EAAlCA,EAAEK,QAAQnD,OAAO,cAAoB,CACvC,IAAIoD,EAAKN,EAAEE,KACXI,EAAc,KAATA,EAAG,IAAaA,EAAGC,MAAM,IAAMD,EACpCrD,SAASuD,KAAO,MAAQF,EACxBzB,EAAS,CACPuB,KAAM,EACNF,KAAM,UAEU,KAATF,EAAEI,KACXtD,EAAM2D,KAAKT,EAAEK,QAAS,KAGtBnB,QAAQwB,MAAM1D,EAAK,YACnBkC,QAAQwB,MAAM,MAAOpB,KAAKC,UAAUX,EAAO,KAAM,IACjDM,QAAQwB,MAAM,OAASV,EAAEI,KAAO,IAAMJ,EAAEK,SACxCvD,EAAM4D,MAAM,OAASV,EAAEI,KAAO,IAAMJ,EAAEK,QAAS,KAL/CxB,EAASmB,GAejB,SAASU,EAAMR,GACb,IAAIpB,EAAM,GACQA,GAAH,GAAXmB,OAAoB,gBAAkBA,OAAS,kBAA6B,eAChFL,EAAUO,MAAQL,GAAahD,EAAM4D,MAAM5B,EAAK,IAChDc,EAAUO,KAAOL,EAWnB,OAlDAF,EAAUG,SAAWH,EAAUG,QAAQA,IAAYH,EAAUe,KAAKZ,GAiClEH,EAAUc,OAASd,EAAUc,MAAMA,IAAUd,EAAUgB,MAAMF,GAW7Dd,EAAUO,KAAO,WACf,IAAIU,EAAMtE,EAAYc,QAAQf,MAC9BC,EAAYuE,OAAOD,EAAK,IAG1BtE,EAAYwE,KAAKnB,GACVA,IAGD,IAAIoB,MACYC,oBA2CxB,OAzCAnF,EAAQoF,iBAAmB,WAEzB,IAAK,IAAIxD,KAAKnB,EACZA,EAAYmB,GAAGyC,QAsCZrE,EAMT,OAFAW,EAAY0E,QAxLO,CAAC,QAAS,aAAc,YAAa,KAAM,SAyL9D3E,EAASV,QAAQ,eAAgBW,GAC1BD","file":"js/services/services.js","sourcesContent":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define == \"function\") {\n    define(['angular', \"../../../js/services/service_factory\"], factory);\n  } else {\n    var angular = {\n      module: function module() {}\n    };\n\n    if ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) == \"object\") {\n      if (module.exports) {\n        module.exports = factory(angular, require(['./service_factory.js']));\n      }\n    } else {\n      if (global == window) {\n        window.$services = factory(angular, {});\n      }\n    }\n  }\n})(this, function (angular, factory) {\n  'use strict';\n\n  var injectParams = ['$http', '$rootScope', '$location', '$q', 'growl'],\n      allrequests = [],\n      services = angular.module('services', ['ngResource']);\n\n  function authFactory($http, $rootScope, $location, $q, growl) {\n    var params = getUrlParams();\n    var token = params[\"token\"];\n    var version = params[\"version\"] ? params[\"version\"] : \"V2\";\n    factory.version = version;\n\n    if (window.location.host && window.location.host.search('localhost') == -1 && window.location.host.search('127.0.0.1') == -1 && window.location.host.search('192.168.199.223') == -1) {\n      factory.host = window.location.host;\n\n      if (window.location.origin != undefined) {\n        factory.origin = window.location.origin;\n      } else {\n        factory.origin = \"https://\" + window.location.host;\n      }\n\n      if (window.location.protocol == \"https:\") {\n        factory.protocol = \"wss:\";\n      } else {\n        factory.protocol = \"ws:\";\n      }\n    }\n    /** 应用webpack-dev-server启动服务器暂定8080端口，代理解决开发时跨域问题 */\n\n\n    var serviceBase = function (loc) {\n      var host = loc.host;\n\n      function isLocalHost(host) {\n        var localhostLike = new RegExp(\"localhost\", \"g\");\n        return localhostLike.test(host);\n      }\n\n      if (isLocalHost(host) && window.location.port == \"63342\") {\n        return factory.origin + \"/\";\n      } else {\n        return loc.origin + \"/\";\n      }\n    }(window.location);\n    /** 应用webpack-dev-server启动服务器暂定8080端口，代理解决开发时跨域问题 */\n\n\n    factory.get = function (service, method, param, callBack, err, extendstr) {\n      var cancel = $q.defer();\n\n      if (typeof callBack != \"function\") {\n        console.log(service, method, callBack);\n      }\n\n      if (!angular.isString(param)) {\n        param = angular.copy(param);\n        param = JSON.stringify(param);\n      }\n\n      var route = function (s) {\n        if (s == \"nodejsapi\") {\n          return \"api/node\";\n        } else if (service.indexOf(\"/\") > -1) {\n          return \"api/rest/\";\n        } else {\n          return \"api/rest/post/\";\n        }\n      }(service);\n\n      service = service == \"nodejsapi\" ? \"\" : service;\n      var url = serviceBase + route + service + \"/\" + method + (extendstr ? \"?\" + extendstr : \"\"); //var url = \"/api/rest/post/\" + service + \"/\" + method+(extendstr?(\"?\"+extendstr):\"\");\n\n      if (token != null) {\n        url += \"?token=\" + token;\n      }\n\n      var config = {\n        timeout: cancel.promise\n      };\n      var callToken = $http.post(url, param, config);\n\n      function emptyCall() {\n        return null;\n      }\n\n      callToken.success && callToken.success(success) || callToken.then(success);\n\n      function success(e) {\n        e = e.status == 200 ? e.data : e;\n        callToken.kill = emptyCall;\n\n        if (callBack != null) {\n          if (e.code == 0) {\n            callBack(e);\n          } else {\n            if (e.message.search(\"需要用户登录才能使用\") > -1) {\n              var dt = e.data;\n              dt = dt[0] == \"/\" && dt.slice(1) || dt;\n              location.href = \"../\" + dt;\n              callBack({\n                code: 0,\n                data: {}\n              });\n            } else if (e.code > 9999) {\n              growl.info(e.message, {});\n              callBack(e);\n            } else {\n              console.error(url, \"方法调用发生错误\");\n              console.error(\"参数：\", JSON.stringify(param, null, 2));\n              console.error(\"错误编码\" + e.code + \":\" + e.message);\n              growl.error(\"错误编码\" + e.code + \":\" + e.message, {});\n              callBack(e);\n            }\n          }\n        }\n      }\n\n      ;\n      callToken.error && callToken.error(error) || callToken.catch(error);\n\n      function error(data) {\n        var err = \"\";\n        if (status == -1) err = \"(HTTP status:\" + status + \")服务器连接已中断，请刷新页面\";else err = \"网络链接异常，请刷新页面\";\n        callToken.kill == emptyCall && growl.error(err, {});\n        callToken.kill = emptyCall;\n      }\n\n      ;\n\n      callToken.kill = function () {\n        var inx = allrequests.indexOf(this);\n        allrequests.splice(inx, 1);\n      };\n\n      allrequests.push(callToken);\n      return callToken;\n    };\n\n    var d = new Date();\n    var gmtMilliseconds = d.getTimezoneOffset() * 60 * 1000;\n\n    factory.removeAllRequest = function () {\n      // console.log(\"allrequests\", allrequests);\n      for (var i in allrequests) {\n        allrequests[i].kill();\n      }\n    };\n\n    function convertDateToString(input) {\n      // Ignore things that aren't objects.\n      if (_typeof(input) !== \"object\") return input;\n\n      for (var key in input) {\n        if (!input.hasOwnProperty(key)) continue;\n        var value = input[key];\n\n        if (angular.isDate(value)) {\n          value.setMilliseconds(value.getMilliseconds() - gmtMilliseconds);\n          input[key] = value.toJSON();\n        } else if (_typeof(value) === \"object\") {\n          convertDateToString(value);\n        }\n      }\n    }\n\n    function getUrlParams() {\n      var url = location.search; //获取url中\"?\"符后的字串\n\n      var theRequest = new Object();\n\n      if (url.indexOf(\"?\") != -1) {\n        var str = url.substr(1);\n        var strs = str.split(\"&\");\n\n        for (var i = 0; i < strs.length; i++) {\n          theRequest[strs[i].split(\"=\")[0]] = unescape(strs[i].split(\"=\")[1]);\n        }\n      }\n\n      return theRequest;\n    }\n\n    return factory;\n  }\n\n  ;\n  authFactory.$inject = injectParams;\n  services.factory('serviceProxy', authFactory);\n  return services;\n});"],"sourceRoot":"/source/"}