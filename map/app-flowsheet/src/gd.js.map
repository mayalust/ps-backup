{"version":3,"sources":["app-flowsheet/src/gd.js"],"names":["AUTH_TOKEN","SCOPES","CLIENT_ID","DEVELOPER_KEY","gdAuth","callback","immediate","gapi","auth","authorize","client_id","scope","authResult","error","client","load","access_token","gdLoad","pickerCallback","data","action","google","picker","Action","PICKED","drive","files","get","fileId","docs","id","execute","resp","xhr","XMLHttpRequest","open","downloadUrl","setRequestHeader","onload","title","responseText","send","view","View","ViewId","DOCS","setMimeTypes","setQuery","PickerBuilder","enableFeature","Feature","NAV_HIDDEN","setAppId","setOAuthToken","addView","DocsUploadView","setDeveloperKey","setCallback","build","setVisible","gdSave","name","content","boundary","delimiter","contentType","metadata","mimeType","base64Data","btoa","multipartRequestBody","JSON","stringify","file","console","log","request","path","method","params","uploadType","headers","Content-Type","body"],"mappings":"AAWA,IAMIA,WANAC,OAAS,wCAETC,UAAY,iBAEZC,cAAgB,qBAIpB,SAASC,OAAOC,EAAUC,GACnBN,WAgBHK,IAfAE,KAAKC,KAAKC,UAAU,CAClBC,UAAaR,UACbS,MAASV,OACTK,UAAaA,GACZ,SAAUM,GACPA,IAAeA,EAAWC,MAC5BN,KAAKO,OAAOC,KAAK,QAAS,KAAM,WAC9Bf,WAAaY,EAAWI,aACxBX,MAGEC,GAAWF,OAAOC,GAAU,KAQxC,SAASY,OAAOZ,GAQd,SAASa,EAAeC,GAClBA,EAAKC,QAAUC,OAAOC,OAAOC,OAAOC,QACxBjB,KAAKO,OAAOW,MAAMC,MAAMC,IAAI,CACxCC,OAAUT,EAAKU,KAAK,GAAGC,KAEjBC,QAAQ,SAAUC,GACxB,IAAIC,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAOH,EAAKI,aACrBH,EAAII,iBAAiB,gBAAiB,UAAYrC,YAElDiC,EAAIK,OAAS,WACXjC,EAAS2B,EAAKO,MAAON,EAAIO,eAG3BP,EAAIQ,SAKVlC,KAAKQ,KAAK,SAAU,CAClBV,SA3BF,WACE,IAAIqC,EAAO,IAAIrB,OAAOC,OAAOqB,KAAKtB,OAAOC,OAAOsB,OAAOC,MACvDH,EAAKI,aAAa,4BAA4BC,SAAS,WAC1C,IAAI1B,OAAOC,OAAO0B,eAAgBC,cAAc5B,OAAOC,OAAO4B,QAAQC,YAAYC,SAASlD,WAAWmD,cAAcrD,YAAYsD,QAAQZ,GAAMY,QAAQ,IAAIjC,OAAOC,OAAOiC,gBAAkBC,gBAAgBrD,eAAesD,YAAYvC,GAAgBwC,QAC3PC,YAAW,MA2BtB,SAASC,OAAOC,EAAMC,EAASzD,GAC7B,IAAI0D,EAAW,+BACXC,EAAY,SAAWD,EAAW,OAElCE,EAAc,2BACdC,EAAW,CACb3B,OAAUsB,GAAQ,kBAAoB,QACtCM,SAAYF,GAEVG,EAAaC,KAAKP,GAClBQ,EAAuBN,EAAY,yCAA2CO,KAAKC,UAAUN,GAAYF,EAAY,iBAAmBC,EAAc,gDAA4DG,EAPpM,uCAoBlB/D,EAAWA,GAAY,SAAUoE,GAC/BC,QAAQC,IAAIF,IAbAlE,KAAKO,OAAO8D,QAAQ,CAChCC,KAAQ,yBACRC,OAAU,OACVC,OAAU,CACRC,WAAc,aAEhBC,QAAW,CACTC,eAAgB,8BAAgCnB,EAAW,KAE7DoB,KAAQb,IAOFvC,QAAQ1B","file":"app-flowsheet/src/gd.js","sourcesContent":["/*! Rappid v1.7.1 - HTML5 Diagramming Framework\n\nCopyright (c) 2015 client IO\n\n 2016-03-03 \n\n\nThis Source Code Form is subject to the terms of the Rappid License\n, v. 2.0. If a copy of the Rappid License was not distributed with this\nfile, You can obtain one at http://jointjs.com/license/rappid_v2.txt\n or from the Rappid archive as was distributed by client IO. See the LICENSE file.*/\nvar SCOPES = 'https://www.googleapis.com/auth/drive'; // console/project/api&auth/credentials/oAuth/CLIENT_ID\n\nvar CLIENT_ID = 'YOUR_CLIENT_ID'; // console/project/api&auth/credentials/public_api_access/API_KEY\n\nvar DEVELOPER_KEY = 'YOUR_DEVELOPER_KEY'; // received after successfull authorization\n\nvar AUTH_TOKEN; // requires: google picker api enabled \n\nfunction gdAuth(callback, immediate) {\n  if (!AUTH_TOKEN) {\n    gapi.auth.authorize({\n      'client_id': CLIENT_ID,\n      'scope': SCOPES,\n      'immediate': immediate\n    }, function (authResult) {\n      if (authResult && !authResult.error) {\n        gapi.client.load('drive', 'v2', function () {\n          AUTH_TOKEN = authResult.access_token;\n          callback();\n        });\n      } else {\n        if (immediate) gdAuth(callback, false);\n      }\n    });\n  } else {\n    callback();\n  }\n}\n\nfunction gdLoad(callback) {\n  function createPicker() {\n    var view = new google.picker.View(google.picker.ViewId.DOCS);\n    view.setMimeTypes('application/octet-stream').setQuery('*.json');\n    var picker = new google.picker.PickerBuilder().enableFeature(google.picker.Feature.NAV_HIDDEN).setAppId(CLIENT_ID).setOAuthToken(AUTH_TOKEN).addView(view).addView(new google.picker.DocsUploadView()).setDeveloperKey(DEVELOPER_KEY).setCallback(pickerCallback).build();\n    picker.setVisible(true);\n  }\n\n  function pickerCallback(data) {\n    if (data.action == google.picker.Action.PICKED) {\n      var request = gapi.client.drive.files.get({\n        'fileId': data.docs[0].id\n      });\n      request.execute(function (resp) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', resp.downloadUrl);\n        xhr.setRequestHeader('Authorization', 'Bearer ' + AUTH_TOKEN);\n\n        xhr.onload = function () {\n          callback(resp.title, xhr.responseText);\n        };\n\n        xhr.send();\n      });\n    }\n  }\n\n  gapi.load('picker', {\n    callback: createPicker\n  });\n}\n\nfunction gdSave(name, content, callback) {\n  var boundary = '-------314159265358979323846';\n  var delimiter = '\\r\\n--' + boundary + '\\r\\n';\n  var close_delim = '\\r\\n--' + boundary + '--';\n  var contentType = 'application/octet-stream';\n  var metadata = {\n    'title': (name || 'JointJS - BPMN') + '.json',\n    'mimeType': contentType\n  };\n  var base64Data = btoa(content);\n  var multipartRequestBody = delimiter + 'Content-Type: application/json\\r\\n\\r\\n' + JSON.stringify(metadata) + delimiter + 'Content-Type: ' + contentType + '\\r\\n' + 'Content-Transfer-Encoding: base64\\r\\n' + '\\r\\n' + base64Data + close_delim;\n  var request = gapi.client.request({\n    'path': '/upload/drive/v2/files',\n    'method': 'POST',\n    'params': {\n      'uploadType': 'multipart'\n    },\n    'headers': {\n      'Content-Type': 'multipart/mixed; boundary=\"' + boundary + '\"'\n    },\n    'body': multipartRequestBody\n  });\n\n  callback = callback || function (file) {\n    console.log(file);\n  };\n\n  request.execute(callback);\n}"],"sourceRoot":"/source/"}