{"version":3,"sources":["toolkit/component/inputBox.js"],"names":["define","commonMethod","data","wrap","$","addClass","css","expression","dom","route","growl","element","global","$$","runExpression","$attr","funRes","code","format","title","initFn","i","undefined","value","type","text","append","val","on","event","changeFn","target","style","setText","str","e","current","$$route","controller","error"],"mappings":"AAGAA,OAAO,CAAC,gBAAiB,SAAUC,GACjC,OAAO,SAAUC,GACf,IAAIC,EAAOC,EAAE,eAAeC,SAAS,eACrCF,EAAKG,IAAI,QAAS,qBAClB,IAIIC,EACAC,EALAC,EAAQP,EAAKO,MACbC,EAAQR,EAAKQ,MACbC,EAAUT,EAAKS,QACfC,EAASV,EAAKU,OAGlBC,GAAGC,cAAcH,EAAQI,MAAM,sBAAuB,SAAUC,GAG5DT,EAFiB,GAAfS,EAAOC,OACTV,EAAaS,EAAOd,OAGP,KAGjB,IAGqCgB,EAHjCC,EAAQR,EAAQI,MAAM,oBACtBK,EAASb,EAAWQ,MAAM,WAmD9B,IAAK,IAAIM,KAVgBC,MAArBf,EAAWW,SACbX,EAAWW,OAAS,CAAC,CACnBK,MAAOJ,EACPK,KAAM,QACL,CACDD,MAAO,GACPC,KAAM,WAIIjB,EAAWW,OAhDJ,SADgBA,EAkDxBX,EAAWW,OAAOG,IAjDlBG,OACThB,EAAMJ,EAAE,iBAAiBC,SAAS,sBAC9BoB,KAAKP,EAAOK,OAEZL,EAAOK,OACTpB,EAAKuB,OAAOlB,IAIU,SAAfU,EAAOM,QAChBhB,EAAMJ,EAAE,aAAaC,SAAS,iBAC1BsB,IAAIT,EAAOK,OACff,EAAIoB,GAAG,SAAU,SAAUC,GACzB,IAAIC,EAAWvB,EAAWQ,MAAM,aAET,mBAAZe,GACTA,EAAS,CACPC,OAAQpB,EACRA,QAASA,EACTC,OAAQA,EACRW,MAAOf,EAAImB,UAMjBxB,EAAKuB,OAAOlB,IAKVU,EAAOc,OACTxB,EAAIF,IAAIY,EAAOc,OA4BnB,GARIrB,EAAQqB,OACV7B,EAAKG,IAAIK,EAAQqB,OAGnBrB,EAAQsB,QAAU,SAAUC,GAC1B1B,EAAImB,IAAIO,IAGW,mBAAVd,EACT,IACEA,EAAO,CACLW,OAAQpB,EACRC,OAAQA,IAEV,MAAOuB,GACiC,iBAApC1B,EAAM2B,QAAQC,QAAQC,YACxB5B,EAAM6B,MAAM,yBAWlB,OAAOpC","file":"toolkit/component/inputBox.js","sourcesContent":["/**\n * Created by leonlin on 16/11/3.\n */\ndefine(['commonMethod'], function (commonMethod) {\n  return function (data) {\n    var wrap = $(\"<div></div>\").addClass(\"input-group\");\n    wrap.css(\"width\", \"calc(100% - 10px)\");\n    var route = data.route;\n    var growl = data.growl;\n    var element = data.element;\n    var global = data.global;\n    var expression;\n    var dom;\n    $$.runExpression(element.$attr(\"advance/expression\"), function (funRes) {\n      if (funRes.code == 0) {\n        expression = funRes.data;\n        expression = expression ? expression : {};\n      } else {\n        expression = {};\n      }\n    });\n    var title = element.$attr(\"parameters/title\");\n    var initFn = expression.$attr(\"on/init\");\n\n    var createPart = function createPart(format) {\n      if (format.type == \"text\") {\n        dom = $(\"<span></span>\").addClass(\"input-group-addon\");\n        dom.text(format.value);\n\n        if (format.value) {\n          wrap.append(dom);\n        }\n\n        ;\n      } else if (format.type == \"input\") {\n        dom = $(\"<input />\").addClass(\"form-control\");\n        dom.val(format.value);\n        dom.on(\"change\", function (event) {\n          var changeFn = expression.$attr(\"on/change\");\n\n          if (typeof changeFn == \"function\") {\n            changeFn({\n              target: element,\n              element: element,\n              global: global,\n              value: dom.val()\n            });\n          }\n\n          ;\n        });\n        wrap.append(dom);\n      }\n\n      ;\n\n      if (format.style) {\n        dom.css(format.style);\n      }\n\n      ;\n    };\n\n    if (expression.format == undefined) {\n      expression.format = [{\n        value: title,\n        type: \"text\"\n      }, {\n        value: \"\",\n        type: \"input\"\n      }];\n    }\n\n    for (var i in expression.format) {\n      createPart(expression.format[i]);\n    }\n\n    if (element.style) {\n      wrap.css(element.style);\n    }\n\n    element.setText = function (str) {\n      dom.val(str);\n    };\n\n    if (typeof initFn == \"function\") {\n      try {\n        initFn({\n          target: element,\n          global: global\n        });\n      } catch (e) {\n        if (route.current.$$route.controller == \"freeStyleCtrl\") {\n          growl.error(\"组件［输入框］的初始化表达式配置发生错误！\");\n        }\n\n        ;\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    return wrap;\n  };\n});"],"sourceRoot":"/source/"}