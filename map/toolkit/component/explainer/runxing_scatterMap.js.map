{"version":3,"sources":["toolkit/component/explainer/runxing_scatterMap.js"],"names":["define","data","tools","callback","nodesDes","kpisDes","Info","get","geo","series","name","searchable","getSeries","geoCoord","loop","item","city","obj","values","standardAddress","split","find","elem","doms","domains","replace","id","label","value","undefined","longitude","latitude","push","i","getLegend"],"mappings":"AAGAA,OAAO,GAAI,WACT,OAAO,SAAUC,EAAMC,EAAOC,GACbD,EAAME,SACPF,EAAMG,QAEpBH,EAAMI,KAAKC,IADD,8BACU,SAAUC,GAC5B,IAAIC,EAAS,CAAC,CACZC,KAAM,YACNT,KAAM,IACL,CACDS,KAAM,SACNC,YAAY,EACZV,KAAM,KAGJW,EAAY,WACd,OAAOH,GAOLI,EAAWL,EAAIK,SAEfC,EAAO,SAAcC,GACvB,IAEIC,EAFAC,EAAM,GAUV,GANIF,EAAKG,OAAOC,kBACdH,EAAOD,EAAKG,OAAOC,gBAAgBC,MAAM,KAAK,IAK5CJ,EAAM,CACR,IAAIK,EAAOZ,EAAO,GAAGR,KAAKoB,KAAK,SAAUC,GACvC,OAAOA,EAAKZ,MAAQM,IAElBO,EAAOR,EAAKS,QAChBD,EAAOA,EAAKE,QAAQ,MAAO,KAEtBJ,IACHJ,EAAIS,GAAKX,EAAKW,GACdT,EAAIO,QAAUD,EACdN,EAAIU,MAAQZ,EAAKY,MACjBV,EAAIP,KAAOM,EACXC,EAAIW,MAAQf,EAASG,GAEJa,MAAbZ,EAAIW,QACNX,EAAIW,MAAQ,CAACb,EAAKG,OAAOY,UAAWf,EAAKG,OAAOa,WAIlDtB,EAAO,GAAGR,KAAK+B,KAAKf,MAO1B,IAAK,IAAIgB,KAAKhC,EACZa,EAAKb,EAAKgC,IAGZ9B,EAAS,CACP+B,UAhDc,WACd,MAAO,IAgDPtB,UAAWA,EACXX,KAAM,CACJQ,OAAQG","file":"toolkit/component/explainer/runxing_scatterMap.js","sourcesContent":["/**\n * Created by leonlin on 16/11/3.\n */\ndefine([], function () {\n  return function (data, tools, callback) {\n    var nodesDes = tools.nodesDes;\n    var kpisDes = tools.kpisDes;\n    var par = \"../localdb/echarts-map.json\";\n    tools.Info.get(par, function (geo) {\n      var series = [{\n        name: \"highlight\",\n        data: []\n      }, {\n        name: \"level0\",\n        searchable: true,\n        data: []\n      }];\n\n      var getSeries = function getSeries() {\n        return series;\n      };\n\n      var getLegend = function getLegend() {\n        return [];\n      };\n\n      var geoCoord = geo.geoCoord;\n\n      var loop = function loop(item) {\n        var obj = {},\n            obj2 = {};\n        var city;\n\n        if (item.values.standardAddress) {\n          city = item.values.standardAddress.split(\",\")[1];\n        }\n\n        ;\n\n        if (city) {\n          var find = series[0].data.find(function (elem) {\n            return elem.name == city;\n          });\n          var doms = item.domains;\n          doms = doms.replace(/\\//g, \"|\");\n\n          if (!find) {\n            obj.id = item.id;\n            obj.domains = doms;\n            obj.label = item.label;\n            obj.name = city;\n            obj.value = geoCoord[city];\n\n            if (obj.value == undefined) {\n              obj.value = [item.values.longitude, item.values.latitude];\n            }\n\n            ;\n            series[1].data.push(obj); //series[0].data.push(obj);\n          }\n\n          ;\n        }\n      };\n\n      for (var i in data) {\n        loop(data[i]);\n      }\n\n      callback({\n        getLegend: getLegend,\n        getSeries: getSeries,\n        data: {\n          series: getSeries()\n        }\n      });\n    });\n  };\n});"],"sourceRoot":"/source/"}