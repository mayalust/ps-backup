{"version":3,"sources":["toolkit/component/explainer/scatter_normal.js"],"names":["define","data","tools","callback","startTime","endTime","nodesDes","kpisDes","format","freq","frequency","group","ci","kpi","rs","i","j","push","regroup","result","map","element","timeStamp","Date","arisingTime","getTime","kpiCode","nodeId","time","value","picked","allTimes","elem","Math","min","apply","max","getValueList","id","filter","splitData","compare","timestamp","splitByTime","getAllData","rawData","getLegend","formatter","label","getResources","getKpis","getDataMap","getxAxis","xAxis","getDate","date","$formatDate","length","getSeries","arr","k","innerArr","name"],"mappings":"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","file":"toolkit/component/explainer/scatter_normal.js","sourcesContent":["/**\n * Created by leonlin on 16/11/3.\n */\ndefine([], function () {\n  return function (data, tools, callback) {\n    var nodesDes = tools.nodesDes;\n    var kpisDes = tools.kpisDes;\n    var series, startTime, endTime;\n    var format = tools.format;\n    var freq = tools.frequency;\n\n    var getLegend = function getLegend(formatter) {\n      return group.map(function (elem) {\n        var name;\n\n        if (typeof formatter == 'function') {\n          name = formatter({\n            ci: elem.ci.label,\n            kpi: elem.kpi.label\n          });\n        } else {\n          name = elem.ci.label + \"-\" + elem.kpi.label;\n        }\n\n        return name;\n      });\n    };\n\n    var regroup = function regroup(ci, kpi) {\n      var rs = [];\n\n      for (var i in ci) {\n        for (var j in kpi) {\n          rs.push({\n            ci: ci[i],\n            kpi: kpi[j]\n          });\n        }\n      }\n\n      return rs;\n    };\n\n    var getResources = function getResources() {\n      return nodesDes.map(function (element) {\n        return element.label;\n      });\n    };\n\n    var getKpis = function getKpis() {\n      return kpisDes.map(function (element) {\n        return element.label;\n      });\n    };\n\n    var getDataMap = function getDataMap() {\n      return group;\n    };\n\n    var getxAxis = function getxAxis() {\n      var xAxis = [];\n\n      var getDate = function getDate(date) {\n        return $formatDate(date, format);\n      };\n\n      if (freq > 0) {\n        for (var i = startTime; i < endTime; i += freq) {\n          xAxis.push(getDate(new Date(i)));\n        }\n      } else {\n        for (var i in result) {\n          xAxis.push(getDate(new Date(result[i].time)));\n        }\n      }\n\n      if (xAxis.length == 0) {\n        xAxis.push(\"-\");\n      }\n\n      return [xAxis];\n    };\n\n    var getSeries = function getSeries(formatter) {\n      var rs = [];\n\n      for (var i in nodesDes) {\n        var filter = group.filter(function (elem) {\n          return elem.ci.label == nodesDes[i].label;\n        });\n        var arr = [];\n\n        for (var k in filter[0].data) {\n          var innerArr = [];\n\n          for (var j in filter) {\n            innerArr.push(filter[j].data[k]);\n          }\n\n          arr.push(innerArr);\n        }\n\n        ;\n        rs[i] = {\n          name: nodesDes[i].label,\n          data: arr\n        };\n      }\n\n      ;\n      return rs;\n    };\n\n    var group = regroup(nodesDes, kpisDes);\n    var result = data.map(function (element) {\n      var timeStamp = new Date(element.arisingTime).getTime();\n      return {\n        kpiCode: element.kpiCode,\n        nodeId: element.nodeId,\n        time: element.arisingTime,\n        timeStamp: timeStamp,\n        value: element.value,\n        picked: false\n      };\n    });\n    var allTimes = result.map(function (elem) {\n      return elem.timeStamp;\n    });\n    startTime = Math.min.apply(null, allTimes);\n    endTime = Math.max.apply(null, allTimes);\n\n    var getValueList = function getValueList(element) {\n      var nodeId = element.ci.id;\n      var kpiCode = element.kpi.id;\n      var filter = result.filter(function (elem) {\n        return nodeId == elem.nodeId && kpiCode == elem.kpiCode;\n      });\n      return filter;\n    };\n\n    var splitData = function splitData(data) {\n      var rs = [];\n\n      var compare = function compare(time) {\n        var condition = function condition(timestamp) {\n          var rs = timestamp >= time && timestamp < time + freq;\n          return rs;\n        };\n\n        for (var i in data) {\n          if (condition(data[i].timeStamp)) {\n            return data[i].value;\n          }\n        }\n\n        ;\n        return \"-\";\n      };\n\n      var splitByTime = function splitByTime() {\n        for (var i = startTime; i <= endTime; i += freq) {\n          rs.push(compare(i));\n        }\n      };\n\n      var getAllData = function getAllData() {\n        for (var i in data) {\n          rs.push(data[i].value);\n        }\n      };\n\n      if (freq > 0) {\n        splitByTime();\n      } else {\n        getAllData();\n      }\n\n      return rs;\n    };\n\n    for (var i in group) {\n      group[i].data = splitData(getValueList(group[i]));\n    }\n\n    ;\n    callback({\n      rawData: data,\n      getLegend: getLegend,\n      getResources: getResources,\n      getKpis: getKpis,\n      getDataMap: getDataMap,\n      getxAxis: getxAxis,\n      getSeries: getSeries\n    });\n  };\n});"],"sourceRoot":"/source/"}