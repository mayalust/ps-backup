{"version":3,"sources":["toolkit/value-list-handler.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","define","dateHandler","valuelistHandler","init","valueList","startTime","endTime","freqObj","autoFillBlank","aggregate_rule","timeRange","ValuelistHandler","vlist","setTimeRange","st","et","freq","inx","unit","trimmToMonth","before","push","addMonth","value","trimmToDate","addDay","trimmToHour","addHour","trimmToMinute","addMinute","trimmToSecond","addSecond","Error","setAutoFillBlank","autofb","setAggregateRule","ar","getTimeRange","aggregateValues","rs","repeat","aggr","findWithIn","filter","elem","timeStamp","Date","arisingTime","getTime","getTimeStamp","sum","i","length","getValueWithin","result","loopNoEmptyItem","end","step","start","parseFloat","j","toFixed","fillBlank","splitByTime","generateRandomValueList","nodeIds","kpiIds","number","rng","range","minus","clone","addTimeStamp","loopNodeKpi","node","kpi","Array","apply","map","date","min","max","val","Math","random","agentId","aggregatePeriod","aggregateStatus","aggregateType","getDateString","compressCount","computeTaskId","dataSerialNumber","dataTime","insertTime","kpiCode","id","nodeId","notes","numberValue","quality","resourceId","stringValue","valueStr"],"mappings":"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","file":"toolkit/value-list-handler.js","sourcesContent":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * 数据聚合器\n */\ndefine(['toolkit/date-handler'], function (dateHandler) {\n  var valuelistHandler = {};\n\n  valuelistHandler.init = function (valueList) {\n    var valueList = [],\n        startTime,\n        endTime,\n        freqObj,\n        autoFillBlank = true,\n        aggregate_rule = 0,\n        timeRange = [];\n\n    var randomValue = function randomValue(range) {\n      var min = range[0];\n      var max = range[1];\n      return (min + Math.random() * (max - min)).toFixed(2);\n    };\n\n    function ValuelistHandler(vlist) {\n      valueList = vlist;\n    }\n\n    ;\n\n    ValuelistHandler.prototype.setTimeRange = function (st, et, freq) {\n      startTime = st;\n      endTime = et;\n      freqObj = freq;\n      var inx = 0;\n\n      if (freqObj.unit == \"month\") {\n        startTime = dateHandler.init(startTime.trimmToMonth());\n        endTime = dateHandler.init(endTime.trimmToMonth());\n\n        while (startTime.before(endTime)) {\n          timeRange.push(startTime);\n          startTime = startTime.addMonth(freqObj.value);\n          inx++;\n\n          if (inx > 5000) {\n            break;\n          }\n        }\n\n        ;\n      } else if (freqObj.unit == \"day\") {\n        startTime = dateHandler.init(startTime.trimmToDate());\n        endTime = dateHandler.init(endTime.trimmToDate());\n\n        while (startTime.before(endTime)) {\n          timeRange.push(startTime);\n          startTime = startTime.addDay(freqObj.value);\n          inx++;\n\n          if (inx > 5000) {\n            break;\n          }\n        }\n\n        ;\n      } else if (freqObj.unit == \"hour\") {\n        startTime = dateHandler.init(startTime.trimmToHour());\n        endTime = dateHandler.init(endTime.trimmToHour());\n\n        while (startTime.before(endTime)) {\n          timeRange.push(startTime);\n          startTime = startTime.addHour(freqObj.value);\n          inx++;\n\n          if (inx > 5000) {\n            break;\n          }\n        }\n\n        ;\n      } else if (freqObj.unit == \"minute\") {\n        startTime = dateHandler.init(startTime.trimmToMinute());\n        endTime = dateHandler.init(endTime.trimmToMinute());\n\n        while (startTime.before(endTime)) {\n          timeRange.push(startTime);\n          startTime = startTime.addMinute(freqObj.value);\n          inx++;\n\n          if (inx > 5000) {\n            break;\n          }\n        }\n\n        ;\n      } else if (freqObj.unit == \"second\") {\n        startTime = dateHandler.init(startTime.trimmToSecond());\n        endTime = dateHandler.init(endTime.trimmToSecond());\n\n        while (startTime.before(endTime)) {\n          timeRange.push(startTime);\n          startTime = startTime.addSecond(freqObj.value);\n          inx++;\n\n          if (inx > 5000) {\n            break;\n          }\n        }\n\n        ;\n      }\n\n      ;\n      ;\n\n      if (inx > 5000) {\n        throw new Error(\"采样周期过大或采样频率过密，请适当调整周期频率到合理范围\");\n      }\n    };\n\n    ValuelistHandler.prototype.setAutoFillBlank = function (autofb) {\n      autoFillBlank = autofb;\n    };\n\n    ValuelistHandler.prototype.setAggregateRule = function (ar) {\n      aggregate_rule = ar;\n    };\n\n    ValuelistHandler.prototype.getTimeRange = function () {\n      return timeRange;\n    };\n\n    ValuelistHandler.prototype.aggregateValues = function (valueList) {\n      rs = [];\n\n      var getValueWithin = function getValueWithin(st, et) {\n        var findWithIn = valueList.filter(function (elem) {\n          var timeStamp = new Date(elem.arisingTime).getTime(); //;\n\n          var rs;\n\n          if (et) {\n            rs = timeStamp >= st.getTimeStamp() && timeStamp < et.getTimeStamp();\n          } else {\n            rs = timeStamp >= st.getTimeStamp();\n          }\n\n          ;\n          return rs;\n        });\n        var sum = 0;\n\n        for (var i in findWithIn) {\n          sum += findWithIn[i].value;\n        }\n\n        var aggr;\n\n        if (findWithIn.length > 0) {\n          if (aggregate_rule == 0) {\n            aggr = findWithIn[0].value;\n          } else if (aggregate_rule == 1) {\n            aggr = findWithIn[findWithIn.length - 1].value;\n          } else if (aggregate_rule == 2) {\n            aggr = sum / findWithIn.length;\n          }\n        } else {\n          aggr = \"-\";\n        }\n\n        ;\n        return aggr;\n      };\n\n      var splitByTime = function splitByTime() {\n        var inx = 0;\n\n        var repeat = function repeat(inx) {\n          if (timeRange[inx]) {\n            rs.push(getValueWithin(timeRange[inx], timeRange[inx + 1]));\n            repeat(inx + 1);\n          }\n        };\n\n        repeat(inx);\n\n        var fillBlank = function fillBlank(rs) {\n          var result = [];\n\n          for (var i in rs) {\n            result[i] = rs[i];\n          }\n\n          var loopNoEmptyItem = function loopNoEmptyItem(i) {\n            var length = 0;\n            var start = parseFloat(rs[i]);\n            var end, step;\n\n            for (var j = i + 1; j < rs.length; j++) {\n              if (rs[j] != \"-\") {\n                end = parseFloat(rs[j]);\n                break;\n              } else {\n                length++;\n              }\n            }\n\n            ;\n\n            if (end) {\n              step = (end - start) / (length + 1);\n              var inx = 1;\n\n              for (var j = i + 1; j < i + length + 1; j++) {\n                result[j] = parseFloat((start + step * inx).toFixed(2));\n                inx++;\n              }\n            }\n          };\n\n          for (var i = 0; i < rs.length; i++) {\n            if (rs[i] != \"-\") {\n              loopNoEmptyItem(i);\n            }\n          }\n\n          return result;\n        };\n\n        if (autoFillBlank) {\n          rs = fillBlank(rs);\n        }\n\n        ;\n      };\n\n      splitByTime();\n      return rs;\n    };\n\n    ValuelistHandler.prototype.generateRandomValueList = function (nodeIds, kpiIds, startTime, endTime, number, rng) {\n      var rs = [];\n      var range = rng || [0, 100];\n      var timeRange = [];\n      var st = dateHandler.init(startTime);\n      var et = dateHandler.init(endTime);\n      var step = et.minus(st) / number;\n\n      while (st.before(et)) {\n        timeRange.push(st.clone());\n        st.addTimeStamp(step);\n      }\n\n      ;\n\n      var loopNodeKpi = function loopNodeKpi(node, kpi) {\n        Array.prototype.push.apply(rs, timeRange.map(function (date) {\n          var val = randomValue(range);\n          return {\n            \"agentId\": \"0\",\n            \"aggregatePeriod\": null,\n            \"aggregateStatus\": null,\n            \"aggregateType\": null,\n            \"arisingTime\": date.getDateString(),\n            \"compressCount\": 0,\n            \"computeTaskId\": 0,\n            \"dataSerialNumber\": 0,\n            \"dataTime\": null,\n            \"insertTime\": date.getDateString(),\n            \"kpiCode\": _typeof(kpi) == \"object\" ? kpi.id : kpi,\n            \"nodeId\": _typeof(node) == \"object\" ? node.id : node,\n            \"notes\": null,\n            \"numberValue\": parseFloat(val),\n            \"quality\": 0,\n            \"resourceId\": 0,\n            \"stringValue\": null,\n            \"value\": parseFloat(val),\n            \"valueStr\": val + \"\"\n          };\n        }));\n      };\n\n      for (var i in nodeIds) {\n        for (var j in kpiIds) {\n          loopNodeKpi(nodeIds[i], kpiIds[j]);\n        }\n      }\n\n      ;\n      ;\n      return rs;\n    };\n\n    var rs = new ValuelistHandler(valueList);\n    return rs;\n  };\n\n  return valuelistHandler;\n});"],"sourceRoot":"/source/"}