{"version":3,"sources":["toolkit/jasmine-standalone-2.9.1/spec/PlayerSpec.js"],"names":["describe","player","song","beforeEach","Player","Song","it","play","expect","currentlyPlayingSong","toEqual","toBePlaying","pause","isPlaying","toBeFalsy","not","resume","toBeTruthy","spyOn","makeFavorite","persistFavoriteStatus","toHaveBeenCalledWith","toThrowError"],"mappings":"AAAAA,SAAS,SAAU,WACjB,IAAIC,EACAC,EACJC,WAAW,WACTF,EAAS,IAAIG,OACbF,EAAO,IAAIG,OAEbC,GAAG,gCAAiC,WAClCL,EAAOM,KAAKL,GACZM,OAAOP,EAAOQ,sBAAsBC,QAAQR,GAE5CM,OAAOP,GAAQU,YAAYT,KAE7BF,SAAS,4BAA6B,WACpCG,WAAW,WACTF,EAAOM,KAAKL,GACZD,EAAOW,UAETN,GAAG,oDAAqD,WACtDE,OAAOP,EAAOY,WAAWC,YAEzBN,OAAOP,GAAQc,IAAIJ,YAAYT,KAEjCI,GAAG,+BAAgC,WACjCL,EAAOe,SACPR,OAAOP,EAAOY,WAAWI,aACzBT,OAAOP,EAAOQ,sBAAsBC,QAAQR,OAIhDI,GAAG,4DAA6D,WAC9DY,MAAMhB,EAAM,yBACZD,EAAOM,KAAKL,GACZD,EAAOkB,eACPX,OAAON,EAAKkB,uBAAuBC,sBAAqB,KAG1DrB,SAAS,UAAW,WAClBM,GAAG,uDAAwD,WACzDL,EAAOM,KAAKL,GACZM,OAAO,WACLP,EAAOe,WACNM,aAAa","file":"toolkit/jasmine-standalone-2.9.1/spec/PlayerSpec.js","sourcesContent":["describe(\"Player\", function () {\n  var player;\n  var song;\n  beforeEach(function () {\n    player = new Player();\n    song = new Song();\n  });\n  it(\"should be able to play a Song\", function () {\n    player.play(song);\n    expect(player.currentlyPlayingSong).toEqual(song); //demonstrates use of custom matcher\n\n    expect(player).toBePlaying(song);\n  });\n  describe(\"when song has been paused\", function () {\n    beforeEach(function () {\n      player.play(song);\n      player.pause();\n    });\n    it(\"should indicate that the song is currently paused\", function () {\n      expect(player.isPlaying).toBeFalsy(); // demonstrates use of 'not' with a custom matcher\n\n      expect(player).not.toBePlaying(song);\n    });\n    it(\"should be possible to resume\", function () {\n      player.resume();\n      expect(player.isPlaying).toBeTruthy();\n      expect(player.currentlyPlayingSong).toEqual(song);\n    });\n  }); // demonstrates use of spies to intercept and test method calls\n\n  it(\"tells the current song if the user has made it a favorite\", function () {\n    spyOn(song, 'persistFavoriteStatus');\n    player.play(song);\n    player.makeFavorite();\n    expect(song.persistFavoriteStatus).toHaveBeenCalledWith(true);\n  }); //demonstrates use of expected exceptions\n\n  describe(\"#resume\", function () {\n    it(\"should throw an exception if song is already playing\", function () {\n      player.play(song);\n      expect(function () {\n        player.resume();\n      }).toThrowError(\"song is already playing\");\n    });\n  });\n});"],"sourceRoot":"/source/"}