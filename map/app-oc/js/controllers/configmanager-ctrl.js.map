{"version":3,"sources":["app-oc/js/controllers/configmanager-ctrl.js"],"names":["define","controllers","BootstrapDialog","initController","$scope","$http","$controller","configUIService","userLoginUIService","growl","FileUploader","serviceOrigin","origin","uploadImage","config","uploader","queue","length","formData","push","value","configGroupsDic","groupName","id","uploadAll","$broadcast","state","response","clearUpload","clearQueue","activeListTab","menuitems","configTypes","label","option","configIns","configGroups","addConfigGroup","newConfigGroup","type","name","domainPath","Number","MAX_VALUE","isEdit","i","warning","Event","CONFIGGROUPINIT","addConfig","isEditing","forEach","newconfig","key","keyDesc","invalid","canDelete","CONFIGINSINIT","doAction","select","callback","saveConfigGroup","resultObj","code","data","success","splice","show","title","closable","message","escape","buttons","cssClass","action","dialogRef","deleteConfigGroup","close","listener","$on","event","args","saveHandler","returnObj","removeFromQueue","deleteConfig","isshow","saveConfig","initEvent","$","on","e","target","closest","removeClass","children","addClass","aname","attr","$apply","init","getAllConfigGroups","item","getAllConfigs","user","isAuthenticated","evt","d"],"mappings":"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","file":"app-oc/js/controllers/configmanager-ctrl.js","sourcesContent":["define(['controllers/controllers', 'bootstrap-dialog'], function (controllers, BootstrapDialog) {\n  'use strict';\n\n  controllers.initController('ConfigManagerCtrl', ['$scope', \"$http\", '$controller', 'configUIService', 'userLoginUIService', 'growl', 'FileUploader', function ($scope, $http, $controller, configUIService, userLoginUIService, growl, FileUploader) {\n    $scope.serviceOrigin = configUIService.origin + '/api/rest/uploadConfig/configUIService/uploadConfigFile';\n    $controller('AppUploadCtrl', {\n      $scope: $scope,\n      growl: growl,\n      FileUploader: FileUploader\n    });\n\n    $scope.uploadImage = function (config) {\n      if ($scope.uploader.queue.length == 0) {\n        $scope.$broadcast(\"uploadTemplate\", {\n          state: true,\n          response: null\n        });\n        return;\n      }\n\n      $scope.uploader.formData = [];\n      $scope.uploader.formData.push({\n        value: $scope.configGroupsDic[config.groupName].value,\n        id: config.id\n      });\n      $scope.uploader.uploadAll();\n    };\n\n    $scope.clearUpload = function () {\n      $scope.uploader.clearQueue();\n    };\n\n    $scope.activeListTab = \"instance\";\n\n    if ($scope.menuitems['A05_S23']) {\n      $scope.activeListTab = \"instance\";\n    } else if ($scope.menuitems['A04_S23']) {\n      $scope.activeListTab = \"group\";\n    }\n\n    $scope.configTypes = [{\n      label: \"默认\",\n      value: \"string\",\n      option: \"\"\n    }, {\n      label: \"文件\",\n      value: \"file\",\n      option: \"\"\n    }];\n    $scope.configIns = [];\n    $scope.configGroupsDic = {};\n    $scope.configGroups = [];\n\n    $scope.addConfigGroup = function () {\n      var newConfigGroup = {\n        type: \"string\",\n        name: \"\",\n        value: \"\",\n        domainPath: \"\",\n        id: Number.MAX_VALUE,\n        label: \"\",\n        isEdit: 2\n      };\n\n      for (var i in $scope.configGroups) {\n        if ($scope.configGroups[i].isEdit > 0) {\n          growl.warning(\"当前有未保存的配置组，请先完成该操作\", {});\n          return;\n        }\n      }\n\n      $scope.configGroups.push(newConfigGroup);\n      $scope.$broadcast(Event.CONFIGGROUPINIT, $scope.configGroups);\n    };\n\n    $scope.addConfig = function () {\n      var isEditing = false;\n      $scope.configIns.forEach(function (config) {\n        if (config.isEdit > 0) {\n          isEditing = true;\n          return false;\n        }\n      });\n\n      if (isEditing) {\n        growl.warning(\"当前有未保存的配置项，请先完成该操作\", {});\n        return;\n      }\n\n      var newconfig = {\n        key: \"\",\n        value: \"\",\n        groupName: \"\",\n        keyDesc: \"\",\n        invalid: false,\n        canDelete: true,\n        domainPath: \"\",\n        id: Number.MAX_VALUE,\n        label: \"\",\n        isEdit: 3\n      };\n      $scope.configIns.push(newconfig);\n      $scope.$broadcast(Event.CONFIGINSINIT, $scope.configIns);\n    };\n\n    $scope.doAction = function (type, select, callback) {\n      if (type == 'configGroupSave') {\n        // BootstrapDialog.show({\n        //   title: '提示',\n        //   closable: false,\n        //   //size:BootstrapDialog.SIZE_WIDE,\n        //   message: '是否要保存配置组:' + escape(select.label) + '',\n        //   buttons: [{\n        //     label: '确定',\n        //     cssClass: 'btn-success',\n        //     action: function(dialogRef) {\n        if (select.id == Number.MAX_VALUE) select.id = 0;\n        configUIService.saveConfigGroup(select, function (resultObj) {\n          if (resultObj.code == 0) {\n            $scope.configGroupsDic[resultObj.data.name] = resultObj.data;\n            $scope.configGroupsDic[resultObj.data.id] = resultObj.data;\n            callback(resultObj.data);\n            growl.success(\"配置组保存成功\", {});\n          }\n        }); //       dialogRef.close();\n        //     }\n        //   }, {\n        //     label: '取消',\n        //     action: function(dialogRef) {\n        //       callback(false);\n        //       dialogRef.close();\n        //     }\n        //   }]\n        // });\n      } else if (type == 'configGroupDelete') {\n        if (select.id == Number.MAX_VALUE) {\n          callback(true);\n\n          for (var i in $scope.configGroups) {\n            if ($scope.configGroups[i].id == Number.MAX_VALUE) {\n              $scope.configGroups.splice(i, 1);\n            }\n          }\n\n          return;\n        }\n\n        BootstrapDialog.show({\n          title: '提示',\n          closable: false,\n          //size:BootstrapDialog.SIZE_WIDE,\n          message: '是否要删除配置组:' + escape(select.label) + '',\n          buttons: [{\n            label: '确定',\n            cssClass: 'btn-success',\n            action: function action(dialogRef) {\n              configUIService.deleteConfigGroup(select.id, function (resultObj) {\n                if (resultObj.code == 0) {\n                  for (var i in $scope.configGroups) {\n                    if ($scope.configGroups[i].id == select.id) {\n                      $scope.configGroups.splice(i, 1);\n                    }\n                  }\n\n                  callback(true);\n                  growl.success(\"配置组删除成功\", {});\n                }\n              });\n              dialogRef.close();\n            }\n          }, {\n            label: '取消',\n            action: function action(dialogRef) {\n              callback(false);\n              dialogRef.close();\n            }\n          }]\n        });\n      } else if (type == 'configSave') {\n        // BootstrapDialog.show({\n        //   title: '提示',\n        //   closable: false,\n        //   //size:BootstrapDialog.SIZE_WIDE,\n        //   message: '是否要保存配置项:' + escape(select.label) + '',\n        //   buttons: [{\n        //     label: '确定',\n        //     cssClass: 'btn-success',\n        //     action: function(dialogRef) {\n        if (select.id == Number.MAX_VALUE) select.id = 0;\n\n        if ($scope.configGroupsDic[select.groupName].type == \"file\") {\n          var listener = $scope.$on(\"uploadTemplate\", function (event, args) {\n            listener();\n            listener = null;\n\n            if (args.state) {\n              if (args.response) {\n                select.value = args.response.data;\n              }\n\n              saveHandler(select, callback, true);\n            }\n          });\n\n          if (select.id == 0) {\n            saveHandler(select, function (returnObj) {\n              $scope.uploadImage(returnObj);\n            });\n          } else {\n            $scope.uploadImage(select);\n          }\n        } else {\n          saveHandler(select, callback, true);\n        } //       dialogRef.close();\n        //     }\n        //   }, {\n        //     label: '取消',\n        //     action: function(dialogRef) {\n        //       callback(false);\n        //       dialogRef.close();\n        //     }\n        //   }]\n        // });\n\n      } else if (type == 'configDelete') {\n        if (select.id == Number.MAX_VALUE) {\n          callback(true);\n\n          for (var i in $scope.configIns) {\n            if ($scope.configIns[i].id == Number.MAX_VALUE) {\n              $scope.configIns.splice(i, 1);\n            }\n          }\n\n          $scope.uploader.removeFromQueue(0);\n          return;\n        }\n\n        BootstrapDialog.show({\n          title: '提示',\n          closable: false,\n          //size:BootstrapDialog.SIZE_WIDE,\n          message: '是否要删除配置项:' + escape(select.label) + '',\n          buttons: [{\n            label: '确定',\n            cssClass: 'btn-success',\n            action: function action(dialogRef) {\n              configUIService.deleteConfig(select.id, function (resultObj) {\n                if (resultObj.code == 0) {\n                  callback(true);\n\n                  for (var i in $scope.configIns) {\n                    if ($scope.configIns[i].id == select.id) {\n                      $scope.configIns.splice(i, 1);\n                    }\n                  }\n\n                  growl.success(\"配置项删除成功\", {});\n                }\n              });\n              dialogRef.close();\n            }\n          }, {\n            label: '取消',\n            action: function action(dialogRef) {\n              callback(false);\n              dialogRef.close();\n            }\n          }]\n        });\n      }\n    };\n\n    var saveHandler = function saveHandler(select, callback, isshow) {\n      configUIService.saveConfig(select, function (resultObj) {\n        if (resultObj.code == 0) {\n          select.id = resultObj.data.id;\n          if (callback) callback(resultObj.data);\n          if (isshow) growl.success(\"配置项保存成功\", {});\n        }\n      });\n    };\n    /**\r\n     * 初始化切换事件\r\n     *\r\n     */\n\n\n    var initEvent = function initEvent() {\n      $('a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\n        if ($(e.target).closest(\"li.disabled\").length > 0) {\n          $(e.target).closest(\"li.disabled\").removeClass(\"active\");\n          $(e.target).closest(\"ul\").children(\"[name=\" + $scope.activeListTab + \"]\").addClass(\"active\");\n          return;\n        }\n\n        var aname = $(e.target).closest(\"li\").attr(\"name\");\n\n        if (aname) {\n          $scope.activeListTab = aname;\n          $scope.$apply();\n\n          if ($scope.activeListTab == \"group\") {\n            $scope.$broadcast(Event.CONFIGGROUPINIT, $scope.configGroups);\n          } else {\n            $scope.$broadcast(Event.CONFIGINSINIT, $scope.configIns);\n          }\n        }\n      });\n    };\n\n    var getConfigs = function getConfigs() {\n      configUIService.getAllConfigs(function (returnObj) {\n        if (returnObj.code == 0) {\n          $scope.configIns = returnObj.data;\n          $scope.$broadcast(Event.CONFIGINSINIT, $scope.configIns);\n        }\n      });\n    }; //初始化\n\n\n    var init = function init() {\n      configUIService.getAllConfigGroups(function (returnObj) {\n        if (returnObj.code == 0) {\n          returnObj.data.forEach(function (item) {\n            $scope.configGroupsDic[item.name] = item;\n            $scope.configGroupsDic[item.id] = item;\n          });\n          $scope.configGroups = returnObj.data;\n\n          if ($scope.activeListTab == \"group\") {\n            $scope.$broadcast(Event.CONFIGGROUPINIT, $scope.configGroups);\n          }\n\n          getConfigs();\n        }\n      });\n    }; //判断用户是否存在\n\n\n    if (!userLoginUIService.user.isAuthenticated) {\n      $scope.$on('loginStatusChanged', function (evt, d) {\n        if (userLoginUIService.user.isAuthenticated) {\n          initEvent();\n          init();\n        }\n      });\n    } else {\n      initEvent();\n      init();\n    }\n  }]);\n});"],"sourceRoot":"/source/"}